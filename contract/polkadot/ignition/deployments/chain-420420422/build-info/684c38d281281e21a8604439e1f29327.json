{
  "id": "684c38d281281e21a8604439e1f29327",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "input": {
    "language": "Solidity",
    "sources": {
      "@openzeppelin/contracts/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "contracts/AiTextNFT.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IAiLaunchpad {\n    function autoListMinted(address seller, uint256 tokenId) external returns (uint256 listingId);\n}\n\n/**\n * @dev Lightweight replacement for the original ERC721 contract. It keeps the\n * same external interface and events that the backend relies on, but omits the\n * ERC721 inheritance to keep the bytecode small.\n */\ncontract AiTextNFT is Ownable {\n    string public name;\n    string public symbol;\n    address public market;\n    uint256 public nextId = 1;\n\n    mapping(uint256 => string) private _contentOf;\n    mapping(uint256 => uint256) public priceOf;\n    mapping(uint256 => bool) public isBuyable;\n    mapping(uint256 => address) private _owners;\n\n    address public priceSetter;\n    uint256 public mintFee;\n    address public mintFeeRecipient;\n\n    error NotMarket();\n    error NonexistentToken();\n\n    event MarketSet(address indexed market);\n    event Minted(uint256 indexed tokenId, address indexed minter, string content);\n    event PriceSetterUpdated(address indexed setter);\n    event PriceSet(uint256 indexed tokenId, uint256 price);\n    event MintFeeUpdated(uint256 mintFee, address indexed recipient);\n\n    constructor(string memory name_, string memory symbol_)\n        Ownable(_msgSender())\n    {\n        name = name_;\n        symbol = symbol_;\n    }\n\n    modifier onlyMarket() {\n        if (msg.sender != market) revert NotMarket();\n        _;\n    }\n\n    function setMarket(address m) external onlyOwner {\n        require(m != address(0), \"market=0\");\n        market = m;\n        emit MarketSet(m);\n    }\n\n    function setMintFee(uint256 fee, address recipient) external onlyOwner {\n        mintFee = fee;\n        mintFeeRecipient = recipient;\n        emit MintFeeUpdated(fee, recipient);\n    }\n\n    function setPriceSetter(address setter) external onlyOwner {\n        priceSetter = setter;\n        emit PriceSetterUpdated(setter);\n    }\n\n    function mint(string calldata content)\n        external\n        payable\n        returns (uint256 tokenId)\n    {\n        require(market != address(0), \"market unset\");\n        tokenId = _mint(msg.sender, content);\n        _collectMintFee();\n    }\n\n    function mintTo(address seller, string calldata content)\n        external\n        onlyMarket\n        returns (uint256 tokenId)\n    {\n        tokenId = _mint(seller, content);\n    }\n\n    function setPrice(uint256 tokenId, uint256 price) external {\n        _requireExists(tokenId);\n        require(msg.sender == owner() || msg.sender == priceSetter, \"not setter\");\n        priceOf[tokenId] = price;\n        isBuyable[tokenId] = true;\n        emit PriceSet(tokenId, price);\n    }\n\n    function contentOf(uint256 tokenId) external view returns (string memory) {\n        _requireExists(tokenId);\n        return _contentOf[tokenId];\n    }\n\n    function ownerOf(uint256 tokenId) external view returns (address) {\n        _requireExists(tokenId);\n        return _owners[tokenId];\n    }\n\n    function disableBuy(uint256 tokenId) external onlyMarket {\n        _requireExists(tokenId);\n        isBuyable[tokenId] = false;\n    }\n\n    function enableBuy(uint256 tokenId) external onlyMarket {\n        _requireExists(tokenId);\n        isBuyable[tokenId] = true;\n    }\n\n    function transferTo(address to, uint256 tokenId) external onlyMarket {\n        require(to != address(0), \"to=0\");\n        _requireExists(tokenId);\n        _owners[tokenId] = to;\n        priceOf[tokenId] = 0;\n        isBuyable[tokenId] = false;\n    }\n\n    function _mint(address seller, string memory content) internal returns (uint256 tokenId) {\n        tokenId = nextId++;\n        _owners[tokenId] = seller;\n        _contentOf[tokenId] = content;\n        isBuyable[tokenId] = false;\n\n        emit Minted(tokenId, msg.sender, content);\n        IAiLaunchpad(market).autoListMinted(seller, tokenId);\n    }\n\n    function _collectMintFee() internal {\n        if (mintFee == 0) {\n            require(msg.value == 0, \"no fee required\");\n            return;\n        }\n        require(msg.value == mintFee, \"bad mint fee\");\n        address recipient = mintFeeRecipient == address(0) ? owner() : mintFeeRecipient;\n        (bool ok, ) = payable(recipient).call{value: msg.value}(\"\");\n        require(ok, \"fee transfer failed\");\n    }\n\n    function _requireExists(uint256 tokenId) internal view {\n        if (_owners[tokenId] == address(0)) revert NonexistentToken();\n    }\n}\n"
      },
      "contracts/Luanchpad.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\nimport \"./AiTextNFT.sol\";\n\ncontract AiLaunchpad is Ownable, ReentrancyGuard {\n    address public immutable nft;\n\n    address public feeRecipient;\n    uint96 public feeBps; // 10000 = 100%\n\n    struct Listing {\n        address seller;\n    }\n\n    mapping(uint256 => Listing) public listings;\n\n    event Listed(uint256 indexed listingId, uint256 indexed tokenId, uint256 price);\n    event Bought(uint256 indexed listingId, uint256 indexed tokenId, address buyer);\n\n    constructor(address nft_, address feeRecipient_, uint96 feeBps_)\n        Ownable(_msgSender())\n    {\n        require(nft_ != address(0), \"nft=0\");\n        nft = nft_;\n        feeRecipient = feeRecipient_;\n        feeBps = feeBps_;\n    }\n\n    function setFee(address recipient, uint96 bps) external onlyOwner {\n        feeRecipient = recipient;\n        feeBps = bps;\n    }\n\n    function buy(uint256 listingId) external payable nonReentrant {\n        Listing memory listing = listings[listingId];\n        require(listing.seller != address(0), \"unknown listing\");\n\n        AiTextNFT token = AiTextNFT(nft);\n        uint256 tokenId = listingId;\n        require(token.isBuyable(tokenId), \"not buyable\");\n\n        uint256 price = token.priceOf(tokenId);\n        require(msg.value == price, \"bad value\");\n\n        uint256 fee = (price * feeBps) / 10_000;\n        if (fee > 0 && feeRecipient != address(0)) {\n            (bool feeOk, ) = payable(feeRecipient).call{value: fee}(\"\");\n            require(feeOk, \"fee transfer fail\");\n        }\n\n        uint256 sellerProceeds = price - fee;\n        (bool sellerOk, ) = payable(listing.seller).call{value: sellerProceeds}(\"\");\n        require(sellerOk, \"seller transfer fail\");\n\n        address buyer = msg.sender;\n\n        token.transferTo(buyer, tokenId);\n        _delist(tokenId);\n        emit Bought(listingId, tokenId, buyer);\n\n        _list(buyer, tokenId);\n    }\n\n    function autoListMinted(address seller, uint256 tokenId)\n        external\n        returns (uint256 listingId)\n    {\n        require(msg.sender == nft, \"only nft\");\n        listingId = _list(seller, tokenId);\n    }\n\n    receive() external payable {}\n\n    function _list(address seller, uint256 tokenId) internal returns (uint256 listingId) {\n        listings[tokenId] = Listing({seller: seller});\n\n        AiTextNFT token = AiTextNFT(nft);\n        uint256 price = token.priceOf(tokenId);\n        listingId = tokenId;\n\n        emit Listed(listingId, tokenId, price);\n\n        token.disableBuy(tokenId);\n    }\n\n    function _delist(uint256 tokenId) internal {\n        delete listings[tokenId];\n        AiTextNFT(nft).disableBuy(tokenId);\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": false,
        "runs": 200
      },
      "viaIR": true,
      "evmVersion": "paris",
      "outputSelection": {
        "*": {
          "*": [
            "abi"
          ]
        }
      },
      "resolc": {
        "version": "latest",
        "compilerSource": "npm",
        "settings": {
          "optimizer": {}
        }
      }
    }
  },
  "output": {
    "errors": [],
    "version": "0.8.28",
    "long_version": "0.8.28+commit.7893614a.Emscripten.clang",
    "revive_version": "0.2.0+commit.e94432e.llvm-18.1.8",
    "sources": {
      "@openzeppelin/contracts/access/Ownable.sol": {
        "id": 0,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
          "exportedSymbols": {
            "Context": [
              177
            ],
            "Ownable": [
              147
            ]
          },
          "id": 148,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "102:24:0"
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
              "file": "../utils/Context.sol",
              "id": 3,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 148,
              "sourceUnit": 178,
              "src": "128:45:0",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 2,
                    "name": "Context",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 177,
                    "src": "136:7:0",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 5,
                    "name": "Context",
                    "nameLocations": [
                      "692:7:0"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 177,
                    "src": "692:7:0"
                  },
                  "id": 6,
                  "nodeType": "InheritanceSpecifier",
                  "src": "692:7:0"
                }
              ],
              "canonicalName": "Ownable",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 4,
                "nodeType": "StructuredDocumentation",
                "src": "175:487:0",
                "text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
              },
              "fullyImplemented": true,
              "id": 147,
              "linearizedBaseContracts": [
                147,
                177
              ],
              "name": "Ownable",
              "nameLocation": "681:7:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 8,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "722:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 147,
                  "src": "706:22:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "706:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "documentation": {
                    "id": 9,
                    "nodeType": "StructuredDocumentation",
                    "src": "735:85:0",
                    "text": " @dev The caller account is not authorized to perform an operation."
                  },
                  "errorSelector": "118cdaa7",
                  "id": 13,
                  "name": "OwnableUnauthorizedAccount",
                  "nameLocation": "831:26:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 12,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 11,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "866:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 13,
                        "src": "858:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 10,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "858:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "857:17:0"
                  },
                  "src": "825:50:0"
                },
                {
                  "documentation": {
                    "id": 14,
                    "nodeType": "StructuredDocumentation",
                    "src": "881:82:0",
                    "text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
                  },
                  "errorSelector": "1e4fbdf7",
                  "id": 18,
                  "name": "OwnableInvalidOwner",
                  "nameLocation": "974:19:0",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 17,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 16,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "1002:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 18,
                        "src": "994:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 15,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "994:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "993:15:0"
                  },
                  "src": "968:41:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                  "id": 24,
                  "name": "OwnershipTransferred",
                  "nameLocation": "1021:20:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 23,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 20,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "previousOwner",
                        "nameLocation": "1058:13:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 24,
                        "src": "1042:29:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 19,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1042:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 22,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "1089:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 24,
                        "src": "1073:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 21,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1073:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1041:57:0"
                  },
                  "src": "1015:84:0"
                },
                {
                  "body": {
                    "id": 49,
                    "nodeType": "Block",
                    "src": "1259:153:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 35,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 30,
                            "name": "initialOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 27,
                            "src": "1273:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 33,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1297:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 32,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1289:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 31,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1289:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 34,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1289:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1273:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 44,
                        "nodeType": "IfStatement",
                        "src": "1269:95:0",
                        "trueBody": {
                          "id": 43,
                          "nodeType": "Block",
                          "src": "1301:63:0",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 39,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "1350:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 38,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "1342:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 37,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "1342:7:0",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 40,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "1342:10:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 36,
                                  "name": "OwnableInvalidOwner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 18,
                                  "src": "1322:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 41,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1322:31:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 42,
                              "nodeType": "RevertStatement",
                              "src": "1315:38:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 46,
                              "name": "initialOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 27,
                              "src": "1392:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 45,
                            "name": "_transferOwnership",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 146,
                            "src": "1373:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 47,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1373:32:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 48,
                        "nodeType": "ExpressionStatement",
                        "src": "1373:32:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 25,
                    "nodeType": "StructuredDocumentation",
                    "src": "1105:115:0",
                    "text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
                  },
                  "id": 50,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 28,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 27,
                        "mutability": "mutable",
                        "name": "initialOwner",
                        "nameLocation": "1245:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 50,
                        "src": "1237:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 26,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1237:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1236:22:0"
                  },
                  "returnParameters": {
                    "id": 29,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1259:0:0"
                  },
                  "scope": 147,
                  "src": "1225:187:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 57,
                    "nodeType": "Block",
                    "src": "1521:41:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 53,
                            "name": "_checkOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 84,
                            "src": "1531:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$__$",
                              "typeString": "function () view"
                            }
                          },
                          "id": 54,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1531:13:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 55,
                        "nodeType": "ExpressionStatement",
                        "src": "1531:13:0"
                      },
                      {
                        "id": 56,
                        "nodeType": "PlaceholderStatement",
                        "src": "1554:1:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 51,
                    "nodeType": "StructuredDocumentation",
                    "src": "1418:77:0",
                    "text": " @dev Throws if called by any account other than the owner."
                  },
                  "id": 58,
                  "name": "onlyOwner",
                  "nameLocation": "1509:9:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 52,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1518:2:0"
                  },
                  "src": "1500:62:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 66,
                    "nodeType": "Block",
                    "src": "1693:30:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 64,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8,
                          "src": "1710:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 63,
                        "id": 65,
                        "nodeType": "Return",
                        "src": "1703:13:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 59,
                    "nodeType": "StructuredDocumentation",
                    "src": "1568:65:0",
                    "text": " @dev Returns the address of the current owner."
                  },
                  "functionSelector": "8da5cb5b",
                  "id": 67,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "owner",
                  "nameLocation": "1647:5:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 60,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1652:2:0"
                  },
                  "returnParameters": {
                    "id": 63,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 62,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 67,
                        "src": "1684:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 61,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1684:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1683:9:0"
                  },
                  "scope": 147,
                  "src": "1638:85:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 83,
                    "nodeType": "Block",
                    "src": "1841:117:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 75,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 71,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 67,
                              "src": "1855:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 72,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1855:7:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 73,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 159,
                              "src": "1866:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 74,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1866:12:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1855:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 82,
                        "nodeType": "IfStatement",
                        "src": "1851:101:0",
                        "trueBody": {
                          "id": 81,
                          "nodeType": "Block",
                          "src": "1880:72:0",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "id": 77,
                                      "name": "_msgSender",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 159,
                                      "src": "1928:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                        "typeString": "function () view returns (address)"
                                      }
                                    },
                                    "id": 78,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "1928:12:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 76,
                                  "name": "OwnableUnauthorizedAccount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 13,
                                  "src": "1901:26:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 79,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1901:40:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 80,
                              "nodeType": "RevertStatement",
                              "src": "1894:47:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 68,
                    "nodeType": "StructuredDocumentation",
                    "src": "1729:62:0",
                    "text": " @dev Throws if the sender is not the owner."
                  },
                  "id": 84,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_checkOwner",
                  "nameLocation": "1805:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 69,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1816:2:0"
                  },
                  "returnParameters": {
                    "id": 70,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1841:0:0"
                  },
                  "scope": 147,
                  "src": "1796:162:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 97,
                    "nodeType": "Block",
                    "src": "2347:47:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 93,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2384:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 92,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2376:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 91,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2376:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 94,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2376:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 90,
                            "name": "_transferOwnership",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 146,
                            "src": "2357:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 95,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2357:30:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 96,
                        "nodeType": "ExpressionStatement",
                        "src": "2357:30:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 85,
                    "nodeType": "StructuredDocumentation",
                    "src": "1964:324:0",
                    "text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
                  },
                  "functionSelector": "715018a6",
                  "id": 98,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 88,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 87,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "2337:9:0"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 58,
                        "src": "2337:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2337:9:0"
                    }
                  ],
                  "name": "renounceOwnership",
                  "nameLocation": "2302:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 86,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2319:2:0"
                  },
                  "returnParameters": {
                    "id": 89,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2347:0:0"
                  },
                  "scope": 147,
                  "src": "2293:101:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 125,
                    "nodeType": "Block",
                    "src": "2613:145:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 111,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 106,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 101,
                            "src": "2627:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 109,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2647:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 108,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2639:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 107,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "2639:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 110,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2639:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2627:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 120,
                        "nodeType": "IfStatement",
                        "src": "2623:91:0",
                        "trueBody": {
                          "id": 119,
                          "nodeType": "Block",
                          "src": "2651:63:0",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 115,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "2700:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 114,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "2692:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 113,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "2692:7:0",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 116,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "2692:10:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 112,
                                  "name": "OwnableInvalidOwner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 18,
                                  "src": "2672:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
                                    "typeString": "function (address) pure returns (error)"
                                  }
                                },
                                "id": 117,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2672:31:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 118,
                              "nodeType": "RevertStatement",
                              "src": "2665:38:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 122,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 101,
                              "src": "2742:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 121,
                            "name": "_transferOwnership",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 146,
                            "src": "2723:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 123,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2723:28:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 124,
                        "nodeType": "ExpressionStatement",
                        "src": "2723:28:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 99,
                    "nodeType": "StructuredDocumentation",
                    "src": "2400:138:0",
                    "text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
                  },
                  "functionSelector": "f2fde38b",
                  "id": 126,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 104,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 103,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "2603:9:0"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 58,
                        "src": "2603:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2603:9:0"
                    }
                  ],
                  "name": "transferOwnership",
                  "nameLocation": "2552:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 102,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 101,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "2578:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 126,
                        "src": "2570:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 100,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2570:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2569:18:0"
                  },
                  "returnParameters": {
                    "id": 105,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2613:0:0"
                  },
                  "scope": 147,
                  "src": "2543:215:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 145,
                    "nodeType": "Block",
                    "src": "2975:124:0",
                    "statements": [
                      {
                        "assignments": [
                          133
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 133,
                            "mutability": "mutable",
                            "name": "oldOwner",
                            "nameLocation": "2993:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 145,
                            "src": "2985:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 132,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2985:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 135,
                        "initialValue": {
                          "id": 134,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8,
                          "src": "3004:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2985:25:0"
                      },
                      {
                        "expression": {
                          "id": 138,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 136,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 8,
                            "src": "3020:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 137,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 129,
                            "src": "3029:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3020:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 139,
                        "nodeType": "ExpressionStatement",
                        "src": "3020:17:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 141,
                              "name": "oldOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 133,
                              "src": "3073:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 142,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 129,
                              "src": "3083:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 140,
                            "name": "OwnershipTransferred",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24,
                            "src": "3052:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 143,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3052:40:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 144,
                        "nodeType": "EmitStatement",
                        "src": "3047:45:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 127,
                    "nodeType": "StructuredDocumentation",
                    "src": "2764:143:0",
                    "text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
                  },
                  "id": 146,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_transferOwnership",
                  "nameLocation": "2921:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 130,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 129,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "2948:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 146,
                        "src": "2940:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 128,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2940:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2939:18:0"
                  },
                  "returnParameters": {
                    "id": 131,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2975:0:0"
                  },
                  "scope": 147,
                  "src": "2912:187:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 148,
              "src": "663:2438:0",
              "usedErrors": [
                13,
                18
              ],
              "usedEvents": [
                24
              ]
            }
          ],
          "src": "102:3000:0"
        }
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "id": 1,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
          "exportedSymbols": {
            "Context": [
              177
            ]
          },
          "id": 178,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 149,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "101:24:1"
            },
            {
              "abstract": true,
              "baseContracts": [],
              "canonicalName": "Context",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 150,
                "nodeType": "StructuredDocumentation",
                "src": "127:496:1",
                "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
              },
              "fullyImplemented": true,
              "id": 177,
              "linearizedBaseContracts": [
                177
              ],
              "name": "Context",
              "nameLocation": "642:7:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 158,
                    "nodeType": "Block",
                    "src": "718:34:1",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 155,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "735:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 156,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "739:6:1",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "735:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 154,
                        "id": 157,
                        "nodeType": "Return",
                        "src": "728:17:1"
                      }
                    ]
                  },
                  "id": 159,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgSender",
                  "nameLocation": "665:10:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 151,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "675:2:1"
                  },
                  "returnParameters": {
                    "id": 154,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 153,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 159,
                        "src": "709:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 152,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "709:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "708:9:1"
                  },
                  "scope": 177,
                  "src": "656:96:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 167,
                    "nodeType": "Block",
                    "src": "825:32:1",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 164,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "842:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 165,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "846:4:1",
                          "memberName": "data",
                          "nodeType": "MemberAccess",
                          "src": "842:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        },
                        "functionReturnParameters": 163,
                        "id": 166,
                        "nodeType": "Return",
                        "src": "835:15:1"
                      }
                    ]
                  },
                  "id": 168,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgData",
                  "nameLocation": "767:8:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 160,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "775:2:1"
                  },
                  "returnParameters": {
                    "id": 163,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 162,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 168,
                        "src": "809:14:1",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 161,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "809:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "808:16:1"
                  },
                  "scope": 177,
                  "src": "758:99:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 175,
                    "nodeType": "Block",
                    "src": "935:25:1",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "30",
                          "id": 173,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "952:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "functionReturnParameters": 172,
                        "id": 174,
                        "nodeType": "Return",
                        "src": "945:8:1"
                      }
                    ]
                  },
                  "id": 176,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_contextSuffixLength",
                  "nameLocation": "872:20:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 169,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "892:2:1"
                  },
                  "returnParameters": {
                    "id": 172,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 171,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 176,
                        "src": "926:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 170,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "926:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "925:9:1"
                  },
                  "scope": 177,
                  "src": "863:97:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 178,
              "src": "624:338:1",
              "usedErrors": [],
              "usedEvents": []
            }
          ],
          "src": "101:862:1"
        }
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
        "id": 2,
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
          "exportedSymbols": {
            "ReentrancyGuard": [
              246
            ]
          },
          "id": 247,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 179,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "109:24:2"
            },
            {
              "abstract": true,
              "baseContracts": [],
              "canonicalName": "ReentrancyGuard",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 180,
                "nodeType": "StructuredDocumentation",
                "src": "135:894:2",
                "text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n consider using {ReentrancyGuardTransient} instead.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
              },
              "fullyImplemented": true,
              "id": 246,
              "linearizedBaseContracts": [
                246
              ],
              "name": "ReentrancyGuard",
              "nameLocation": "1048:15:2",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 183,
                  "mutability": "constant",
                  "name": "NOT_ENTERED",
                  "nameLocation": "1843:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 246,
                  "src": "1818:40:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 181,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1818:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "31",
                    "id": 182,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1857:1:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1_by_1",
                      "typeString": "int_const 1"
                    },
                    "value": "1"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 186,
                  "mutability": "constant",
                  "name": "ENTERED",
                  "nameLocation": "1889:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 246,
                  "src": "1864:36:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 184,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1864:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "32",
                    "id": 185,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1899:1:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 188,
                  "mutability": "mutable",
                  "name": "_status",
                  "nameLocation": "1923:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 246,
                  "src": "1907:23:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 187,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1907:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "documentation": {
                    "id": 189,
                    "nodeType": "StructuredDocumentation",
                    "src": "1937:52:2",
                    "text": " @dev Unauthorized reentrant call."
                  },
                  "errorSelector": "3ee5aeb5",
                  "id": 191,
                  "name": "ReentrancyGuardReentrantCall",
                  "nameLocation": "2000:28:2",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 190,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2028:2:2"
                  },
                  "src": "1994:37:2"
                },
                {
                  "body": {
                    "id": 198,
                    "nodeType": "Block",
                    "src": "2051:38:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 196,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 194,
                            "name": "_status",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 188,
                            "src": "2061:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 195,
                            "name": "NOT_ENTERED",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 183,
                            "src": "2071:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2061:21:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 197,
                        "nodeType": "ExpressionStatement",
                        "src": "2061:21:2"
                      }
                    ]
                  },
                  "id": 199,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 192,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2048:2:2"
                  },
                  "returnParameters": {
                    "id": 193,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2051:0:2"
                  },
                  "scope": 246,
                  "src": "2037:52:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 209,
                    "nodeType": "Block",
                    "src": "2490:79:2",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 202,
                            "name": "_nonReentrantBefore",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 226,
                            "src": "2500:19:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 203,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2500:21:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 204,
                        "nodeType": "ExpressionStatement",
                        "src": "2500:21:2"
                      },
                      {
                        "id": 205,
                        "nodeType": "PlaceholderStatement",
                        "src": "2531:1:2"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 206,
                            "name": "_nonReentrantAfter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 234,
                            "src": "2542:18:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 207,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2542:20:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 208,
                        "nodeType": "ExpressionStatement",
                        "src": "2542:20:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 200,
                    "nodeType": "StructuredDocumentation",
                    "src": "2095:366:2",
                    "text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
                  },
                  "id": 210,
                  "name": "nonReentrant",
                  "nameLocation": "2475:12:2",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 201,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2487:2:2"
                  },
                  "src": "2466:103:2",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 225,
                    "nodeType": "Block",
                    "src": "2614:268:2",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 215,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 213,
                            "name": "_status",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 188,
                            "src": "2702:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 214,
                            "name": "ENTERED",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 186,
                            "src": "2713:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2702:18:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 220,
                        "nodeType": "IfStatement",
                        "src": "2698:86:2",
                        "trueBody": {
                          "id": 219,
                          "nodeType": "Block",
                          "src": "2722:62:2",
                          "statements": [
                            {
                              "errorCall": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 216,
                                  "name": "ReentrancyGuardReentrantCall",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 191,
                                  "src": "2743:28:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                    "typeString": "function () pure returns (error)"
                                  }
                                },
                                "id": 217,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2743:30:2",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_error",
                                  "typeString": "error"
                                }
                              },
                              "id": 218,
                              "nodeType": "RevertStatement",
                              "src": "2736:37:2"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 223,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 221,
                            "name": "_status",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 188,
                            "src": "2858:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 222,
                            "name": "ENTERED",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 186,
                            "src": "2868:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2858:17:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 224,
                        "nodeType": "ExpressionStatement",
                        "src": "2858:17:2"
                      }
                    ]
                  },
                  "id": 226,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_nonReentrantBefore",
                  "nameLocation": "2584:19:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 211,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2603:2:2"
                  },
                  "returnParameters": {
                    "id": 212,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2614:0:2"
                  },
                  "scope": 246,
                  "src": "2575:307:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 233,
                    "nodeType": "Block",
                    "src": "2926:170:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 231,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 229,
                            "name": "_status",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 188,
                            "src": "3068:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 230,
                            "name": "NOT_ENTERED",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 183,
                            "src": "3078:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3068:21:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 232,
                        "nodeType": "ExpressionStatement",
                        "src": "3068:21:2"
                      }
                    ]
                  },
                  "id": 234,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_nonReentrantAfter",
                  "nameLocation": "2897:18:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 227,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2915:2:2"
                  },
                  "returnParameters": {
                    "id": 228,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2926:0:2"
                  },
                  "scope": 246,
                  "src": "2888:208:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 244,
                    "nodeType": "Block",
                    "src": "3339:42:2",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 242,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 240,
                            "name": "_status",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 188,
                            "src": "3356:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 241,
                            "name": "ENTERED",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 186,
                            "src": "3367:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3356:18:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 239,
                        "id": 243,
                        "nodeType": "Return",
                        "src": "3349:25:2"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 235,
                    "nodeType": "StructuredDocumentation",
                    "src": "3102:168:2",
                    "text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
                  },
                  "id": 245,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_reentrancyGuardEntered",
                  "nameLocation": "3284:23:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 236,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3307:2:2"
                  },
                  "returnParameters": {
                    "id": 239,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 238,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 245,
                        "src": "3333:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 237,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3333:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3332:6:2"
                  },
                  "scope": 246,
                  "src": "3275:106:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 247,
              "src": "1030:2353:2",
              "usedErrors": [
                191
              ],
              "usedEvents": []
            }
          ],
          "src": "109:3275:2"
        }
      },
      "contracts/AiTextNFT.sol": {
        "id": 3,
        "ast": {
          "absolutePath": "contracts/AiTextNFT.sol",
          "exportedSymbols": {
            "AiTextNFT": [
              747
            ],
            "Context": [
              177
            ],
            "IAiLaunchpad": [
              259
            ],
            "Ownable": [
              147
            ]
          },
          "id": 748,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 248,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".24"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:3"
            },
            {
              "absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
              "file": "@openzeppelin/contracts/access/Ownable.sol",
              "id": 249,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 748,
              "sourceUnit": 148,
              "src": "58:52:3",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IAiLaunchpad",
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 259,
              "linearizedBaseContracts": [
                259
              ],
              "name": "IAiLaunchpad",
              "nameLocation": "122:12:3",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "7d808e68",
                  "id": 258,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "autoListMinted",
                  "nameLocation": "150:14:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 254,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 251,
                        "mutability": "mutable",
                        "name": "seller",
                        "nameLocation": "173:6:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 258,
                        "src": "165:14:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 250,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "165:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 253,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "189:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 258,
                        "src": "181:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 252,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "181:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "164:33:3"
                  },
                  "returnParameters": {
                    "id": 257,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 256,
                        "mutability": "mutable",
                        "name": "listingId",
                        "nameLocation": "224:9:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 258,
                        "src": "216:17:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 255,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "216:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "215:19:3"
                  },
                  "scope": 259,
                  "src": "141:94:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 748,
              "src": "112:125:3",
              "usedErrors": [],
              "usedEvents": []
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 261,
                    "name": "Ownable",
                    "nameLocations": [
                      "478:7:3"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 147,
                    "src": "478:7:3"
                  },
                  "id": 262,
                  "nodeType": "InheritanceSpecifier",
                  "src": "478:7:3"
                }
              ],
              "canonicalName": "AiTextNFT",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 260,
                "nodeType": "StructuredDocumentation",
                "src": "239:216:3",
                "text": " @dev Lightweight replacement for the original ERC721 contract. It keeps the\n same external interface and events that the backend relies on, but omits the\n ERC721 inheritance to keep the bytecode small."
              },
              "fullyImplemented": true,
              "id": 747,
              "linearizedBaseContracts": [
                747,
                147,
                177
              ],
              "name": "AiTextNFT",
              "nameLocation": "465:9:3",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "functionSelector": "06fdde03",
                  "id": 264,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "506:4:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 747,
                  "src": "492:18:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 263,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "492:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "95d89b41",
                  "id": 266,
                  "mutability": "mutable",
                  "name": "symbol",
                  "nameLocation": "530:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 747,
                  "src": "516:20:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 265,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "516:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "80f55605",
                  "id": 268,
                  "mutability": "mutable",
                  "name": "market",
                  "nameLocation": "557:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 747,
                  "src": "542:21:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 267,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "542:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "61b8ce8c",
                  "id": 271,
                  "mutability": "mutable",
                  "name": "nextId",
                  "nameLocation": "584:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 747,
                  "src": "569:25:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 269,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "569:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "31",
                    "id": 270,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "593:1:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1_by_1",
                      "typeString": "int_const 1"
                    },
                    "value": "1"
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 275,
                  "mutability": "mutable",
                  "name": "_contentOf",
                  "nameLocation": "636:10:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 747,
                  "src": "601:45:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                    "typeString": "mapping(uint256 => string)"
                  },
                  "typeName": {
                    "id": 274,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 272,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "609:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "601:26:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                      "typeString": "mapping(uint256 => string)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 273,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "620:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "functionSelector": "b9186d7d",
                  "id": 279,
                  "mutability": "mutable",
                  "name": "priceOf",
                  "nameLocation": "687:7:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 747,
                  "src": "652:42:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                    "typeString": "mapping(uint256 => uint256)"
                  },
                  "typeName": {
                    "id": 278,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 276,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "660:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "652:27:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                      "typeString": "mapping(uint256 => uint256)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 277,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "671:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "e738c7c8",
                  "id": 283,
                  "mutability": "mutable",
                  "name": "isBuyable",
                  "nameLocation": "732:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 747,
                  "src": "700:41:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                    "typeString": "mapping(uint256 => bool)"
                  },
                  "typeName": {
                    "id": 282,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 280,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "708:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "700:24:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                      "typeString": "mapping(uint256 => bool)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 281,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "719:4:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 287,
                  "mutability": "mutable",
                  "name": "_owners",
                  "nameLocation": "783:7:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 747,
                  "src": "747:43:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                    "typeString": "mapping(uint256 => address)"
                  },
                  "typeName": {
                    "id": 286,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 284,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "755:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "747:27:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                      "typeString": "mapping(uint256 => address)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 285,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "766:7:3",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "functionSelector": "2c09bef7",
                  "id": 289,
                  "mutability": "mutable",
                  "name": "priceSetter",
                  "nameLocation": "812:11:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 747,
                  "src": "797:26:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 288,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "797:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "13966db5",
                  "id": 291,
                  "mutability": "mutable",
                  "name": "mintFee",
                  "nameLocation": "844:7:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 747,
                  "src": "829:22:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 290,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "829:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "765b0c36",
                  "id": 293,
                  "mutability": "mutable",
                  "name": "mintFeeRecipient",
                  "nameLocation": "872:16:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 747,
                  "src": "857:31:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 292,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "857:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "errorSelector": "c4bbea69",
                  "id": 295,
                  "name": "NotMarket",
                  "nameLocation": "901:9:3",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 294,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "910:2:3"
                  },
                  "src": "895:18:3"
                },
                {
                  "errorSelector": "b1d04f08",
                  "id": 297,
                  "name": "NonexistentToken",
                  "nameLocation": "924:16:3",
                  "nodeType": "ErrorDefinition",
                  "parameters": {
                    "id": 296,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "940:2:3"
                  },
                  "src": "918:25:3"
                },
                {
                  "anonymous": false,
                  "eventSelector": "e307206b150a74b2a5d43a35703be791342ca123c12a507c5f679cf1d011d1b9",
                  "id": 301,
                  "name": "MarketSet",
                  "nameLocation": "955:9:3",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 300,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 299,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "market",
                        "nameLocation": "981:6:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 301,
                        "src": "965:22:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 298,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "965:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "964:24:3"
                  },
                  "src": "949:40:3"
                },
                {
                  "anonymous": false,
                  "eventSelector": "3b8a974a6971dbe70c8718ec80406b2790d2aa5477b6a5bed3d94fa19e06d60d",
                  "id": 309,
                  "name": "Minted",
                  "nameLocation": "1000:6:3",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 308,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 303,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "1023:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 309,
                        "src": "1007:23:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 302,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1007:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 305,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "minter",
                        "nameLocation": "1048:6:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 309,
                        "src": "1032:22:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 304,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1032:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 307,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "content",
                        "nameLocation": "1063:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 309,
                        "src": "1056:14:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 306,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1056:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1006:65:3"
                  },
                  "src": "994:78:3"
                },
                {
                  "anonymous": false,
                  "eventSelector": "e83e5b9f87ec16fe8db2c5d37c4f81ed374f6c9bf946a10330bf278826a97dc5",
                  "id": 313,
                  "name": "PriceSetterUpdated",
                  "nameLocation": "1083:18:3",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 312,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 311,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "setter",
                        "nameLocation": "1118:6:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 313,
                        "src": "1102:22:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 310,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1102:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1101:24:3"
                  },
                  "src": "1077:49:3"
                },
                {
                  "anonymous": false,
                  "eventSelector": "a0f1665b7b659537b52deec61ea64d134a3bccda74c7f4e79f2246e7a8187a8a",
                  "id": 319,
                  "name": "PriceSet",
                  "nameLocation": "1137:8:3",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 318,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 315,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "1162:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 319,
                        "src": "1146:23:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 314,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1146:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 317,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "price",
                        "nameLocation": "1179:5:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 319,
                        "src": "1171:13:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 316,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1171:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1145:40:3"
                  },
                  "src": "1131:55:3"
                },
                {
                  "anonymous": false,
                  "eventSelector": "6c4a253e5611751265eb9b93389dde6384df867caa938f4a032a3be815cdf881",
                  "id": 325,
                  "name": "MintFeeUpdated",
                  "nameLocation": "1197:14:3",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 324,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 321,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "mintFee",
                        "nameLocation": "1220:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 325,
                        "src": "1212:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 320,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1212:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 323,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nameLocation": "1245:9:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 325,
                        "src": "1229:25:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 322,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1229:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1211:44:3"
                  },
                  "src": "1191:65:3"
                },
                {
                  "body": {
                    "id": 344,
                    "nodeType": "Block",
                    "src": "1352:55:3",
                    "statements": [
                      {
                        "expression": {
                          "id": 338,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 336,
                            "name": "name",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 264,
                            "src": "1362:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 337,
                            "name": "name_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 327,
                            "src": "1369:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "1362:12:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 339,
                        "nodeType": "ExpressionStatement",
                        "src": "1362:12:3"
                      },
                      {
                        "expression": {
                          "id": 342,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 340,
                            "name": "symbol",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 266,
                            "src": "1384:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 341,
                            "name": "symbol_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 329,
                            "src": "1393:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "1384:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 343,
                        "nodeType": "ExpressionStatement",
                        "src": "1384:16:3"
                      }
                    ]
                  },
                  "id": 345,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 332,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 159,
                            "src": "1334:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 333,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1334:12:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "id": 334,
                      "kind": "baseConstructorSpecifier",
                      "modifierName": {
                        "id": 331,
                        "name": "Ownable",
                        "nameLocations": [
                          "1326:7:3"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 147,
                        "src": "1326:7:3"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1326:21:3"
                    }
                  ],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 330,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 327,
                        "mutability": "mutable",
                        "name": "name_",
                        "nameLocation": "1288:5:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 345,
                        "src": "1274:19:3",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 326,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1274:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 329,
                        "mutability": "mutable",
                        "name": "symbol_",
                        "nameLocation": "1309:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 345,
                        "src": "1295:21:3",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 328,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1295:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1273:44:3"
                  },
                  "returnParameters": {
                    "id": 335,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1352:0:3"
                  },
                  "scope": 747,
                  "src": "1262:145:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 356,
                    "nodeType": "Block",
                    "src": "1435:72:3",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 350,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 347,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "1449:3:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 348,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1453:6:3",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "1449:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "id": 349,
                            "name": "market",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 268,
                            "src": "1463:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1449:20:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 354,
                        "nodeType": "IfStatement",
                        "src": "1445:44:3",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 351,
                              "name": "NotMarket",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 295,
                              "src": "1478:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 352,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1478:11:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 353,
                          "nodeType": "RevertStatement",
                          "src": "1471:18:3"
                        }
                      },
                      {
                        "id": 355,
                        "nodeType": "PlaceholderStatement",
                        "src": "1499:1:3"
                      }
                    ]
                  },
                  "id": 357,
                  "name": "onlyMarket",
                  "nameLocation": "1422:10:3",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 346,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1432:2:3"
                  },
                  "src": "1413:94:3",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 382,
                    "nodeType": "Block",
                    "src": "1562:100:3",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 370,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 365,
                                "name": "m",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 359,
                                "src": "1580:1:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 368,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1593:1:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 367,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "1585:7:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 366,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1585:7:3",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 369,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1585:10:3",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "1580:15:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6d61726b65743d30",
                              "id": 371,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1597:10:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_afac9b2b1ae552b19d0744c4adac1197309c79c3341768d33e9dc2358404fb9d",
                                "typeString": "literal_string \"market=0\""
                              },
                              "value": "market=0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_afac9b2b1ae552b19d0744c4adac1197309c79c3341768d33e9dc2358404fb9d",
                                "typeString": "literal_string \"market=0\""
                              }
                            ],
                            "id": 364,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1572:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 372,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1572:36:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 373,
                        "nodeType": "ExpressionStatement",
                        "src": "1572:36:3"
                      },
                      {
                        "expression": {
                          "id": 376,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 374,
                            "name": "market",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 268,
                            "src": "1618:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 375,
                            "name": "m",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 359,
                            "src": "1627:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1618:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 377,
                        "nodeType": "ExpressionStatement",
                        "src": "1618:10:3"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 379,
                              "name": "m",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 359,
                              "src": "1653:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 378,
                            "name": "MarketSet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 301,
                            "src": "1643:9:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 380,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1643:12:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 381,
                        "nodeType": "EmitStatement",
                        "src": "1638:17:3"
                      }
                    ]
                  },
                  "functionSelector": "6dcea85f",
                  "id": 383,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 362,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 361,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "1552:9:3"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 58,
                        "src": "1552:9:3"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1552:9:3"
                    }
                  ],
                  "name": "setMarket",
                  "nameLocation": "1522:9:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 360,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 359,
                        "mutability": "mutable",
                        "name": "m",
                        "nameLocation": "1540:1:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 383,
                        "src": "1532:9:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 358,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1532:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1531:11:3"
                  },
                  "returnParameters": {
                    "id": 363,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1562:0:3"
                  },
                  "scope": 747,
                  "src": "1513:149:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 405,
                    "nodeType": "Block",
                    "src": "1739:113:3",
                    "statements": [
                      {
                        "expression": {
                          "id": 394,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 392,
                            "name": "mintFee",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 291,
                            "src": "1749:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 393,
                            "name": "fee",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 385,
                            "src": "1759:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1749:13:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 395,
                        "nodeType": "ExpressionStatement",
                        "src": "1749:13:3"
                      },
                      {
                        "expression": {
                          "id": 398,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 396,
                            "name": "mintFeeRecipient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 293,
                            "src": "1772:16:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 397,
                            "name": "recipient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 387,
                            "src": "1791:9:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1772:28:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 399,
                        "nodeType": "ExpressionStatement",
                        "src": "1772:28:3"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 401,
                              "name": "fee",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 385,
                              "src": "1830:3:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 402,
                              "name": "recipient",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 387,
                              "src": "1835:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 400,
                            "name": "MintFeeUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 325,
                            "src": "1815:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function (uint256,address)"
                            }
                          },
                          "id": 403,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1815:30:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 404,
                        "nodeType": "EmitStatement",
                        "src": "1810:35:3"
                      }
                    ]
                  },
                  "functionSelector": "4d02d6b5",
                  "id": 406,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 390,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 389,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "1729:9:3"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 58,
                        "src": "1729:9:3"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1729:9:3"
                    }
                  ],
                  "name": "setMintFee",
                  "nameLocation": "1677:10:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 388,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 385,
                        "mutability": "mutable",
                        "name": "fee",
                        "nameLocation": "1696:3:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 406,
                        "src": "1688:11:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 384,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1688:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 387,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nameLocation": "1709:9:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 406,
                        "src": "1701:17:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 386,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1701:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1687:32:3"
                  },
                  "returnParameters": {
                    "id": 391,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1739:0:3"
                  },
                  "scope": 747,
                  "src": "1668:184:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 421,
                    "nodeType": "Block",
                    "src": "1917:78:3",
                    "statements": [
                      {
                        "expression": {
                          "id": 415,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 413,
                            "name": "priceSetter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 289,
                            "src": "1927:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 414,
                            "name": "setter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 408,
                            "src": "1941:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1927:20:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 416,
                        "nodeType": "ExpressionStatement",
                        "src": "1927:20:3"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 418,
                              "name": "setter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 408,
                              "src": "1981:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 417,
                            "name": "PriceSetterUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 313,
                            "src": "1962:18:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 419,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1962:26:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 420,
                        "nodeType": "EmitStatement",
                        "src": "1957:31:3"
                      }
                    ]
                  },
                  "functionSelector": "63791e3c",
                  "id": 422,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 411,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 410,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "1907:9:3"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 58,
                        "src": "1907:9:3"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1907:9:3"
                    }
                  ],
                  "name": "setPriceSetter",
                  "nameLocation": "1867:14:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 409,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 408,
                        "mutability": "mutable",
                        "name": "setter",
                        "nameLocation": "1890:6:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 422,
                        "src": "1882:14:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 407,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1882:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1881:16:3"
                  },
                  "returnParameters": {
                    "id": 412,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1917:0:3"
                  },
                  "scope": 747,
                  "src": "1858:137:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 450,
                    "nodeType": "Block",
                    "src": "2111:135:3",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 435,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 430,
                                "name": "market",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 268,
                                "src": "2129:6:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 433,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2147:1:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 432,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2139:7:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 431,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2139:7:3",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 434,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2139:10:3",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "2129:20:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6d61726b657420756e736574",
                              "id": 436,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2151:14:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_6a613010d3de079e65d9609743cb292a539b1868d4818ae49607efe4d6c87a96",
                                "typeString": "literal_string \"market unset\""
                              },
                              "value": "market unset"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_6a613010d3de079e65d9609743cb292a539b1868d4818ae49607efe4d6c87a96",
                                "typeString": "literal_string \"market unset\""
                              }
                            ],
                            "id": 429,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "2121:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 437,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2121:45:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 438,
                        "nodeType": "ExpressionStatement",
                        "src": "2121:45:3"
                      },
                      {
                        "expression": {
                          "id": 445,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 439,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 427,
                            "src": "2176:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 441,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "2192:3:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 442,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2196:6:3",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "2192:10:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 443,
                                "name": "content",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 424,
                                "src": "2204:7:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_calldata_ptr",
                                  "typeString": "string calldata"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_string_calldata_ptr",
                                  "typeString": "string calldata"
                                }
                              ],
                              "id": 440,
                              "name": "_mint",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 671,
                              "src": "2186:5:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_string_memory_ptr_$returns$_t_uint256_$",
                                "typeString": "function (address,string memory) returns (uint256)"
                              }
                            },
                            "id": 444,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2186:26:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2176:36:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 446,
                        "nodeType": "ExpressionStatement",
                        "src": "2176:36:3"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 447,
                            "name": "_collectMintFee",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 728,
                            "src": "2222:15:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 448,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2222:17:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 449,
                        "nodeType": "ExpressionStatement",
                        "src": "2222:17:3"
                      }
                    ]
                  },
                  "functionSelector": "d85d3d27",
                  "id": 451,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mint",
                  "nameLocation": "2010:4:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 425,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 424,
                        "mutability": "mutable",
                        "name": "content",
                        "nameLocation": "2031:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 451,
                        "src": "2015:23:3",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 423,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2015:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2014:25:3"
                  },
                  "returnParameters": {
                    "id": 428,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 427,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2098:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 451,
                        "src": "2090:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 426,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2090:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2089:17:3"
                  },
                  "scope": 747,
                  "src": "2001:245:3",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 469,
                    "nodeType": "Block",
                    "src": "2383:49:3",
                    "statements": [
                      {
                        "expression": {
                          "id": 467,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 462,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 460,
                            "src": "2393:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 464,
                                "name": "seller",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 453,
                                "src": "2409:6:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 465,
                                "name": "content",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 455,
                                "src": "2417:7:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_calldata_ptr",
                                  "typeString": "string calldata"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_string_calldata_ptr",
                                  "typeString": "string calldata"
                                }
                              ],
                              "id": 463,
                              "name": "_mint",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 671,
                              "src": "2403:5:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_string_memory_ptr_$returns$_t_uint256_$",
                                "typeString": "function (address,string memory) returns (uint256)"
                              }
                            },
                            "id": 466,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2403:22:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2393:32:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 468,
                        "nodeType": "ExpressionStatement",
                        "src": "2393:32:3"
                      }
                    ]
                  },
                  "functionSelector": "0075a317",
                  "id": 470,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 458,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 457,
                        "name": "onlyMarket",
                        "nameLocations": [
                          "2334:10:3"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 357,
                        "src": "2334:10:3"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2334:10:3"
                    }
                  ],
                  "name": "mintTo",
                  "nameLocation": "2261:6:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 456,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 453,
                        "mutability": "mutable",
                        "name": "seller",
                        "nameLocation": "2276:6:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 470,
                        "src": "2268:14:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 452,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2268:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 455,
                        "mutability": "mutable",
                        "name": "content",
                        "nameLocation": "2300:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 470,
                        "src": "2284:23:3",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 454,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2284:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2267:41:3"
                  },
                  "returnParameters": {
                    "id": 461,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 460,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2370:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 470,
                        "src": "2362:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 459,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2362:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2361:17:3"
                  },
                  "scope": 747,
                  "src": "2252:180:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 512,
                    "nodeType": "Block",
                    "src": "2497:231:3",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 478,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 472,
                              "src": "2522:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 477,
                            "name": "_requireExists",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 746,
                            "src": "2507:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) view"
                            }
                          },
                          "id": 479,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2507:23:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 480,
                        "nodeType": "ExpressionStatement",
                        "src": "2507:23:3"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 491,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 486,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 482,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "2548:3:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 483,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2552:6:3",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "2548:10:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 484,
                                    "name": "owner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 67,
                                    "src": "2562:5:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                      "typeString": "function () view returns (address)"
                                    }
                                  },
                                  "id": 485,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2562:7:3",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "2548:21:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 490,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 487,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "2573:3:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 488,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2577:6:3",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "2573:10:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "id": 489,
                                  "name": "priceSetter",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 289,
                                  "src": "2587:11:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "2573:25:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "2548:50:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6e6f7420736574746572",
                              "id": 492,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2600:12:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_7fcc4d9804e38250b52636a01321cbd4e363afd25dbe6d4dde453b3527b0785d",
                                "typeString": "literal_string \"not setter\""
                              },
                              "value": "not setter"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_7fcc4d9804e38250b52636a01321cbd4e363afd25dbe6d4dde453b3527b0785d",
                                "typeString": "literal_string \"not setter\""
                              }
                            ],
                            "id": 481,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "2540:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 493,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2540:73:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 494,
                        "nodeType": "ExpressionStatement",
                        "src": "2540:73:3"
                      },
                      {
                        "expression": {
                          "id": 499,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 495,
                              "name": "priceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 279,
                              "src": "2623:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 497,
                            "indexExpression": {
                              "id": 496,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 472,
                              "src": "2631:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2623:16:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 498,
                            "name": "price",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 474,
                            "src": "2642:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2623:24:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 500,
                        "nodeType": "ExpressionStatement",
                        "src": "2623:24:3"
                      },
                      {
                        "expression": {
                          "id": 505,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 501,
                              "name": "isBuyable",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 283,
                              "src": "2657:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                                "typeString": "mapping(uint256 => bool)"
                              }
                            },
                            "id": 503,
                            "indexExpression": {
                              "id": 502,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 472,
                              "src": "2667:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2657:18:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 504,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2678:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "2657:25:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 506,
                        "nodeType": "ExpressionStatement",
                        "src": "2657:25:3"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 508,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 472,
                              "src": "2706:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 509,
                              "name": "price",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 474,
                              "src": "2715:5:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 507,
                            "name": "PriceSet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 319,
                            "src": "2697:8:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256)"
                            }
                          },
                          "id": 510,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2697:24:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 511,
                        "nodeType": "EmitStatement",
                        "src": "2692:29:3"
                      }
                    ]
                  },
                  "functionSelector": "f7d97577",
                  "id": 513,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setPrice",
                  "nameLocation": "2447:8:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 475,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 472,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2464:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 513,
                        "src": "2456:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 471,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2456:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 474,
                        "mutability": "mutable",
                        "name": "price",
                        "nameLocation": "2481:5:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 513,
                        "src": "2473:13:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 473,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2473:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2455:32:3"
                  },
                  "returnParameters": {
                    "id": 476,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2497:0:3"
                  },
                  "scope": 747,
                  "src": "2438:290:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 528,
                    "nodeType": "Block",
                    "src": "2808:76:3",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 521,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 515,
                              "src": "2833:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 520,
                            "name": "_requireExists",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 746,
                            "src": "2818:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) view"
                            }
                          },
                          "id": 522,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2818:23:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 523,
                        "nodeType": "ExpressionStatement",
                        "src": "2818:23:3"
                      },
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 524,
                            "name": "_contentOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 275,
                            "src": "2858:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                              "typeString": "mapping(uint256 => string storage ref)"
                            }
                          },
                          "id": 526,
                          "indexExpression": {
                            "id": 525,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 515,
                            "src": "2869:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2858:19:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "functionReturnParameters": 519,
                        "id": 527,
                        "nodeType": "Return",
                        "src": "2851:26:3"
                      }
                    ]
                  },
                  "functionSelector": "27427e31",
                  "id": 529,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "contentOf",
                  "nameLocation": "2743:9:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 516,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 515,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2761:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 529,
                        "src": "2753:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 514,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2753:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2752:17:3"
                  },
                  "returnParameters": {
                    "id": 519,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 518,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 529,
                        "src": "2793:13:3",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 517,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2793:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2792:15:3"
                  },
                  "scope": 747,
                  "src": "2734:150:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 544,
                    "nodeType": "Block",
                    "src": "2956:73:3",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 537,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 531,
                              "src": "2981:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 536,
                            "name": "_requireExists",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 746,
                            "src": "2966:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) view"
                            }
                          },
                          "id": 538,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2966:23:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 539,
                        "nodeType": "ExpressionStatement",
                        "src": "2966:23:3"
                      },
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 540,
                            "name": "_owners",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 287,
                            "src": "3006:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                              "typeString": "mapping(uint256 => address)"
                            }
                          },
                          "id": 542,
                          "indexExpression": {
                            "id": 541,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 531,
                            "src": "3014:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3006:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 535,
                        "id": 543,
                        "nodeType": "Return",
                        "src": "2999:23:3"
                      }
                    ]
                  },
                  "functionSelector": "6352211e",
                  "id": 545,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "ownerOf",
                  "nameLocation": "2899:7:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 532,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 531,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2915:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 545,
                        "src": "2907:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 530,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2907:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2906:17:3"
                  },
                  "returnParameters": {
                    "id": 535,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 534,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 545,
                        "src": "2947:7:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 533,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2947:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2946:9:3"
                  },
                  "scope": 747,
                  "src": "2890:139:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 562,
                    "nodeType": "Block",
                    "src": "3092:76:3",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 553,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 547,
                              "src": "3117:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 552,
                            "name": "_requireExists",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 746,
                            "src": "3102:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) view"
                            }
                          },
                          "id": 554,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3102:23:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 555,
                        "nodeType": "ExpressionStatement",
                        "src": "3102:23:3"
                      },
                      {
                        "expression": {
                          "id": 560,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 556,
                              "name": "isBuyable",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 283,
                              "src": "3135:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                                "typeString": "mapping(uint256 => bool)"
                              }
                            },
                            "id": 558,
                            "indexExpression": {
                              "id": 557,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 547,
                              "src": "3145:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3135:18:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "66616c7365",
                            "id": 559,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3156:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "false"
                          },
                          "src": "3135:26:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 561,
                        "nodeType": "ExpressionStatement",
                        "src": "3135:26:3"
                      }
                    ]
                  },
                  "functionSelector": "5aa5a488",
                  "id": 563,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 550,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 549,
                        "name": "onlyMarket",
                        "nameLocations": [
                          "3081:10:3"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 357,
                        "src": "3081:10:3"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "3081:10:3"
                    }
                  ],
                  "name": "disableBuy",
                  "nameLocation": "3044:10:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 548,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 547,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3063:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 563,
                        "src": "3055:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 546,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3055:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3054:17:3"
                  },
                  "returnParameters": {
                    "id": 551,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3092:0:3"
                  },
                  "scope": 747,
                  "src": "3035:133:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 580,
                    "nodeType": "Block",
                    "src": "3230:75:3",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 571,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 565,
                              "src": "3255:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 570,
                            "name": "_requireExists",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 746,
                            "src": "3240:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) view"
                            }
                          },
                          "id": 572,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3240:23:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 573,
                        "nodeType": "ExpressionStatement",
                        "src": "3240:23:3"
                      },
                      {
                        "expression": {
                          "id": 578,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 574,
                              "name": "isBuyable",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 283,
                              "src": "3273:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                                "typeString": "mapping(uint256 => bool)"
                              }
                            },
                            "id": 576,
                            "indexExpression": {
                              "id": 575,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 565,
                              "src": "3283:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3273:18:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 577,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3294:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "3273:25:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 579,
                        "nodeType": "ExpressionStatement",
                        "src": "3273:25:3"
                      }
                    ]
                  },
                  "functionSelector": "86b17619",
                  "id": 581,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 568,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 567,
                        "name": "onlyMarket",
                        "nameLocations": [
                          "3219:10:3"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 357,
                        "src": "3219:10:3"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "3219:10:3"
                    }
                  ],
                  "name": "enableBuy",
                  "nameLocation": "3183:9:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 566,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 565,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3201:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 581,
                        "src": "3193:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 564,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3193:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3192:17:3"
                  },
                  "returnParameters": {
                    "id": 569,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3230:0:3"
                  },
                  "scope": 747,
                  "src": "3174:131:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 622,
                    "nodeType": "Block",
                    "src": "3380:180:3",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 596,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 591,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 583,
                                "src": "3398:2:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 594,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3412:1:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 593,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3404:7:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 592,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3404:7:3",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 595,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3404:10:3",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "3398:16:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "746f3d30",
                              "id": 597,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3416:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15",
                                "typeString": "literal_string \"to=0\""
                              },
                              "value": "to=0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_5d701ee6046e2f8ef80c891f7405c4ef9e0df0d74e0e58440c32aed28d93fe15",
                                "typeString": "literal_string \"to=0\""
                              }
                            ],
                            "id": 590,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "3390:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 598,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3390:33:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 599,
                        "nodeType": "ExpressionStatement",
                        "src": "3390:33:3"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 601,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 585,
                              "src": "3448:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 600,
                            "name": "_requireExists",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 746,
                            "src": "3433:14:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) view"
                            }
                          },
                          "id": 602,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3433:23:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 603,
                        "nodeType": "ExpressionStatement",
                        "src": "3433:23:3"
                      },
                      {
                        "expression": {
                          "id": 608,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 604,
                              "name": "_owners",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 287,
                              "src": "3466:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                "typeString": "mapping(uint256 => address)"
                              }
                            },
                            "id": 606,
                            "indexExpression": {
                              "id": 605,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 585,
                              "src": "3474:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3466:16:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 607,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 583,
                            "src": "3485:2:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3466:21:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 609,
                        "nodeType": "ExpressionStatement",
                        "src": "3466:21:3"
                      },
                      {
                        "expression": {
                          "id": 614,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 610,
                              "name": "priceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 279,
                              "src": "3497:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 612,
                            "indexExpression": {
                              "id": 611,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 585,
                              "src": "3505:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3497:16:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "30",
                            "id": 613,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3516:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3497:20:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 615,
                        "nodeType": "ExpressionStatement",
                        "src": "3497:20:3"
                      },
                      {
                        "expression": {
                          "id": 620,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 616,
                              "name": "isBuyable",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 283,
                              "src": "3527:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                                "typeString": "mapping(uint256 => bool)"
                              }
                            },
                            "id": 618,
                            "indexExpression": {
                              "id": 617,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 585,
                              "src": "3537:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3527:18:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "66616c7365",
                            "id": 619,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3548:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "false"
                          },
                          "src": "3527:26:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 621,
                        "nodeType": "ExpressionStatement",
                        "src": "3527:26:3"
                      }
                    ]
                  },
                  "functionSelector": "2ccb1b30",
                  "id": 623,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 588,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 587,
                        "name": "onlyMarket",
                        "nameLocations": [
                          "3369:10:3"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 357,
                        "src": "3369:10:3"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "3369:10:3"
                    }
                  ],
                  "name": "transferTo",
                  "nameLocation": "3320:10:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 586,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 583,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "3339:2:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 623,
                        "src": "3331:10:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 582,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3331:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 585,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3351:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 623,
                        "src": "3343:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 584,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3343:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3330:29:3"
                  },
                  "returnParameters": {
                    "id": 589,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3380:0:3"
                  },
                  "scope": 747,
                  "src": "3311:249:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 670,
                    "nodeType": "Block",
                    "src": "3655:259:3",
                    "statements": [
                      {
                        "expression": {
                          "id": 635,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 632,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 630,
                            "src": "3665:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 634,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "3675:8:3",
                            "subExpression": {
                              "id": 633,
                              "name": "nextId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 271,
                              "src": "3675:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3665:18:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 636,
                        "nodeType": "ExpressionStatement",
                        "src": "3665:18:3"
                      },
                      {
                        "expression": {
                          "id": 641,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 637,
                              "name": "_owners",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 287,
                              "src": "3693:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                "typeString": "mapping(uint256 => address)"
                              }
                            },
                            "id": 639,
                            "indexExpression": {
                              "id": 638,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 630,
                              "src": "3701:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3693:16:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 640,
                            "name": "seller",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 625,
                            "src": "3712:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3693:25:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 642,
                        "nodeType": "ExpressionStatement",
                        "src": "3693:25:3"
                      },
                      {
                        "expression": {
                          "id": 647,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 643,
                              "name": "_contentOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 275,
                              "src": "3728:10:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                                "typeString": "mapping(uint256 => string storage ref)"
                              }
                            },
                            "id": 645,
                            "indexExpression": {
                              "id": 644,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 630,
                              "src": "3739:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3728:19:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 646,
                            "name": "content",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 627,
                            "src": "3750:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "3728:29:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 648,
                        "nodeType": "ExpressionStatement",
                        "src": "3728:29:3"
                      },
                      {
                        "expression": {
                          "id": 653,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 649,
                              "name": "isBuyable",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 283,
                              "src": "3767:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                                "typeString": "mapping(uint256 => bool)"
                              }
                            },
                            "id": 651,
                            "indexExpression": {
                              "id": 650,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 630,
                              "src": "3777:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3767:18:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "66616c7365",
                            "id": 652,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3788:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "false"
                          },
                          "src": "3767:26:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 654,
                        "nodeType": "ExpressionStatement",
                        "src": "3767:26:3"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 656,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 630,
                              "src": "3816:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 657,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3825:3:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 658,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3829:6:3",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3825:10:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 659,
                              "name": "content",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 627,
                              "src": "3837:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 655,
                            "name": "Minted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 309,
                            "src": "3809:6:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (uint256,address,string memory)"
                            }
                          },
                          "id": 660,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3809:36:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 661,
                        "nodeType": "EmitStatement",
                        "src": "3804:41:3"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 666,
                              "name": "seller",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 625,
                              "src": "3891:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 667,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 630,
                              "src": "3899:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 663,
                                  "name": "market",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 268,
                                  "src": "3868:6:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 662,
                                "name": "IAiLaunchpad",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 259,
                                "src": "3855:12:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IAiLaunchpad_$259_$",
                                  "typeString": "type(contract IAiLaunchpad)"
                                }
                              },
                              "id": 664,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3855:20:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IAiLaunchpad_$259",
                                "typeString": "contract IAiLaunchpad"
                              }
                            },
                            "id": 665,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3876:14:3",
                            "memberName": "autoListMinted",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 258,
                            "src": "3855:35:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (address,uint256) external returns (uint256)"
                            }
                          },
                          "id": 668,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3855:52:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 669,
                        "nodeType": "ExpressionStatement",
                        "src": "3855:52:3"
                      }
                    ]
                  },
                  "id": 671,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_mint",
                  "nameLocation": "3575:5:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 628,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 625,
                        "mutability": "mutable",
                        "name": "seller",
                        "nameLocation": "3589:6:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 671,
                        "src": "3581:14:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 624,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3581:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 627,
                        "mutability": "mutable",
                        "name": "content",
                        "nameLocation": "3611:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 671,
                        "src": "3597:21:3",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 626,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3597:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3580:39:3"
                  },
                  "returnParameters": {
                    "id": 631,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 630,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3646:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 671,
                        "src": "3638:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 629,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3638:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3637:17:3"
                  },
                  "scope": 747,
                  "src": "3566:348:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 727,
                    "nodeType": "Block",
                    "src": "3956:378:3",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 676,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 674,
                            "name": "mintFee",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 291,
                            "src": "3970:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 675,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3981:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3970:12:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 687,
                        "nodeType": "IfStatement",
                        "src": "3966:105:3",
                        "trueBody": {
                          "id": 686,
                          "nodeType": "Block",
                          "src": "3984:87:3",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 681,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "expression": {
                                        "id": 678,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4294967281,
                                        "src": "4006:3:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 679,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "4010:5:3",
                                      "memberName": "value",
                                      "nodeType": "MemberAccess",
                                      "src": "4006:9:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "hexValue": "30",
                                      "id": 680,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "4019:1:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "4006:14:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "6e6f20666565207265717569726564",
                                    "id": 682,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "4022:17:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_4e49537fcdf60b3dc9fbe7af2a0a7e74647ba3b6813691241cc25ceedec605b5",
                                      "typeString": "literal_string \"no fee required\""
                                    },
                                    "value": "no fee required"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_4e49537fcdf60b3dc9fbe7af2a0a7e74647ba3b6813691241cc25ceedec605b5",
                                      "typeString": "literal_string \"no fee required\""
                                    }
                                  ],
                                  "id": 677,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    4294967278,
                                    4294967278,
                                    4294967278
                                  ],
                                  "referencedDeclaration": 4294967278,
                                  "src": "3998:7:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 683,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3998:42:3",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 684,
                              "nodeType": "ExpressionStatement",
                              "src": "3998:42:3"
                            },
                            {
                              "functionReturnParameters": 673,
                              "id": 685,
                              "nodeType": "Return",
                              "src": "4054:7:3"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 692,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 689,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "4088:3:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 690,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4092:5:3",
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "4088:9:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 691,
                                "name": "mintFee",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 291,
                                "src": "4101:7:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4088:20:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "626164206d696e7420666565",
                              "id": 693,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4110:14:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_df2dbcf53ada8e7b00c847ac21abd664e85d61ecb79b866fb5ea5b80d9e8d6a1",
                                "typeString": "literal_string \"bad mint fee\""
                              },
                              "value": "bad mint fee"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_df2dbcf53ada8e7b00c847ac21abd664e85d61ecb79b866fb5ea5b80d9e8d6a1",
                                "typeString": "literal_string \"bad mint fee\""
                              }
                            ],
                            "id": 688,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "4080:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 694,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4080:45:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 695,
                        "nodeType": "ExpressionStatement",
                        "src": "4080:45:3"
                      },
                      {
                        "assignments": [
                          697
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 697,
                            "mutability": "mutable",
                            "name": "recipient",
                            "nameLocation": "4143:9:3",
                            "nodeType": "VariableDeclaration",
                            "scope": 727,
                            "src": "4135:17:3",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 696,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4135:7:3",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 708,
                        "initialValue": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 703,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 698,
                              "name": "mintFeeRecipient",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 293,
                              "src": "4155:16:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 701,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4183:1:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 700,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "4175:7:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 699,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "4175:7:3",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 702,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4175:10:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "4155:30:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "id": 706,
                            "name": "mintFeeRecipient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 293,
                            "src": "4198:16:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 707,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "4155:59:3",
                          "trueExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 704,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 67,
                              "src": "4188:5:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 705,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4188:7:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4135:79:3"
                      },
                      {
                        "assignments": [
                          710,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 710,
                            "mutability": "mutable",
                            "name": "ok",
                            "nameLocation": "4230:2:3",
                            "nodeType": "VariableDeclaration",
                            "scope": 727,
                            "src": "4225:7:3",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 709,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "4225:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 721,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "",
                              "id": 719,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4280:2:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 713,
                                    "name": "recipient",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 697,
                                    "src": "4246:9:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 712,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "4238:8:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_payable_$",
                                    "typeString": "type(address payable)"
                                  },
                                  "typeName": {
                                    "id": 711,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "4238:8:3",
                                    "stateMutability": "payable",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 714,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4238:18:3",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "id": 715,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4257:4:3",
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "4238:23:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 718,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "expression": {
                                  "id": 716,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "4269:3:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 717,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4273:5:3",
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "4269:9:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "4238:41:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 720,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4238:45:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4224:59:3"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 723,
                              "name": "ok",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 710,
                              "src": "4301:2:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "666565207472616e73666572206661696c6564",
                              "id": 724,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4305:21:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_45d5a577f02ac9ea299a60e39f95b8dcad710980b914650e3e22bde717a0396e",
                                "typeString": "literal_string \"fee transfer failed\""
                              },
                              "value": "fee transfer failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_45d5a577f02ac9ea299a60e39f95b8dcad710980b914650e3e22bde717a0396e",
                                "typeString": "literal_string \"fee transfer failed\""
                              }
                            ],
                            "id": 722,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "4293:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 725,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4293:34:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 726,
                        "nodeType": "ExpressionStatement",
                        "src": "4293:34:3"
                      }
                    ]
                  },
                  "id": 728,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_collectMintFee",
                  "nameLocation": "3929:15:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 672,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3944:2:3"
                  },
                  "returnParameters": {
                    "id": 673,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3956:0:3"
                  },
                  "scope": 747,
                  "src": "3920:414:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 745,
                    "nodeType": "Block",
                    "src": "4395:78:3",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 740,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 733,
                              "name": "_owners",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 287,
                              "src": "4409:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                "typeString": "mapping(uint256 => address)"
                              }
                            },
                            "id": 735,
                            "indexExpression": {
                              "id": 734,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 730,
                              "src": "4417:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4409:16:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 738,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4437:1:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 737,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "4429:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 736,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "4429:7:3",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 739,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4429:10:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "4409:30:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 744,
                        "nodeType": "IfStatement",
                        "src": "4405:61:3",
                        "trueBody": {
                          "errorCall": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 741,
                              "name": "NonexistentToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 297,
                              "src": "4448:16:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
                                "typeString": "function () pure returns (error)"
                              }
                            },
                            "id": 742,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4448:18:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_error",
                              "typeString": "error"
                            }
                          },
                          "id": 743,
                          "nodeType": "RevertStatement",
                          "src": "4441:25:3"
                        }
                      }
                    ]
                  },
                  "id": 746,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_requireExists",
                  "nameLocation": "4349:14:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 731,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 730,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "4372:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 746,
                        "src": "4364:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 729,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4364:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4363:17:3"
                  },
                  "returnParameters": {
                    "id": 732,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4395:0:3"
                  },
                  "scope": 747,
                  "src": "4340:133:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 748,
              "src": "456:4019:3",
              "usedErrors": [
                13,
                18,
                295,
                297
              ],
              "usedEvents": [
                24,
                301,
                309,
                313,
                319,
                325
              ]
            }
          ],
          "src": "32:4444:3"
        }
      },
      "contracts/Luanchpad.sol": {
        "id": 4,
        "ast": {
          "absolutePath": "contracts/Luanchpad.sol",
          "exportedSymbols": {
            "AiLaunchpad": [
              1085
            ],
            "AiTextNFT": [
              747
            ],
            "Context": [
              177
            ],
            "IAiLaunchpad": [
              259
            ],
            "Ownable": [
              147
            ],
            "ReentrancyGuard": [
              246
            ]
          },
          "id": 1086,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 749,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".24"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:4"
            },
            {
              "absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
              "file": "@openzeppelin/contracts/access/Ownable.sol",
              "id": 750,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1086,
              "sourceUnit": 148,
              "src": "58:52:4",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
              "file": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
              "id": 751,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1086,
              "sourceUnit": 247,
              "src": "111:59:4",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/AiTextNFT.sol",
              "file": "./AiTextNFT.sol",
              "id": 752,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1086,
              "sourceUnit": 748,
              "src": "172:25:4",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 753,
                    "name": "Ownable",
                    "nameLocations": [
                      "223:7:4"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 147,
                    "src": "223:7:4"
                  },
                  "id": 754,
                  "nodeType": "InheritanceSpecifier",
                  "src": "223:7:4"
                },
                {
                  "baseName": {
                    "id": 755,
                    "name": "ReentrancyGuard",
                    "nameLocations": [
                      "232:15:4"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 246,
                    "src": "232:15:4"
                  },
                  "id": 756,
                  "nodeType": "InheritanceSpecifier",
                  "src": "232:15:4"
                }
              ],
              "canonicalName": "AiLaunchpad",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 1085,
              "linearizedBaseContracts": [
                1085,
                246,
                147,
                177
              ],
              "name": "AiLaunchpad",
              "nameLocation": "208:11:4",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "functionSelector": "47ccca02",
                  "id": 758,
                  "mutability": "immutable",
                  "name": "nft",
                  "nameLocation": "279:3:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1085,
                  "src": "254:28:4",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 757,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "254:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "46904840",
                  "id": 760,
                  "mutability": "mutable",
                  "name": "feeRecipient",
                  "nameLocation": "304:12:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1085,
                  "src": "289:27:4",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 759,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "289:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "24a9d853",
                  "id": 762,
                  "mutability": "mutable",
                  "name": "feeBps",
                  "nameLocation": "336:6:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1085,
                  "src": "322:20:4",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 761,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "322:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "canonicalName": "AiLaunchpad.Listing",
                  "id": 765,
                  "members": [
                    {
                      "constant": false,
                      "id": 764,
                      "mutability": "mutable",
                      "name": "seller",
                      "nameLocation": "398:6:4",
                      "nodeType": "VariableDeclaration",
                      "scope": 765,
                      "src": "390:14:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 763,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "390:7:4",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Listing",
                  "nameLocation": "372:7:4",
                  "nodeType": "StructDefinition",
                  "scope": 1085,
                  "src": "365:46:4",
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "de74e57b",
                  "id": 770,
                  "mutability": "mutable",
                  "name": "listings",
                  "nameLocation": "452:8:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1085,
                  "src": "417:43:4",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Listing_$765_storage_$",
                    "typeString": "mapping(uint256 => struct AiLaunchpad.Listing)"
                  },
                  "typeName": {
                    "id": 769,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 766,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "425:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "417:27:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Listing_$765_storage_$",
                      "typeString": "mapping(uint256 => struct AiLaunchpad.Listing)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 768,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 767,
                        "name": "Listing",
                        "nameLocations": [
                          "436:7:4"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 765,
                        "src": "436:7:4"
                      },
                      "referencedDeclaration": 765,
                      "src": "436:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Listing_$765_storage_ptr",
                        "typeString": "struct AiLaunchpad.Listing"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "eventSelector": "d2c77e2f0af9ca6f36551d7f00daf85693a1be71f1e5957bde2acb99264ed801",
                  "id": 778,
                  "name": "Listed",
                  "nameLocation": "473:6:4",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 777,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 772,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "listingId",
                        "nameLocation": "496:9:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 778,
                        "src": "480:25:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 771,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "480:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 774,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "523:7:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 778,
                        "src": "507:23:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 773,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "507:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 776,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "price",
                        "nameLocation": "540:5:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 778,
                        "src": "532:13:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 775,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "532:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "479:67:4"
                  },
                  "src": "467:80:4"
                },
                {
                  "anonymous": false,
                  "eventSelector": "a2a8034590a15fe810e9813d736096c0a03b3236cecb34b5b9f687ed67a6a624",
                  "id": 786,
                  "name": "Bought",
                  "nameLocation": "558:6:4",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 785,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 780,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "listingId",
                        "nameLocation": "581:9:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 786,
                        "src": "565:25:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 779,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "565:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 782,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "608:7:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 786,
                        "src": "592:23:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 781,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "592:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 784,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "buyer",
                        "nameLocation": "625:5:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 786,
                        "src": "617:13:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 783,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "617:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "564:67:4"
                  },
                  "src": "552:80:4"
                },
                {
                  "body": {
                    "id": 821,
                    "nodeType": "Block",
                    "src": "737:137:4",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 805,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 800,
                                "name": "nft_",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 788,
                                "src": "755:4:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 803,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "771:1:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 802,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "763:7:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 801,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "763:7:4",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 804,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "763:10:4",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "755:18:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6e66743d30",
                              "id": 806,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "775:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_80593392194d8f1adc1d81a5d1e305d67ea8c00b59b41ac05a1f1bb31524539c",
                                "typeString": "literal_string \"nft=0\""
                              },
                              "value": "nft=0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_80593392194d8f1adc1d81a5d1e305d67ea8c00b59b41ac05a1f1bb31524539c",
                                "typeString": "literal_string \"nft=0\""
                              }
                            ],
                            "id": 799,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "747:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 807,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "747:36:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 808,
                        "nodeType": "ExpressionStatement",
                        "src": "747:36:4"
                      },
                      {
                        "expression": {
                          "id": 811,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 809,
                            "name": "nft",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 758,
                            "src": "793:3:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 810,
                            "name": "nft_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 788,
                            "src": "799:4:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "793:10:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 812,
                        "nodeType": "ExpressionStatement",
                        "src": "793:10:4"
                      },
                      {
                        "expression": {
                          "id": 815,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 813,
                            "name": "feeRecipient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 760,
                            "src": "813:12:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 814,
                            "name": "feeRecipient_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 790,
                            "src": "828:13:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "813:28:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 816,
                        "nodeType": "ExpressionStatement",
                        "src": "813:28:4"
                      },
                      {
                        "expression": {
                          "id": 819,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 817,
                            "name": "feeBps",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 762,
                            "src": "851:6:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint96",
                              "typeString": "uint96"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 818,
                            "name": "feeBps_",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 792,
                            "src": "860:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint96",
                              "typeString": "uint96"
                            }
                          },
                          "src": "851:16:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint96",
                            "typeString": "uint96"
                          }
                        },
                        "id": 820,
                        "nodeType": "ExpressionStatement",
                        "src": "851:16:4"
                      }
                    ]
                  },
                  "id": 822,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 795,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 159,
                            "src": "719:10:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 796,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "719:12:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "id": 797,
                      "kind": "baseConstructorSpecifier",
                      "modifierName": {
                        "id": 794,
                        "name": "Ownable",
                        "nameLocations": [
                          "711:7:4"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 147,
                        "src": "711:7:4"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "711:21:4"
                    }
                  ],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 793,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 788,
                        "mutability": "mutable",
                        "name": "nft_",
                        "nameLocation": "658:4:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 822,
                        "src": "650:12:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 787,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "650:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 790,
                        "mutability": "mutable",
                        "name": "feeRecipient_",
                        "nameLocation": "672:13:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 822,
                        "src": "664:21:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 789,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "664:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 792,
                        "mutability": "mutable",
                        "name": "feeBps_",
                        "nameLocation": "694:7:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 822,
                        "src": "687:14:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint96",
                          "typeString": "uint96"
                        },
                        "typeName": {
                          "id": 791,
                          "name": "uint96",
                          "nodeType": "ElementaryTypeName",
                          "src": "687:6:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint96",
                            "typeString": "uint96"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "649:53:4"
                  },
                  "returnParameters": {
                    "id": 798,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "737:0:4"
                  },
                  "scope": 1085,
                  "src": "638:236:4",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 839,
                    "nodeType": "Block",
                    "src": "946:63:4",
                    "statements": [
                      {
                        "expression": {
                          "id": 833,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 831,
                            "name": "feeRecipient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 760,
                            "src": "956:12:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 832,
                            "name": "recipient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 824,
                            "src": "971:9:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "956:24:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 834,
                        "nodeType": "ExpressionStatement",
                        "src": "956:24:4"
                      },
                      {
                        "expression": {
                          "id": 837,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 835,
                            "name": "feeBps",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 762,
                            "src": "990:6:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint96",
                              "typeString": "uint96"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 836,
                            "name": "bps",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 826,
                            "src": "999:3:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint96",
                              "typeString": "uint96"
                            }
                          },
                          "src": "990:12:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint96",
                            "typeString": "uint96"
                          }
                        },
                        "id": 838,
                        "nodeType": "ExpressionStatement",
                        "src": "990:12:4"
                      }
                    ]
                  },
                  "functionSelector": "0948de59",
                  "id": 840,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 829,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 828,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "936:9:4"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 58,
                        "src": "936:9:4"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "936:9:4"
                    }
                  ],
                  "name": "setFee",
                  "nameLocation": "889:6:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 827,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 824,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nameLocation": "904:9:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 840,
                        "src": "896:17:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 823,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "896:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 826,
                        "mutability": "mutable",
                        "name": "bps",
                        "nameLocation": "922:3:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 840,
                        "src": "915:10:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint96",
                          "typeString": "uint96"
                        },
                        "typeName": {
                          "id": 825,
                          "name": "uint96",
                          "nodeType": "ElementaryTypeName",
                          "src": "915:6:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint96",
                            "typeString": "uint96"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "895:31:4"
                  },
                  "returnParameters": {
                    "id": 830,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "946:0:4"
                  },
                  "scope": 1085,
                  "src": "880:129:4",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 988,
                    "nodeType": "Block",
                    "src": "1077:968:4",
                    "statements": [
                      {
                        "assignments": [
                          849
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 849,
                            "mutability": "mutable",
                            "name": "listing",
                            "nameLocation": "1102:7:4",
                            "nodeType": "VariableDeclaration",
                            "scope": 988,
                            "src": "1087:22:4",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Listing_$765_memory_ptr",
                              "typeString": "struct AiLaunchpad.Listing"
                            },
                            "typeName": {
                              "id": 848,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 847,
                                "name": "Listing",
                                "nameLocations": [
                                  "1087:7:4"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 765,
                                "src": "1087:7:4"
                              },
                              "referencedDeclaration": 765,
                              "src": "1087:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Listing_$765_storage_ptr",
                                "typeString": "struct AiLaunchpad.Listing"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 853,
                        "initialValue": {
                          "baseExpression": {
                            "id": 850,
                            "name": "listings",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 770,
                            "src": "1112:8:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Listing_$765_storage_$",
                              "typeString": "mapping(uint256 => struct AiLaunchpad.Listing storage ref)"
                            }
                          },
                          "id": 852,
                          "indexExpression": {
                            "id": 851,
                            "name": "listingId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 842,
                            "src": "1121:9:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1112:19:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Listing_$765_storage",
                            "typeString": "struct AiLaunchpad.Listing storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1087:44:4"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 861,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 855,
                                  "name": "listing",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 849,
                                  "src": "1149:7:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Listing_$765_memory_ptr",
                                    "typeString": "struct AiLaunchpad.Listing memory"
                                  }
                                },
                                "id": 856,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1157:6:4",
                                "memberName": "seller",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 764,
                                "src": "1149:14:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 859,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1175:1:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 858,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "1167:7:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 857,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1167:7:4",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 860,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1167:10:4",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "1149:28:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "756e6b6e6f776e206c697374696e67",
                              "id": 862,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1179:17:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9cd005c61fb5a45a8ca9306e68bb4605d3039907d840b8336e5105e5d2314bca",
                                "typeString": "literal_string \"unknown listing\""
                              },
                              "value": "unknown listing"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9cd005c61fb5a45a8ca9306e68bb4605d3039907d840b8336e5105e5d2314bca",
                                "typeString": "literal_string \"unknown listing\""
                              }
                            ],
                            "id": 854,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1141:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 863,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1141:56:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 864,
                        "nodeType": "ExpressionStatement",
                        "src": "1141:56:4"
                      },
                      {
                        "assignments": [
                          867
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 867,
                            "mutability": "mutable",
                            "name": "token",
                            "nameLocation": "1218:5:4",
                            "nodeType": "VariableDeclaration",
                            "scope": 988,
                            "src": "1208:15:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_AiTextNFT_$747",
                              "typeString": "contract AiTextNFT"
                            },
                            "typeName": {
                              "id": 866,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 865,
                                "name": "AiTextNFT",
                                "nameLocations": [
                                  "1208:9:4"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 747,
                                "src": "1208:9:4"
                              },
                              "referencedDeclaration": 747,
                              "src": "1208:9:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_AiTextNFT_$747",
                                "typeString": "contract AiTextNFT"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 871,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 869,
                              "name": "nft",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 758,
                              "src": "1236:3:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 868,
                            "name": "AiTextNFT",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 747,
                            "src": "1226:9:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_AiTextNFT_$747_$",
                              "typeString": "type(contract AiTextNFT)"
                            }
                          },
                          "id": 870,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1226:14:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_AiTextNFT_$747",
                            "typeString": "contract AiTextNFT"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1208:32:4"
                      },
                      {
                        "assignments": [
                          873
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 873,
                            "mutability": "mutable",
                            "name": "tokenId",
                            "nameLocation": "1258:7:4",
                            "nodeType": "VariableDeclaration",
                            "scope": 988,
                            "src": "1250:15:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 872,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1250:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 875,
                        "initialValue": {
                          "id": 874,
                          "name": "listingId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 842,
                          "src": "1268:9:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1250:27:4"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 879,
                                  "name": "tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 873,
                                  "src": "1311:7:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 877,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 867,
                                  "src": "1295:5:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_AiTextNFT_$747",
                                    "typeString": "contract AiTextNFT"
                                  }
                                },
                                "id": 878,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1301:9:4",
                                "memberName": "isBuyable",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 283,
                                "src": "1295:15:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (uint256) view external returns (bool)"
                                }
                              },
                              "id": 880,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1295:24:4",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6e6f742062757961626c65",
                              "id": 881,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1321:13:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_8936016c4206f7334ecfed2e6ecae21ec348dafe08a6ab09a3a55839f2af91df",
                                "typeString": "literal_string \"not buyable\""
                              },
                              "value": "not buyable"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_8936016c4206f7334ecfed2e6ecae21ec348dafe08a6ab09a3a55839f2af91df",
                                "typeString": "literal_string \"not buyable\""
                              }
                            ],
                            "id": 876,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1287:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 882,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1287:48:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 883,
                        "nodeType": "ExpressionStatement",
                        "src": "1287:48:4"
                      },
                      {
                        "assignments": [
                          885
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 885,
                            "mutability": "mutable",
                            "name": "price",
                            "nameLocation": "1354:5:4",
                            "nodeType": "VariableDeclaration",
                            "scope": 988,
                            "src": "1346:13:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 884,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1346:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 890,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 888,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 873,
                              "src": "1376:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 886,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 867,
                              "src": "1362:5:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_AiTextNFT_$747",
                                "typeString": "contract AiTextNFT"
                              }
                            },
                            "id": 887,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1368:7:4",
                            "memberName": "priceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 279,
                            "src": "1362:13:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) view external returns (uint256)"
                            }
                          },
                          "id": 889,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1362:22:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1346:38:4"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 895,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 892,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "1402:3:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 893,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1406:5:4",
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "src": "1402:9:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 894,
                                "name": "price",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 885,
                                "src": "1415:5:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1402:18:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6261642076616c7565",
                              "id": 896,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1422:11:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_f2e5165a60eaee1c6ee52001c1676df358076a1b284b14778190ce620dad8ad7",
                                "typeString": "literal_string \"bad value\""
                              },
                              "value": "bad value"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_f2e5165a60eaee1c6ee52001c1676df358076a1b284b14778190ce620dad8ad7",
                                "typeString": "literal_string \"bad value\""
                              }
                            ],
                            "id": 891,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1394:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 897,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1394:40:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 898,
                        "nodeType": "ExpressionStatement",
                        "src": "1394:40:4"
                      },
                      {
                        "assignments": [
                          900
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 900,
                            "mutability": "mutable",
                            "name": "fee",
                            "nameLocation": "1453:3:4",
                            "nodeType": "VariableDeclaration",
                            "scope": 988,
                            "src": "1445:11:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 899,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1445:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 907,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 906,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 903,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 901,
                                  "name": "price",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 885,
                                  "src": "1460:5:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "id": 902,
                                  "name": "feeBps",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 762,
                                  "src": "1468:6:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint96",
                                    "typeString": "uint96"
                                  }
                                },
                                "src": "1460:14:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 904,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "1459:16:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "hexValue": "31305f303030",
                            "id": 905,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1478:6:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_10000_by_1",
                              "typeString": "int_const 10000"
                            },
                            "value": "10_000"
                          },
                          "src": "1459:25:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1445:39:4"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 917,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 910,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 908,
                              "name": "fee",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 900,
                              "src": "1498:3:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 909,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1504:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "1498:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 916,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 911,
                              "name": "feeRecipient",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 760,
                              "src": "1509:12:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 914,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1533:1:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 913,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1525:7:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 912,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1525:7:4",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 915,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1525:10:4",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "1509:26:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "1498:37:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 936,
                        "nodeType": "IfStatement",
                        "src": "1494:176:4",
                        "trueBody": {
                          "id": 935,
                          "nodeType": "Block",
                          "src": "1537:133:4",
                          "statements": [
                            {
                              "assignments": [
                                919,
                                null
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 919,
                                  "mutability": "mutable",
                                  "name": "feeOk",
                                  "nameLocation": "1557:5:4",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 935,
                                  "src": "1552:10:4",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "typeName": {
                                    "id": 918,
                                    "name": "bool",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1552:4:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "visibility": "internal"
                                },
                                null
                              ],
                              "id": 929,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "hexValue": "",
                                    "id": 927,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1607:2:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                      "typeString": "literal_string \"\""
                                    },
                                    "value": ""
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                      "typeString": "literal_string \"\""
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                        "typeString": "literal_string \"\""
                                      }
                                    ],
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 922,
                                          "name": "feeRecipient",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 760,
                                          "src": "1576:12:4",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        ],
                                        "id": 921,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "1568:8:4",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_payable_$",
                                          "typeString": "type(address payable)"
                                        },
                                        "typeName": {
                                          "id": 920,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "1568:8:4",
                                          "stateMutability": "payable",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 923,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "1568:21:4",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    },
                                    "id": 924,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "1590:4:4",
                                    "memberName": "call",
                                    "nodeType": "MemberAccess",
                                    "src": "1568:26:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                      "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                    }
                                  },
                                  "id": 926,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "names": [
                                    "value"
                                  ],
                                  "nodeType": "FunctionCallOptions",
                                  "options": [
                                    {
                                      "id": 925,
                                      "name": "fee",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 900,
                                      "src": "1602:3:4",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "src": "1568:38:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                                    "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                  }
                                },
                                "id": 928,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1568:42:4",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                                  "typeString": "tuple(bool,bytes memory)"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "1551:59:4"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 931,
                                    "name": "feeOk",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 919,
                                    "src": "1632:5:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "666565207472616e73666572206661696c",
                                    "id": 932,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1639:19:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_9eaaff0f7ed48955cffc520b1bbf8434f9a387eff63d9f987a1fa35d708a7d42",
                                      "typeString": "literal_string \"fee transfer fail\""
                                    },
                                    "value": "fee transfer fail"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_9eaaff0f7ed48955cffc520b1bbf8434f9a387eff63d9f987a1fa35d708a7d42",
                                      "typeString": "literal_string \"fee transfer fail\""
                                    }
                                  ],
                                  "id": 930,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    4294967278,
                                    4294967278,
                                    4294967278
                                  ],
                                  "referencedDeclaration": 4294967278,
                                  "src": "1624:7:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 933,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1624:35:4",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 934,
                              "nodeType": "ExpressionStatement",
                              "src": "1624:35:4"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          938
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 938,
                            "mutability": "mutable",
                            "name": "sellerProceeds",
                            "nameLocation": "1688:14:4",
                            "nodeType": "VariableDeclaration",
                            "scope": 988,
                            "src": "1680:22:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 937,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1680:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 942,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 941,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 939,
                            "name": "price",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 885,
                            "src": "1705:5:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 940,
                            "name": "fee",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 900,
                            "src": "1713:3:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1705:11:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1680:36:4"
                      },
                      {
                        "assignments": [
                          944,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 944,
                            "mutability": "mutable",
                            "name": "sellerOk",
                            "nameLocation": "1732:8:4",
                            "nodeType": "VariableDeclaration",
                            "scope": 988,
                            "src": "1727:13:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 943,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "1727:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 955,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "",
                              "id": 953,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1798:2:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "expression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 947,
                                      "name": "listing",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 849,
                                      "src": "1754:7:4",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Listing_$765_memory_ptr",
                                        "typeString": "struct AiLaunchpad.Listing memory"
                                      }
                                    },
                                    "id": 948,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "1762:6:4",
                                    "memberName": "seller",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 764,
                                    "src": "1754:14:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 946,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "1746:8:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_payable_$",
                                    "typeString": "type(address payable)"
                                  },
                                  "typeName": {
                                    "id": 945,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1746:8:4",
                                    "stateMutability": "payable",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 949,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1746:23:4",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "id": 950,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1770:4:4",
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "1746:28:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 952,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 951,
                                "name": "sellerProceeds",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 938,
                                "src": "1782:14:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "1746:51:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 954,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1746:55:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1726:75:4"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 957,
                              "name": "sellerOk",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 944,
                              "src": "1819:8:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "73656c6c6572207472616e73666572206661696c",
                              "id": 958,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1829:22:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_0a7439f3f5778b409d5e4eb038ed48984886f7f94ec345040f8b0010f8be9897",
                                "typeString": "literal_string \"seller transfer fail\""
                              },
                              "value": "seller transfer fail"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_0a7439f3f5778b409d5e4eb038ed48984886f7f94ec345040f8b0010f8be9897",
                                "typeString": "literal_string \"seller transfer fail\""
                              }
                            ],
                            "id": 956,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1811:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 959,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1811:41:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 960,
                        "nodeType": "ExpressionStatement",
                        "src": "1811:41:4"
                      },
                      {
                        "assignments": [
                          962
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 962,
                            "mutability": "mutable",
                            "name": "buyer",
                            "nameLocation": "1871:5:4",
                            "nodeType": "VariableDeclaration",
                            "scope": 988,
                            "src": "1863:13:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 961,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1863:7:4",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 965,
                        "initialValue": {
                          "expression": {
                            "id": 963,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "1879:3:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 964,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1883:6:4",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1879:10:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1863:26:4"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 969,
                              "name": "buyer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 962,
                              "src": "1917:5:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 970,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 873,
                              "src": "1924:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 966,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 867,
                              "src": "1900:5:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_AiTextNFT_$747",
                                "typeString": "contract AiTextNFT"
                              }
                            },
                            "id": 968,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1906:10:4",
                            "memberName": "transferTo",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 623,
                            "src": "1900:16:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256) external"
                            }
                          },
                          "id": 971,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1900:32:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 972,
                        "nodeType": "ExpressionStatement",
                        "src": "1900:32:4"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 974,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 873,
                              "src": "1950:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 973,
                            "name": "_delist",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1084,
                            "src": "1942:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 975,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1942:16:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 976,
                        "nodeType": "ExpressionStatement",
                        "src": "1942:16:4"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 978,
                              "name": "listingId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 842,
                              "src": "1980:9:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 979,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 873,
                              "src": "1991:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 980,
                              "name": "buyer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 962,
                              "src": "2000:5:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 977,
                            "name": "Bought",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 786,
                            "src": "1973:6:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function (uint256,uint256,address)"
                            }
                          },
                          "id": 981,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1973:33:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 982,
                        "nodeType": "EmitStatement",
                        "src": "1968:38:4"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 984,
                              "name": "buyer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 962,
                              "src": "2023:5:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 985,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 873,
                              "src": "2030:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 983,
                            "name": "_list",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1066,
                            "src": "2017:5:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (address,uint256) returns (uint256)"
                            }
                          },
                          "id": 986,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2017:21:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 987,
                        "nodeType": "ExpressionStatement",
                        "src": "2017:21:4"
                      }
                    ]
                  },
                  "functionSelector": "d96a094a",
                  "id": 989,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 845,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 844,
                        "name": "nonReentrant",
                        "nameLocations": [
                          "1064:12:4"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 210,
                        "src": "1064:12:4"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1064:12:4"
                    }
                  ],
                  "name": "buy",
                  "nameLocation": "1024:3:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 843,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 842,
                        "mutability": "mutable",
                        "name": "listingId",
                        "nameLocation": "1036:9:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 989,
                        "src": "1028:17:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 841,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1028:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1027:19:4"
                  },
                  "returnParameters": {
                    "id": 846,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1077:0:4"
                  },
                  "scope": 1085,
                  "src": "1015:1030:4",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1013,
                    "nodeType": "Block",
                    "src": "2165:99:4",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 1002,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 999,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "2183:3:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1000,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2187:6:4",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "2183:10:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 1001,
                                "name": "nft",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 758,
                                "src": "2197:3:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "2183:17:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6f6e6c79206e6674",
                              "id": 1003,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2202:10:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_238ebc2abde939c4a44dada18e026398b17167896618dc6042d1bee245cbc293",
                                "typeString": "literal_string \"only nft\""
                              },
                              "value": "only nft"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_238ebc2abde939c4a44dada18e026398b17167896618dc6042d1bee245cbc293",
                                "typeString": "literal_string \"only nft\""
                              }
                            ],
                            "id": 998,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "2175:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1004,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2175:38:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1005,
                        "nodeType": "ExpressionStatement",
                        "src": "2175:38:4"
                      },
                      {
                        "expression": {
                          "id": 1011,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1006,
                            "name": "listingId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 996,
                            "src": "2223:9:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1008,
                                "name": "seller",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 991,
                                "src": "2241:6:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 1009,
                                "name": "tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 993,
                                "src": "2249:7:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1007,
                              "name": "_list",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1066,
                              "src": "2235:5:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (address,uint256) returns (uint256)"
                              }
                            },
                            "id": 1010,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2235:22:4",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2223:34:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1012,
                        "nodeType": "ExpressionStatement",
                        "src": "2223:34:4"
                      }
                    ]
                  },
                  "functionSelector": "7d808e68",
                  "id": 1014,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "autoListMinted",
                  "nameLocation": "2060:14:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 994,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 991,
                        "mutability": "mutable",
                        "name": "seller",
                        "nameLocation": "2083:6:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1014,
                        "src": "2075:14:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 990,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2075:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 993,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2099:7:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1014,
                        "src": "2091:15:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 992,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2091:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2074:33:4"
                  },
                  "returnParameters": {
                    "id": 997,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 996,
                        "mutability": "mutable",
                        "name": "listingId",
                        "nameLocation": "2150:9:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1014,
                        "src": "2142:17:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 995,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2142:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2141:19:4"
                  },
                  "scope": 1085,
                  "src": "2051:213:4",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1017,
                    "nodeType": "Block",
                    "src": "2297:2:4",
                    "statements": []
                  },
                  "id": 1018,
                  "implemented": true,
                  "kind": "receive",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1015,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2277:2:4"
                  },
                  "returnParameters": {
                    "id": 1016,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2297:0:4"
                  },
                  "scope": 1085,
                  "src": "2270:29:4",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1065,
                    "nodeType": "Block",
                    "src": "2390:267:4",
                    "statements": [
                      {
                        "expression": {
                          "id": 1033,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1027,
                              "name": "listings",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 770,
                              "src": "2400:8:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Listing_$765_storage_$",
                                "typeString": "mapping(uint256 => struct AiLaunchpad.Listing storage ref)"
                              }
                            },
                            "id": 1029,
                            "indexExpression": {
                              "id": 1028,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1022,
                              "src": "2409:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2400:17:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Listing_$765_storage",
                              "typeString": "struct AiLaunchpad.Listing storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1031,
                                "name": "seller",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1020,
                                "src": "2437:6:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 1030,
                              "name": "Listing",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 765,
                              "src": "2420:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_Listing_$765_storage_ptr_$",
                                "typeString": "type(struct AiLaunchpad.Listing storage pointer)"
                              }
                            },
                            "id": 1032,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "nameLocations": [
                              "2429:6:4"
                            ],
                            "names": [
                              "seller"
                            ],
                            "nodeType": "FunctionCall",
                            "src": "2420:25:4",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Listing_$765_memory_ptr",
                              "typeString": "struct AiLaunchpad.Listing memory"
                            }
                          },
                          "src": "2400:45:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Listing_$765_storage",
                            "typeString": "struct AiLaunchpad.Listing storage ref"
                          }
                        },
                        "id": 1034,
                        "nodeType": "ExpressionStatement",
                        "src": "2400:45:4"
                      },
                      {
                        "assignments": [
                          1037
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1037,
                            "mutability": "mutable",
                            "name": "token",
                            "nameLocation": "2466:5:4",
                            "nodeType": "VariableDeclaration",
                            "scope": 1065,
                            "src": "2456:15:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_AiTextNFT_$747",
                              "typeString": "contract AiTextNFT"
                            },
                            "typeName": {
                              "id": 1036,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1035,
                                "name": "AiTextNFT",
                                "nameLocations": [
                                  "2456:9:4"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 747,
                                "src": "2456:9:4"
                              },
                              "referencedDeclaration": 747,
                              "src": "2456:9:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_AiTextNFT_$747",
                                "typeString": "contract AiTextNFT"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1041,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1039,
                              "name": "nft",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 758,
                              "src": "2484:3:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1038,
                            "name": "AiTextNFT",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 747,
                            "src": "2474:9:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_AiTextNFT_$747_$",
                              "typeString": "type(contract AiTextNFT)"
                            }
                          },
                          "id": 1040,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2474:14:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_AiTextNFT_$747",
                            "typeString": "contract AiTextNFT"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2456:32:4"
                      },
                      {
                        "assignments": [
                          1043
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1043,
                            "mutability": "mutable",
                            "name": "price",
                            "nameLocation": "2506:5:4",
                            "nodeType": "VariableDeclaration",
                            "scope": 1065,
                            "src": "2498:13:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1042,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2498:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1048,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1046,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1022,
                              "src": "2528:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1044,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1037,
                              "src": "2514:5:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_AiTextNFT_$747",
                                "typeString": "contract AiTextNFT"
                              }
                            },
                            "id": 1045,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2520:7:4",
                            "memberName": "priceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 279,
                            "src": "2514:13:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) view external returns (uint256)"
                            }
                          },
                          "id": 1047,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2514:22:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2498:38:4"
                      },
                      {
                        "expression": {
                          "id": 1051,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1049,
                            "name": "listingId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1025,
                            "src": "2546:9:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1050,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1022,
                            "src": "2558:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2546:19:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1052,
                        "nodeType": "ExpressionStatement",
                        "src": "2546:19:4"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1054,
                              "name": "listingId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1025,
                              "src": "2588:9:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1055,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1022,
                              "src": "2599:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1056,
                              "name": "price",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1043,
                              "src": "2608:5:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1053,
                            "name": "Listed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 778,
                            "src": "2581:6:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256,uint256)"
                            }
                          },
                          "id": 1057,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2581:33:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1058,
                        "nodeType": "EmitStatement",
                        "src": "2576:38:4"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1062,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1022,
                              "src": "2642:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1059,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1037,
                              "src": "2625:5:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_AiTextNFT_$747",
                                "typeString": "contract AiTextNFT"
                              }
                            },
                            "id": 1061,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2631:10:4",
                            "memberName": "disableBuy",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 563,
                            "src": "2625:16:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) external"
                            }
                          },
                          "id": 1063,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2625:25:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1064,
                        "nodeType": "ExpressionStatement",
                        "src": "2625:25:4"
                      }
                    ]
                  },
                  "id": 1066,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_list",
                  "nameLocation": "2314:5:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1023,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1020,
                        "mutability": "mutable",
                        "name": "seller",
                        "nameLocation": "2328:6:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1066,
                        "src": "2320:14:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1019,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2320:7:4",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1022,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2344:7:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1066,
                        "src": "2336:15:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1021,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2336:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2319:33:4"
                  },
                  "returnParameters": {
                    "id": 1026,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1025,
                        "mutability": "mutable",
                        "name": "listingId",
                        "nameLocation": "2379:9:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1066,
                        "src": "2371:17:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1024,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2371:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2370:19:4"
                  },
                  "scope": 1085,
                  "src": "2305:352:4",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1083,
                    "nodeType": "Block",
                    "src": "2706:85:4",
                    "statements": [
                      {
                        "expression": {
                          "id": 1074,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "2716:24:4",
                          "subExpression": {
                            "baseExpression": {
                              "id": 1071,
                              "name": "listings",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 770,
                              "src": "2723:8:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Listing_$765_storage_$",
                                "typeString": "mapping(uint256 => struct AiLaunchpad.Listing storage ref)"
                              }
                            },
                            "id": 1073,
                            "indexExpression": {
                              "id": 1072,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1068,
                              "src": "2732:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2723:17:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Listing_$765_storage",
                              "typeString": "struct AiLaunchpad.Listing storage ref"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1075,
                        "nodeType": "ExpressionStatement",
                        "src": "2716:24:4"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1080,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1068,
                              "src": "2776:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1077,
                                  "name": "nft",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 758,
                                  "src": "2760:3:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1076,
                                "name": "AiTextNFT",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 747,
                                "src": "2750:9:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_AiTextNFT_$747_$",
                                  "typeString": "type(contract AiTextNFT)"
                                }
                              },
                              "id": 1078,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2750:14:4",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_AiTextNFT_$747",
                                "typeString": "contract AiTextNFT"
                              }
                            },
                            "id": 1079,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2765:10:4",
                            "memberName": "disableBuy",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 563,
                            "src": "2750:25:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) external"
                            }
                          },
                          "id": 1081,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2750:34:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1082,
                        "nodeType": "ExpressionStatement",
                        "src": "2750:34:4"
                      }
                    ]
                  },
                  "id": 1084,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_delist",
                  "nameLocation": "2672:7:4",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1069,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1068,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2688:7:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 1084,
                        "src": "2680:15:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1067,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2680:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2679:17:4"
                  },
                  "returnParameters": {
                    "id": 1070,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2706:0:4"
                  },
                  "scope": 1085,
                  "src": "2663:128:4",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 1086,
              "src": "199:2594:4",
              "usedErrors": [
                13,
                18,
                191
              ],
              "usedEvents": [
                24,
                778,
                786
              ]
            }
          ],
          "src": "32:2762:4"
        }
      }
    },
    "contracts": {
      "@openzeppelin/contracts/access/Ownable.sol": {
        "Ownable": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "OwnableInvalidOwner",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "OwnableUnauthorizedAccount",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
          "evm": {
            "methodIdentifiers": {
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "Context": {
          "abi": [],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
          "evm": {
            "methodIdentifiers": {}
          },
          "irOptimized": ""
        }
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
        "ReentrancyGuard": {
          "abi": [
            {
              "inputs": [],
              "name": "ReentrancyGuardReentrantCall",
              "type": "error"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]}},\"version\":1}",
          "evm": {
            "methodIdentifiers": {}
          },
          "irOptimized": ""
        }
      },
      "contracts/AiTextNFT.sol": {
        "AiTextNFT": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "name_",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol_",
                  "type": "string"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "NonexistentToken",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "NotMarket",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "OwnableInvalidOwner",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "OwnableUnauthorizedAccount",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                }
              ],
              "name": "MarketSet",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "mintFee",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                }
              ],
              "name": "MintFeeUpdated",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "minter",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "content",
                  "type": "string"
                }
              ],
              "name": "Minted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "name": "PriceSet",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "setter",
                  "type": "address"
                }
              ],
              "name": "PriceSetterUpdated",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "contentOf",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "disableBuy",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "enableBuy",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "isBuyable",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "market",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "content",
                  "type": "string"
                }
              ],
              "name": "mint",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "mintFee",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "mintFeeRecipient",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "seller",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "content",
                  "type": "string"
                }
              ],
              "name": "mintTo",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "nextId",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "ownerOf",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "priceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "priceSetter",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "m",
                  "type": "address"
                }
              ],
              "name": "setMarket",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "fee",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                }
              ],
              "name": "setMintFee",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "name": "setPrice",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "setter",
                  "type": "address"
                }
              ],
              "name": "setPriceSetter",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "transferTo",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": {
            "llvm_arguments": [],
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Default",
              "level_middle_end_size": "Z"
            },
            "revive_pallet_version": null,
            "revive_version": "0.2.0+commit.e94432e.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMarket\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"MarketSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"MintFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"}],\"name\":\"PriceSetterUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"contentOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"disableBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"enableBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isBuyable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"m\",\"type\":\"address\"}],\"name\":\"setMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"}],\"name\":\"setPriceSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Lightweight replacement for the original ERC721 contract. It keeps the same external interface and events that the backend relies on, but omits the ERC721 inheritance to keep the bytecode small.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AiTextNFT.sol\":\"AiTextNFT\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"contracts/AiTextNFT.sol\":{\"keccak256\":\"0xe8516d102b7dd4163237aad7dc943cdf154f8dce5f9d64981ac25d4fb8b78fb5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://804d5a7dae15c7f7b90664f27ecfa58fb83f4ca8c19e7e64c8a1c660311bc70b\",\"dweb:/ipfs/QmPtfWRcFaVSU49PLotpmjR5iJmeR25QuaFVAPndXHam4d\"]}},\"version\":1}",
            "solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 288/65872 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 10236\n// Code size = 35653 bytes\n\n      : @0 (gas: 1)\n     0: jump @14 if a0 == a1\n      : @1 (gas: 9)\n     3: a3 = a1 << 0x20\n     6: a3 = a3 >> 0x20\n     9: a4 = a0 << 0x20\n    12: a4 = a4 >> 0x20\n    15: a4 = a4 + a2\n    18: a3 = a3 - a4\n    21: a4 = a2 << 0x1\n    24: a4 = -a4\n    26: jump @7 if a4 >=u a3\n      : @2 (gas: 1)\n    29: jump @11 if a0 >=u a1\n      : @3 (gas: 1)\n    32: jump @14 if a2 == 0\n      : @4 (gas: 3)\n    35: a2 = a2 + a0\n    38: a3 = a0\n    40: fallthrough\n      : @5 (gas: 6)\n    41: a4 = u8 [a1]\n    43: a1 = a1 + 0x1\n    46: a5 = a3 + 0x1\n    49: u8 [a3] = a4\n    51: a3 = a5\n    53: jump @5 if a5 != a2\n      : @6 (gas: 1)\n    56: jump @14\n      : @7 (gas: 1)\n    58: jump @14 if a2 == 0\n      : @8 (gas: 3)\n    61: a2 = a2 + a0\n    64: a3 = a0\n    66: fallthrough\n      : @9 (gas: 6)\n    67: a4 = u8 [a1]\n    69: a1 = a1 + 0x1\n    72: a5 = a3 + 0x1\n    75: u8 [a3] = a4\n    77: a3 = a5\n    79: jump @9 if a5 != a2\n      : @10 (gas: 1)\n    82: jump @14\n      : @11 (gas: 1)\n    84: jump @14 if a2 == 0\n      : @12 (gas: 2)\n    87: i32 a3 = a2 + 0xffffffffffffffff\n    90: fallthrough\n      : @13 (gas: 7)\n    91: a4 = a1 + a3\n    94: a4 = u8 [a4]\n    96: a2 = a2 + 0xffffffffffffffff\n    99: a5 = a0 + a3\n   102: u8 [a5] = a4\n   104: i32 a3 = a3 + 0xffffffffffffffff\n   107: jump @13 if a2 != 0\n      : @14 (gas: 1)\n   110: ret\n      : @15 (gas: 2)\n   112: a1 = i32 [0x20128]\n   117: jump @215 if a1 == 0\n      : @16 (gas: 4)\n   121: a0 = 0x30150\n   126: i32 a0 = a0 + 0\n   128: ecalli 12 // 'set_immutable_data'\n   130: jump @215\n      : @17 (gas: 8)\n   133: sp = sp + 0xfffffffffffffff0\n   136: u64 [sp + 0x8] = ra\n   139: u64 [sp] = s0\n   141: a2 = a1\n   143: s0 = a0\n   145: a1 = 0x20\n   148: a0 = a2\n   150: ra = 2, jump @31\n      : @18 [@dyn 1] (gas: 100)\n   155: a1 = u8 [a0 + 0x1]\n   158: a2 = u8 [a0]\n   160: a3 = u8 [a0 + 0x2]\n   163: a4 = u8 [a0 + 0x3]\n   166: a1 = a1 << 0x8\n   169: a1 = a1 | a2\n   172: a3 = a3 << 0x10\n   175: a4 = a4 << 0x18\n   178: a3 = a3 | a4\n   181: a1 = a1 | a3\n   184: a2 = u8 [a0 + 0x5]\n   187: a3 = u8 [a0 + 0x4]\n   190: a4 = u8 [a0 + 0x6]\n   193: a5 = u8 [a0 + 0x7]\n   196: a2 = a2 << 0x8\n   199: a2 = a2 | a3\n   202: a4 = a4 << 0x10\n   205: a5 = a5 << 0x18\n   208: a4 = a4 | a5\n   211: a2 = a2 | a4\n   214: a2 = a2 << 0x20\n   217: t0 = a2 | a1\n   220: a2 = u8 [a0 + 0x9]\n   223: a3 = u8 [a0 + 0x8]\n   226: a4 = u8 [a0 + 0xa]\n   229: a5 = u8 [a0 + 0xb]\n   232: a2 = a2 << 0x8\n   235: a2 = a2 | a3\n   238: a4 = a4 << 0x10\n   241: a5 = a5 << 0x18\n   244: a4 = a4 | a5\n   247: a2 = a2 | a4\n   250: a3 = u8 [a0 + 0xd]\n   253: a4 = u8 [a0 + 0xc]\n   256: a5 = u8 [a0 + 0xe]\n   259: a1 = u8 [a0 + 0xf]\n   262: a3 = a3 << 0x8\n   265: a3 = a3 | a4\n   268: a5 = a5 << 0x10\n   271: a1 = a1 << 0x18\n   274: a1 = a1 | a5\n   277: a1 = a1 | a3\n   280: a1 = a1 << 0x20\n   283: t1 = a1 | a2\n   286: a1 = u8 [a0 + 0x11]\n   289: a3 = u8 [a0 + 0x10]\n   292: a4 = u8 [a0 + 0x12]\n   295: a5 = u8 [a0 + 0x13]\n   298: a1 = a1 << 0x8\n   301: a1 = a1 | a3\n   304: a4 = a4 << 0x10\n   307: a5 = a5 << 0x18\n   310: a4 = a4 | a5\n   313: a1 = a1 | a4\n   316: a3 = u8 [a0 + 0x15]\n   319: a4 = u8 [a0 + 0x14]\n   322: a5 = u8 [a0 + 0x16]\n   325: a2 = u8 [a0 + 0x17]\n   328: a3 = a3 << 0x8\n   331: a3 = a3 | a4\n   334: a5 = a5 << 0x10\n   337: a2 = a2 << 0x18\n   340: a2 = a2 | a5\n   343: a2 = a2 | a3\n   346: a2 = a2 << 0x20\n   349: a3 = a2 | a1\n   352: a1 = u8 [a0 + 0x19]\n   355: a2 = u8 [a0 + 0x18]\n   358: a4 = u8 [a0 + 0x1a]\n   361: a5 = u8 [a0 + 0x1b]\n   364: a1 = a1 << 0x8\n   367: a1 = a1 | a2\n   370: a4 = a4 << 0x10\n   373: a5 = a5 << 0x18\n   376: a4 = a4 | a5\n   379: a1 = a1 | a4\n   382: a2 = u8 [a0 + 0x1d]\n   385: a4 = u8 [a0 + 0x1c]\n   388: a5 = u8 [a0 + 0x1e]\n   391: a0 = u8 [a0 + 0x1f]\n   394: a2 = a2 << 0x8\n   397: a2 = a2 | a4\n   400: a5 = a5 << 0x10\n   403: a0 = a0 << 0x18\n   406: a0 = a0 | a5\n   409: a0 = a0 | a2\n   412: a0 = a0 << 0x20\n   415: a0 = a0 | a1\n   418: a0 = reverse a0\n   420: a1 = reverse a3\n   422: a2 = reverse t1\n   424: a3 = reverse t0\n   426: u64 [s0 + 0x18] = a3\n   429: u64 [s0 + 0x10] = a2\n   432: u64 [s0 + 0x8] = a1\n   435: u64 [s0] = a0\n   437: ra = u64 [sp + 0x8]\n   440: s0 = u64 [sp]\n   442: sp = sp + 0x10\n   445: ret\n      : @19 (gas: 12)\n   447: sp = sp + 0xffffffffffffffd8\n   450: u64 [sp + 0x20] = ra\n   453: u64 [sp + 0x18] = s0\n   456: u64 [sp + 0x10] = s1\n   459: a2 = u64 [a1]\n   461: u64 [sp + 0x8] = a2\n   464: a2 = u64 [a1 + 0x8]\n   467: u64 [sp] = a2\n   469: s0 = u64 [a1 + 0x10]\n   472: s1 = u64 [a1 + 0x18]\n   475: a1 = 0x20\n   478: ra = 4, jump @31\n      : @20 [@dyn 2] (gas: 71)\n   483: a1 = reverse s1\n   485: a2 = reverse s0\n   487: a3 = u64 [sp]\n   489: a3 = reverse a3\n   491: a4 = u64 [sp + 0x8]\n   494: a4 = reverse a4\n   496: u8 [a0 + 0x18] = a4\n   499: u8 [a0 + 0x10] = a3\n   502: u8 [a0 + 0x8] = a2\n   505: u8 [a0] = a1\n   507: a5 = a4 >> 0x38\n   510: u8 [a0 + 0x1f] = a5\n   513: a5 = a4 >> 0x30\n   516: u8 [a0 + 0x1e] = a5\n   519: a5 = a4 >> 0x28\n   522: u8 [a0 + 0x1d] = a5\n   525: a5 = a4 >> 0x20\n   528: u8 [a0 + 0x1c] = a5\n   531: a5 = a4 >> 0x18\n   534: u8 [a0 + 0x1b] = a5\n   537: a5 = a4 >> 0x10\n   540: u8 [a0 + 0x1a] = a5\n   543: a4 = a4 >> 0x8\n   546: u8 [a0 + 0x19] = a4\n   549: a4 = a3 >> 0x38\n   552: u8 [a0 + 0x17] = a4\n   555: a4 = a3 >> 0x30\n   558: u8 [a0 + 0x16] = a4\n   561: a4 = a3 >> 0x28\n   564: u8 [a0 + 0x15] = a4\n   567: a4 = a3 >> 0x20\n   570: u8 [a0 + 0x14] = a4\n   573: a4 = a3 >> 0x18\n   576: u8 [a0 + 0x13] = a4\n   579: a4 = a3 >> 0x10\n   582: u8 [a0 + 0x12] = a4\n   585: a3 = a3 >> 0x8\n   588: u8 [a0 + 0x11] = a3\n   591: a3 = a2 >> 0x38\n   594: u8 [a0 + 0xf] = a3\n   597: a3 = a2 >> 0x30\n   600: u8 [a0 + 0xe] = a3\n   603: a3 = a2 >> 0x28\n   606: u8 [a0 + 0xd] = a3\n   609: a3 = a2 >> 0x20\n   612: u8 [a0 + 0xc] = a3\n   615: a3 = a2 >> 0x18\n   618: u8 [a0 + 0xb] = a3\n   621: a3 = a2 >> 0x10\n   624: u8 [a0 + 0xa] = a3\n   627: a2 = a2 >> 0x8\n   630: u8 [a0 + 0x9] = a2\n   633: a2 = a1 >> 0x38\n   636: u8 [a0 + 0x7] = a2\n   639: a2 = a1 >> 0x30\n   642: u8 [a0 + 0x6] = a2\n   645: a2 = a1 >> 0x28\n   648: u8 [a0 + 0x5] = a2\n   651: a2 = a1 >> 0x20\n   654: u8 [a0 + 0x4] = a2\n   657: a2 = a1 >> 0x18\n   660: u8 [a0 + 0x3] = a2\n   663: a2 = a1 >> 0x10\n   666: u8 [a0 + 0x2] = a2\n   669: a1 = a1 >> 0x8\n   672: u8 [a0 + 0x1] = a1\n   675: ra = u64 [sp + 0x20]\n   678: s0 = u64 [sp + 0x18]\n   681: s1 = u64 [sp + 0x10]\n   684: sp = sp + 0x28\n   687: ret\n      : @21 (gas: 32)\n   689: sp = sp + 0xffffffffffffffa0\n   692: u64 [sp + 0x58] = ra\n   695: u64 [sp + 0x50] = s0\n   698: u64 [sp + 0x48] = s1\n   701: s0 = sp + 0x60\n   704: sp = sp & 0xffffffffffffffe0\n   707: s1 = a0\n   709: a0 = u64 [a1 + 0x18]\n   712: a2 = u64 [a1 + 0x10]\n   715: a3 = u64 [a1 + 0x8]\n   718: a1 = u64 [a1]\n   720: a0 = reverse a0\n   722: a2 = reverse a2\n   724: a3 = reverse a3\n   726: a1 = reverse a1\n   728: u64 [sp + 0x18] = a1\n   731: u64 [sp + 0x10] = a3\n   734: u64 [sp + 0x8] = a2\n   737: u64 [sp] = a0\n   739: u64 [sp + 56] = 0\n   742: u64 [sp + 48] = 0\n   745: u64 [sp + 40] = 0\n   748: u64 [sp + 32] = 0\n   751: u32 [sp + 64] = 0x20\n   755: i32 a1 = sp + 0\n   757: i32 a3 = sp + 0x20\n   760: i32 a4 = sp + 0x40\n   763: a2 = 0xffffffffffffffff\n   766: a0 = 0\n   768: ra = 0x6\n   771: ecalli 6 // 'get_storage'\n   773: fallthrough\n      : @22 [@dyn 3] (gas: 5)\n   774: a0 = u64 [sp + 0x38]\n   777: a1 = u64 [sp + 0x30]\n   780: a2 = u64 [sp + 0x28]\n   783: a3 = u64 [sp + 0x20]\n   786: t0 = 8, jump @1226\n      : @23 [@dyn 4] (gas: 5)\n   792: u64 [s1 + 0x18] = a3\n   795: u64 [s1 + 0x10] = a2\n   798: u64 [s1 + 0x8] = a1\n   801: u64 [s1] = a0\n   803: t0 = 10, jump @1233\n      : @24 [@dyn 5] (gas: 1)\n   809: ret\n      : @25 (gas: 40)\n   811: sp = sp + 0xffffffffffffffa0\n   814: u64 [sp + 0x58] = ra\n   817: u64 [sp + 0x50] = s0\n   820: s0 = sp + 0x60\n   823: sp = sp & 0xffffffffffffffe0\n   826: t0 = u64 [a0]\n   828: a3 = u64 [a0 + 0x8]\n   831: a4 = u64 [a0 + 0x10]\n   834: a0 = u64 [a0 + 0x18]\n   837: t1 = u64 [a1]\n   839: a2 = u64 [a1 + 0x8]\n   842: a5 = u64 [a1 + 0x10]\n   845: a1 = u64 [a1 + 0x18]\n   848: t2 = reverse a0\n   850: a4 = reverse a4\n   852: a3 = reverse a3\n   854: a0 = reverse t0\n   856: t0 = reverse a1\n   858: a5 = reverse a5\n   860: a2 = reverse a2\n   862: a1 = reverse t1\n   864: u64 [sp + 0x18] = a0\n   867: u64 [sp + 0x10] = a3\n   870: u64 [sp + 0x8] = a4\n   873: u64 [sp] = t2\n   875: u64 [sp + 0x38] = a1\n   878: u64 [sp + 0x30] = a2\n   881: u64 [sp + 0x28] = a5\n   884: u64 [sp + 0x20] = t0\n   887: i32 a1 = sp + 0\n   889: i32 a3 = sp + 0x20\n   892: a2 = 0xffffffffffffffff\n   895: a4 = 0x20\n   898: a0 = 0\n   900: ecalli 13 // 'set_storage'\n   902: sp = s0 + 0xffffffffffffffa0\n   905: ra = u64 [sp + 0x58]\n   908: s0 = u64 [sp + 0x50]\n   911: sp = sp + 0x60\n   914: ret\n      : @26 (gas: 24)\n   916: sp = sp + 0xffffffffffffff60\n   920: u64 [sp + 0x98] = ra\n   924: u64 [sp + 0x90] = s0\n   928: u64 [sp + 0x88] = s1\n   932: s0 = sp + 0xa0\n   936: sp = sp & 0xffffffffffffffe0\n   939: a4 = u64 [a3]\n   941: u64 [sp + 0x38] = a4\n   944: a4 = u64 [a3 + 0x8]\n   947: u64 [sp + 0x30] = a4\n   950: a4 = u64 [a3 + 0x10]\n   953: u64 [sp + 0x28] = a4\n   956: a3 = u64 [a3 + 0x18]\n   959: u64 [sp + 0x20] = a3\n   962: a3 = u64 [a2]\n   964: u64 [sp + 0x18] = a3\n   967: a3 = u64 [a2 + 0x8]\n   970: u64 [sp + 0x10] = a3\n   973: a3 = u64 [a2 + 0x10]\n   976: u64 [sp + 0x8] = a3\n   979: a2 = u64 [a2 + 0x18]\n   982: u64 [sp] = a2\n   984: s1 = a1\n   986: ra = 12, jump @31\n      : @27 [@dyn 6] (gas: 35)\n   991: a1 = u64 [sp]\n   993: a1 = reverse a1\n   995: a2 = u64 [sp + 0x8]\n   998: a2 = reverse a2\n  1000: a3 = u64 [sp + 0x10]\n  1003: a3 = reverse a3\n  1005: a4 = u64 [sp + 0x18]\n  1008: a4 = reverse a4\n  1010: u64 [sp + 0x58] = a4\n  1013: u64 [sp + 0x50] = a3\n  1016: u64 [sp + 0x48] = a2\n  1019: u64 [sp + 0x40] = a1\n  1022: a1 = u64 [sp + 0x20]\n  1025: a1 = reverse a1\n  1027: a2 = u64 [sp + 0x28]\n  1030: a2 = reverse a2\n  1032: a3 = u64 [sp + 0x30]\n  1035: a3 = reverse a3\n  1037: a4 = u64 [sp + 0x38]\n  1040: a4 = reverse a4\n  1042: u64 [sp + 0x78] = a4\n  1045: u64 [sp + 0x70] = a3\n  1048: u64 [sp + 0x68] = a2\n  1051: u64 [sp + 0x60] = a1\n  1054: i32 a2 = a0 + 0\n  1056: i32 a3 = s1 + 0\n  1058: i32 a0 = sp + 0x40\n  1061: a1 = 0x2\n  1064: ecalli 5 // 'deposit_event'\n  1066: sp = s0 + 0xffffffffffffff60\n  1070: ra = u64 [sp + 0x98]\n  1074: s0 = u64 [sp + 0x90]\n  1078: s1 = u64 [sp + 0x88]\n  1082: sp = sp + 0xa0\n  1086: ret\n      : @28 (gas: 33)\n  1088: sp = sp + 0xffffffffffffff20\n  1092: u64 [sp + 0xd8] = ra\n  1096: u64 [sp + 0xd0] = s0\n  1100: u64 [sp + 0xc8] = s1\n  1104: s0 = sp + 0xe0\n  1108: sp = sp & 0xffffffffffffffe0\n  1111: a5 = u64 [a4]\n  1113: u64 [sp + 0x40] = a5\n  1116: a5 = u64 [a4 + 0x8]\n  1119: u64 [sp + 0x48] = a5\n  1122: a5 = u64 [a4 + 0x10]\n  1125: u64 [sp + 0x50] = a5\n  1128: a4 = u64 [a4 + 0x18]\n  1131: u64 [sp + 0x58] = a4\n  1134: t0 = 0xe\n  1137: a4 = u64 [a3]\n  1139: u64 [sp + 0x18] = a4\n  1142: a4 = u64 [a3 + 0x8]\n  1145: u64 [sp + 0x20] = a4\n  1148: a4 = u64 [a3 + 0x10]\n  1151: u64 [sp + 0x28] = a4\n  1154: a3 = u64 [a3 + 0x18]\n  1157: u64 [sp + 0x30] = a3\n  1160: s1 = u64 [a2]\n  1162: a3 = u64 [a2 + 0x8]\n  1165: u64 [sp] = a3\n  1167: a3 = u64 [a2 + 0x10]\n  1170: u64 [sp + 0x8] = a3\n  1173: a2 = u64 [a2 + 0x18]\n  1176: u64 [sp + 0x10] = a2\n  1179: u64 [sp + 0x38] = a1\n  1182: ra = 0x10\n  1185: jump @31\n      : @29 [@dyn 7] (gas: 2)\n  1188: u64 [sp + 0x38] = a1\n  1191: ra = 16, jump @31\n      : @30 [@dyn 8] (gas: 46)\n  1196: a1 = reverse s1\n  1198: u64 [sp + 0x78] = a1\n  1201: a1 = u64 [sp]\n  1203: a1 = reverse a1\n  1205: u64 [sp + 0x70] = a1\n  1208: a1 = u64 [sp + 0x8]\n  1211: a1 = reverse a1\n  1213: u64 [sp + 0x68] = a1\n  1216: a1 = u64 [sp + 0x10]\n  1219: a1 = reverse a1\n  1221: u64 [sp + 0x60] = a1\n  1224: a1 = u64 [sp + 0x18]\n  1227: a1 = reverse a1\n  1229: u64 [sp + 0x98] = a1\n  1233: a1 = u64 [sp + 0x20]\n  1236: a1 = reverse a1\n  1238: u64 [sp + 0x90] = a1\n  1242: a1 = u64 [sp + 0x28]\n  1245: a1 = reverse a1\n  1247: u64 [sp + 0x88] = a1\n  1251: a1 = u64 [sp + 0x30]\n  1254: a1 = reverse a1\n  1256: u64 [sp + 0x80] = a1\n  1260: a1 = u64 [sp + 0x40]\n  1263: a1 = reverse a1\n  1265: u64 [sp + 0xb8] = a1\n  1269: a1 = u64 [sp + 0x48]\n  1272: a1 = reverse a1\n  1274: u64 [sp + 0xb0] = a1\n  1278: a1 = u64 [sp + 0x50]\n  1281: a1 = reverse a1\n  1283: u64 [sp + 0xa8] = a1\n  1287: a1 = u64 [sp + 0x58]\n  1290: a1 = reverse a1\n  1292: u64 [sp + 0xa0] = a1\n  1296: i32 a2 = a0 + 0\n  1298: a3 = i32 [sp + 0x38]\n  1301: i32 a0 = sp + 0x60\n  1304: a1 = 0x3\n  1307: ecalli 5 // 'deposit_event'\n  1309: sp = s0 + 0xffffffffffffff20\n  1313: ra = u64 [sp + 0xd8]\n  1317: s0 = u64 [sp + 0xd0]\n  1321: s1 = u64 [sp + 0xc8]\n  1325: sp = sp + 0xe0\n  1329: ret\n      : @31 (gas: 2)\n  1331: i32 a2 = a0 >> 0x10\n  1334: jump @36 if a2 != 0\n      : @32 (gas: 4)\n  1337: a1 = a1 + a0\n  1340: i32 a1 = a1 + 0x1f\n  1343: a1 = a1 & 0xffffffffffffffe0\n  1346: jump @36 if a1 >u 65536\n      : @33 (gas: 3)\n  1352: a2 = 0x20124\n  1357: a3 = i32 [0x20124]\n  1362: jump @35 if a3 >=u a1\n      : @34 (gas: 2)\n  1365: u32 [0x20124] = a1\n  1370: fallthrough\n      : @35 (gas: 4)\n  1371: a1 = 0x20130\n  1376: i32 a0 = a0 + 0\n  1378: a0 = a0 + a1\n  1381: ret\n      : @36 (gas: 1)\n  1383: trap\n      : @37 (gas: 6)\n  1384: sp = sp + 0xfffffffffffffff0\n  1387: u64 [sp + 0x8] = ra\n  1390: u64 [sp] = s0\n  1392: s0 = a0 & 0x1\n  1395: ecalli 3 // 'call_data_size'\n  1397: fallthrough\n      : @38 (gas: 2)\n  1398: u32 [0x20120] = a0\n  1403: jump @40 if s0 == 0\n      : @39 (gas: 1)\n  1406: ra = 18, jump @41\n      : @40 [@dyn 9] (gas: 18)\n  1410: ra = 0x14\n  1413: sp = sp + 0xfffffffffffffe10\n  1417: u64 [sp + 0x1e8] = ra\n  1421: u64 [sp + 0x1e0] = s0\n  1425: u64 [sp + 0x1d8] = s1\n  1429: s0 = sp + 0x1f0\n  1433: sp = sp + 0xffffffffffffdf30\n  1437: sp = sp & 0xffffffffffffffe0\n  1440: s1 = sp\n  1442: a2 = s1 + 0x1838\n  1446: u64 [a2 + 160] = 0\n  1450: u64 [a2 + 152] = 0\n  1454: u64 [a2 + 136] = 0x80\n  1460: a0 = 0x40\n  1463: a1 = s1 + 0x18c0\n  1467: u64 [a2 + 144] = 0\n  1471: ra = 0xc6\n  1475: jump @19\n      : @41 [@dyn 10] (gas: 15)\n  1478: sp = sp + 0xfffffffffffffe10\n  1482: u64 [sp + 0x1e8] = ra\n  1486: u64 [sp + 0x1e0] = s0\n  1490: u64 [sp + 0x1d8] = s1\n  1494: s0 = sp + 0x1f0\n  1498: sp = sp + 0xfffffffffffff8f0\n  1502: sp = sp & 0xffffffffffffffe0\n  1505: s1 = sp\n  1507: u64 [s1 + 1560] = 0\n  1511: u64 [s1 + 1552] = 0\n  1515: u64 [s1 + 1536] = 0x80\n  1521: a0 = 0x40\n  1524: a1 = s1 + 0x600\n  1528: u64 [s1 + 1544] = 0\n  1532: ra = 22, jump @19\n      : @42 [@dyn 11] (gas: 7)\n  1537: u64 [s1 + 1592] = 0\n  1541: u64 [s1 + 1584] = 0\n  1545: u64 [s1 + 1576] = 0\n  1549: u64 [s1 + 1568] = 0\n  1553: i32 a0 = s1 + 0x620\n  1557: ecalli 14 // 'value_transferred'\n  1559: fallthrough\n      : @43 (gas: 9)\n  1560: a4 = s1 + 0x600\n  1564: a0 = u64 [a4 + 0x30]\n  1567: a1 = u64 [a4 + 0x38]\n  1570: a2 = u64 [a4 + 0x28]\n  1573: a3 = u64 [a4 + 0x20]\n  1576: a1 = a1 | a2\n  1579: a0 = a0 | a3\n  1582: a0 = a0 | a1\n  1585: jump @45 if a0 == 0\n      : @44 (gas: 1)\n  1588: jump @179\n      : @45 (gas: 9)\n  1591: a2 = u32 [0x20120]\n  1596: u64 [s1 + 1496] = 0\n  1600: u64 [s1 + 1488] = 0\n  1604: u64 [s1 + 1480] = 0\n  1608: a0 = s1 + 0x5e0\n  1612: a1 = s1 + 0x5c0\n  1616: u64 [s1 + 0x118] = a2\n  1620: u64 [s1 + 0x5c0] = a2\n  1624: ra = 24, jump @869\n      : @46 [@dyn 12] (gas: 17)\n  1629: a4 = s1 + 0x500\n  1633: a3 = u64 [a4 + 0xf8]\n  1637: a2 = u64 [a4 + 0xf0]\n  1641: a1 = u64 [a4 + 0xe8]\n  1645: a0 = u64 [a4 + 0xe0]\n  1649: a4 = s1 + 0x100\n  1653: u64 [a4 + 0x10] = a3\n  1656: u64 [a4] = a1\n  1658: a3 = a3 | a1\n  1661: a1 = a0 | a2\n  1664: a1 = a1 | a3\n  1667: a1 = a1 >> 0x20\n  1670: u64 [a4 + 0x8] = a2\n  1673: a2 = a2 | a3\n  1676: a2 = a2 << 0x20\n  1679: a1 = a1 | a2\n  1682: jump @48 if a1 == 0\n      : @47 (gas: 1)\n  1685: jump @178\n      : @48 (gas: 3)\n  1688: u64 [s1 + 0xf8] = a0\n  1692: a1 = u64 [s1 + 0x118]\n  1696: ra = 26, jump @31\n      : @49 [@dyn 13] (gas: 5)\n  1701: i32 a0 = a0 + 0\n  1703: a1 = i32 [s1 + 0x118]\n  1707: a2 = 0\n  1709: ecalli 1 // 'call_data_copy'\n  1711: fallthrough\n      : @50 (gas: 2)\n  1712: a1 = u64 [s1 + 0x118]\n  1716: jump @52 if a1 >u 63\n      : @51 (gas: 1)\n  1720: jump @180\n      : @52 (gas: 3)\n  1723: a0 = s1 + 0x5a0\n  1727: a1 = u64 [s1 + 0xf8]\n  1731: ra = 28, jump @17\n      : @53 [@dyn 14] (gas: 8)\n  1736: a0 = u64 [s1 + 0x5b8]\n  1740: t0 = u64 [s1 + 0x5b0]\n  1744: a4 = u64 [s1 + 0x5a8]\n  1748: u64 [s1 + 0xf0] = a0\n  1752: a2 = t0 | a0\n  1755: a3 = a4 <u 0x1\n  1758: a3 = 0 if a2 != 0\n  1760: jump @55 if a3 != 0\n      : @54 (gas: 1)\n  1763: jump @181\n      : @55 (gas: 50)\n  1766: a3 = u64 [s1 + 0x5a0]\n  1770: t1 = u64 [s1 + 0xf8]\n  1774: t2 = u64 [s1 + 0x118]\n  1778: t2 = t2 + t1\n  1781: a1 = t2 <u t1\n  1784: t1 = t1 + a3\n  1787: u64 [s1 + 0x118] = t1\n  1791: a3 = t1 <u a3\n  1794: a2 = u64 [s1 + 0x100]\n  1798: a0 = a4 + a2\n  1801: a5 = a2\n  1803: t1 = a0 + a3\n  1806: a2 = t1 ^ a4\n  1809: a4 = t1 <u a4\n  1812: a4 = a3 if a2 == 0\n  1815: a2 = a5\n  1817: a5 = a5 + a1\n  1820: a2 = a5 <u a2\n  1823: a2 = a1 if a1 == 0\n  1826: a1 = u64 [s1 + 0x108]\n  1830: a3 = t0 + a1\n  1833: ra = a3 <u t0\n  1836: a0 = u64 [s1 + 0x110]\n  1840: t0 = u64 [s1 + 0xf0]\n  1844: t0 = t0 + a0\n  1847: ra = ra + t0\n  1850: t0 = a1 + a2\n  1853: a4 = a4 + a3\n  1856: a2 = a4 <u a3\n  1859: a3 = ra + a2\n  1862: a1 = t0 <u a1\n  1865: a1 = a1 + a0\n  1868: u64 [s1 + 0xf0] = t2\n  1872: u64 [s1 + 0x540] = t2\n  1876: u64 [s1 + 0xe8] = a5\n  1880: u64 [s1 + 0x548] = a5\n  1884: a0 = u64 [s1 + 0x118]\n  1888: a5 = s1 + 0x500\n  1892: u64 [a5 + 0x60] = a0\n  1895: u64 [s1 + 0x118] = t0\n  1899: u64 [s1 + 0x550] = t0\n  1903: u64 [s1 + 0xe0] = a1\n  1907: u64 [a5 + 0x58] = a1\n  1910: u64 [s1 + 0x568] = t1\n  1914: u64 [a5 + 0x70] = a4\n  1917: a0 = s1 + 0x580\n  1921: a1 = s1 + 0x560\n  1925: a2 = s1 + 0x540\n  1929: u64 [a5 + 0x78] = a3\n  1932: ra = 30, jump @880\n      : @56 [@dyn 15] (gas: 11)\n  1937: a2 = u64 [s1 + 0xf8]\n  1941: a4 = s1 + 0x100\n  1945: a0 = u64 [a4 + 0x8]\n  1948: a1 = u64 [a4 + 0x10]\n  1951: a0 = a0 | a1\n  1954: a1 = 0xffffffe0\n  1964: a1 = a2 <u a1\n  1967: a3 = u64 [a4]\n  1969: a1 = 0 if a3 != 0\n  1971: a1 = 0 if a0 != 0\n  1973: jump @58 if a1 != 0\n      : @57 (gas: 1)\n  1976: jump @178\n      : @58 (gas: 11)\n  1979: a0 = u64 [s1 + 0x598]\n  1983: u64 [s1 + 0xa0] = a0\n  1987: a0 = u64 [s1 + 0x590]\n  1991: u64 [s1 + 0x98] = a0\n  1995: a0 = u64 [s1 + 0x588]\n  1999: u64 [s1 + 0xa8] = a0\n  2003: a0 = u64 [s1 + 0x580]\n  2007: u64 [s1 + 0xb0] = a0\n  2011: i32 a1 = a2 + 0x20\n  2014: a0 = s1 + 0x520\n  2018: ra = 32, jump @17\n      : @59 [@dyn 16] (gas: 7)\n  2023: t0 = u64 [s1 + 0x538]\n  2027: a1 = u64 [s1 + 0x530]\n  2031: a2 = u64 [s1 + 0x528]\n  2035: a3 = a1 | t0\n  2038: a4 = a2 <u 0x1\n  2041: a4 = 0 if a3 != 0\n  2043: jump @61 if a4 != 0\n      : @60 (gas: 1)\n  2046: jump @182\n      : @61 (gas: 36)\n  2049: a3 = u64 [s1 + 0x520]\n  2053: a4 = u64 [s1 + 0xf8]\n  2057: a4 = a4 + a3\n  2060: a3 = a4 <u a3\n  2063: a5 = u64 [s1 + 0x100]\n  2067: a5 = a5 + a2\n  2070: a5 = a5 + a3\n  2073: a0 = a5 ^ a2\n  2076: a2 = a5 <u a2\n  2079: a2 = a3 if a0 == 0\n  2082: a0 = u64 [s1 + 0x108]\n  2086: a0 = a0 + a1\n  2089: a2 = a2 + a0\n  2092: a3 = a2 <u a0\n  2095: a0 = a0 <u a1\n  2098: a1 = u64 [s1 + 0x110]\n  2102: t0 = t0 + a1\n  2105: a0 = a0 + t0\n  2108: a3 = a3 + a0\n  2111: a0 = u64 [s1 + 0xf0]\n  2115: u64 [s1 + 0x4c0] = a0\n  2119: a0 = u64 [s1 + 0xe8]\n  2123: u64 [s1 + 0x4c8] = a0\n  2127: u64 [s1 + 0x4e0] = a4\n  2131: a0 = u64 [s1 + 0x118]\n  2135: a4 = s1 + 0x400\n  2139: u64 [a4 + 0xd0] = a0\n  2143: a0 = u64 [s1 + 0xe0]\n  2147: u64 [a4 + 0xd8] = a0\n  2151: u64 [a4 + 0xe8] = a5\n  2155: u64 [a4 + 0xf0] = a2\n  2159: a0 = s1 + 0x500\n  2163: a1 = s1 + 0x4e0\n  2167: a2 = s1 + 0x4c0\n  2171: u64 [a4 + 0xf8] = a3\n  2175: ra = 34, jump @880\n      : @62 [@dyn 17] (gas: 15)\n  2180: a1 = s1 + 0x500\n  2184: a0 = u64 [a1 + 0x18]\n  2187: u64 [s1 + 0x70] = a0\n  2190: a0 = u64 [a1 + 0x10]\n  2193: u64 [s1 + 0x78] = a0\n  2196: a0 = u64 [a1 + 0x8]\n  2199: u64 [s1 + 0x80] = a0\n  2203: a0 = u64 [a1]\n  2205: u64 [s1 + 0x88] = a0\n  2209: a0 = 0x30130\n  2214: u64 [s1 + 0x118] = a0\n  2218: i32 a0 = a0 + 0\n  2220: u64 [s1 + 0x110] = a0\n  2224: ecalli 4 // 'caller'\n  2226: fallthrough\n      : @63 (gas: 7)\n  2227: a2 = u64 [s1 + 0x118]\n  2231: a0 = u32 [a2 + 0x10]\n  2234: a1 = u64 [a2]\n  2236: a2 = u64 [a2 + 0x8]\n  2239: a0 = a0 | a1\n  2242: a0 = a0 | a2\n  2245: jump @65 if a0 != 0\n      : @64 (gas: 1)\n  2248: jump @183\n      : @65 (gas: 7)\n  2251: u64 [s1 + 1624] = 0\n  2255: u64 [s1 + 1616] = 0\n  2259: u64 [s1 + 1608] = 0\n  2263: u64 [s1 + 1600] = 0\n  2267: a0 = s1 + 0x4a0\n  2271: a1 = s1 + 0x640\n  2275: ra = 36, jump @21\n      : @66 [@dyn 18] (gas: 40)\n  2280: a0 = u64 [s1 + 0x4a0]\n  2284: u64 [s1 + 0x100] = a0\n  2288: a0 = u64 [s1 + 0x4a8]\n  2292: u64 [s1 + 0xf8] = a0\n  2296: a0 = u64 [s1 + 0x4b8]\n  2300: u64 [s1 + 0xf0] = a0\n  2304: a0 = u64 [s1 + 0x4b0]\n  2308: u64 [s1 + 0x108] = a0\n  2312: a0 = u64 [s1 + 0x110]\n  2316: ecalli 4 // 'caller'\n  2318: a2 = u64 [s1 + 0x118]\n  2322: a0 = u64 [a2 + 0x8]\n  2325: a1 = i32 [a2 + 0x10]\n  2328: a2 = u64 [a2]\n  2330: a0 = reverse a0\n  2332: a3 = a0 << 0x20\n  2335: a1 = reverse a1\n  2337: a1 = a1 >> 0x20\n  2340: a1 = a1 | a3\n  2343: a0 = a0 >> 0x20\n  2346: a2 = reverse a2\n  2348: a3 = a2 << 0x20\n  2351: a0 = a0 | a3\n  2354: a2 = a2 >> 0x20\n  2357: a3 = u64 [s1 + 0x108]\n  2361: a3 = a3 >> 0x20\n  2364: a3 = a3 << 0x20\n  2367: a2 = a2 | a3\n  2370: u64 [s1 + 1656] = 0\n  2374: u64 [s1 + 1648] = 0\n  2378: u64 [s1 + 1640] = 0\n  2382: u64 [s1 + 1632] = 0\n  2386: a3 = u64 [s1 + 0xf0]\n  2390: u64 [s1 + 0x698] = a3\n  2394: u64 [s1 + 0x690] = a2\n  2398: u64 [s1 + 0x688] = a0\n  2402: u64 [s1 + 0x680] = a1\n  2406: a0 = s1 + 0x660\n  2410: a1 = s1 + 0x680\n  2414: ra = 38, jump @25\n      : @67 [@dyn 19] (gas: 45)\n  2419: a0 = u64 [s1 + 0x110]\n  2423: ecalli 4 // 'caller'\n  2425: a4 = s1 + 0x100\n  2429: a2 = u64 [a4 + 0x18]\n  2432: a0 = u64 [a2 + 0x8]\n  2435: a1 = i32 [a2 + 0x10]\n  2438: a2 = u64 [a2]\n  2440: a3 = reverse a0\n  2442: a0 = a3 << 0x20\n  2445: a1 = reverse a1\n  2447: a1 = a1 >> 0x20\n  2450: t0 = a1 | a0\n  2453: a3 = a3 >> 0x20\n  2456: a2 = reverse a2\n  2458: a1 = a2 << 0x20\n  2461: a1 = a1 | a3\n  2464: a2 = a2 >> 0x20\n  2467: a3 = u64 [a4 + 0x8]\n  2470: a3 = a3 << 0x20\n  2473: a3 = a3 >> 0x20\n  2476: u64 [s1 + 1112] = 0\n  2480: u64 [s1 + 1144] = 0\n  2484: u64 [s1 + 0x470] = a3\n  2488: a0 = u64 [s1 + 0xf8]\n  2492: u64 [s1 + 0x468] = a0\n  2496: a0 = u64 [a4]\n  2498: u64 [s1 + 0x460] = a0\n  2502: a3 = u64 [0x20000]\n  2507: a4 = u64 [0x20008]\n  2512: a5 = u64 [0x20010]\n  2517: a0 = u64 [0x20018]\n  2522: u64 [s1 + 0x498] = a3\n  2526: a3 = s1 + 0x400\n  2530: u64 [a3 + 0x90] = a4\n  2534: u64 [a3 + 0x88] = a5\n  2538: u64 [a3 + 0x80] = a0\n  2542: u64 [a3 + 0x50] = a2\n  2545: u64 [a3 + 0x48] = a1\n  2548: a2 = s1 + 0x480\n  2552: a3 = s1 + 0x460\n  2556: a4 = s1 + 0x440\n  2560: u64 [s1 + 0x440] = t0\n  2564: a0 = 0\n  2566: a1 = 0\n  2568: ra = 40, jump @28\n      : @68 [@dyn 20] (gas: 11)\n  2573: u64 [s1 + 1720] = 0\n  2577: u64 [s1 + 1712] = 0\n  2581: u64 [s1 + 1704] = 0\n  2585: u64 [s1 + 1696] = 0x4\n  2590: u64 [s1 + 1752] = 0\n  2594: u64 [s1 + 1744] = 0\n  2598: u64 [s1 + 1736] = 0\n  2602: u64 [s1 + 1728] = 0x1\n  2607: a0 = s1 + 0x6a0\n  2611: a1 = s1 + 0x6c0\n  2615: ra = 42, jump @25\n      : @69 [@dyn 21] (gas: 12)\n  2620: a1 = u64 [s1 + 0xb0]\n  2624: a4 = u64 [s1 + 0x98]\n  2628: a0 = a1 | a4\n  2631: a2 = u64 [s1 + 0xa8]\n  2635: a3 = u64 [s1 + 0xa0]\n  2639: a2 = a2 | a3\n  2642: a0 = a0 | a2\n  2645: a0 = a0 >> 0x20\n  2648: a2 = a2 | a4\n  2651: a2 = a2 << 0x20\n  2654: a0 = a0 | a2\n  2657: jump @71 if a0 == 0\n      : @70 (gas: 1)\n  2660: jump @178\n      : @71 (gas: 2)\n  2663: a0 = s1 + 0x420\n  2667: ra = 44, jump @17\n      : @72 [@dyn 22] (gas: 17)\n  2672: a0 = s1 + 0x400\n  2676: a3 = u64 [a0 + 0x38]\n  2679: a1 = u64 [a0 + 0x30]\n  2682: a2 = u64 [a0 + 0x28]\n  2685: a0 = a3 >u 0\n  2687: a4 = a1 >u 0\n  2689: a4 = a0 if a3 != 0\n  2692: u64 [s1 + 0xd0] = a2\n  2696: a0 = a2 >u 0\n  2698: u64 [s1 + 0x60] = a1\n  2701: u64 [s1 + 0xc8] = a3\n  2705: a1 = a1 | a3\n  2708: u64 [s1 + 0x58] = a0\n  2711: u64 [s1 + 0x90] = a4\n  2715: u64 [s1 + 0xc0] = a1\n  2719: a0 = a4 if a1 != 0\n  2722: jump @74 if a0 == 0\n      : @73 (gas: 1)\n  2725: jump @188\n      : @74 (gas: 9)\n  2728: a0 = u64 [s1 + 0x420]\n  2732: u64 [s1 + 0x68] = a0\n  2735: u64 [s1 + 1784] = 0\n  2739: u64 [s1 + 1776] = 0\n  2743: u64 [s1 + 1768] = 0\n  2747: u64 [s1 + 1760] = 0x1\n  2752: a0 = s1 + 0x400\n  2756: a1 = s1 + 0x6e0\n  2760: ra = 46, jump @21\n      : @75 [@dyn 23] (gas: 6)\n  2765: a4 = s1 + 0x400\n  2769: a0 = u64 [a4 + 0x10]\n  2772: a1 = u64 [a4 + 0x8]\n  2775: a2 = u64 [a4]\n  2777: a3 = u64 [a4 + 0x18]\n  2780: t0 = 48, jump @1213\n      : @76 [@dyn 24] (gas: 12)\n  2785: t0 = a2 <u 0x1\n  2788: ra = a1 & 0x7f\n  2791: t2 = a5 & a0\n  2794: a4 = a5 & t1\n  2797: ra = a1 if a2 != 0\n  2800: a1 = ra <u 0x20\n  2803: a5 = a5 & a3\n  2806: a2 = a1\n  2808: a2 = 0 if a4 != 0\n  2810: a0 = t2 | a5\n  2813: a2 = 0 if a0 != 0\n  2815: jump @78 if t0 == a2\n      : @77 (gas: 1)\n  2818: jump @194\n      : @78 (gas: 1)\n  2821: t0 = 50, jump @1224\n      : @79 [@dyn 25] (gas: 4)\n  2826: a0 = u64 [s1 + 0x68]\n  2829: a0 = a0 <u 0x20\n  2832: u64 [s1 + 0xb8] = a0\n  2836: jump @91 if a3 == 0\n      : @80 (gas: 5)\n  2840: u64 [s1 + 0xf0] = a4\n  2844: u64 [s1 + 0xf8] = ra\n  2848: u64 [s1 + 0x100] = a5\n  2852: u64 [s1 + 0x110] = t2\n  2856: t0 = 52, jump @1225\n      : @81 [@dyn 26] (gas: 1)\n  2861: ra = 54, jump @19\n      : @82 [@dyn 27] (gas: 2)\n  2866: a1 = i32 [0x20124]\n  2871: jump @84 if a1 >u 31\n      : @83 (gas: 2)\n  2875: u32 [0x20124] = 0x20\n  2881: fallthrough\n      : @84 (gas: 11)\n  2882: a0 = sp + 0xffffffffffffffe0\n  2885: a2 = a0 & 0xffffffffffffffe0\n  2888: u64 [s1 + 0x108] = a2\n  2892: sp = a2\n  2894: a0 = 0x20130\n  2899: i32 a0 = a0 + 0\n  2901: i32 a2 = a2 + 0\n  2903: a1 = 0x20\n  2906: ra = 0x38\n  2909: ecalli 7 // 'hash_keccak_256'\n  2911: fallthrough\n      : @85 [@dyn 28] (gas: 15)\n  2912: a0 = u64 [s1 + 0x68]\n  2915: a1 = a0 + 0x1f\n  2918: a0 = a1 <u a0\n  2921: a5 = u64 [s1 + 0xd0]\n  2925: a2 = a5 + a0\n  2928: a3 = a2 <u a5\n  2931: a3 = a0 if a0 == 0\n  2934: a4 = u64 [s1 + 0x60]\n  2937: a3 = a3 + a4\n  2940: u64 [s1 + 0xe8] = a3\n  2944: a3 = a3 << 0x3b\n  2947: a4 = a2 >> 0x5\n  2950: a4 = a4 | a3\n  2953: a0 = u64 [s1 + 0x108]\n  2957: t0 = 58, jump @1232\n      : @86 [@dyn 29] (gas: 57)\n  2962: a1 = u64 [s1 + 0xb8]\n  2966: a1 = 0 if a5 != 0\n  2968: a3 = u64 [s1 + 0xc0]\n  2972: a1 = 0 if a3 != 0\n  2974: a4 = 0 if a1 != 0\n  2976: a0 = 0 if a1 != 0\n  2978: t0 = t2 + a0\n  2981: a0 = t0 <u t2\n  2984: a5 = a2 + a0\n  2987: a4 = a4 + a5\n  2990: u64 [s1 + 0x118] = a4\n  2994: a5 = a4 ^ a2\n  2997: a3 = a4 <u a2\n  3000: a3 = a0 if a5 == 0\n  3003: u64 [s1 + 0xe0] = a3\n  3007: a0 = u64 [s1 + 0xf8]\n  3011: ra = a0 + 0x1f\n  3014: a4 = ra <u a0\n  3017: a3 = u64 [s1 + 0xf0]\n  3021: a0 = a3 + a4\n  3024: a5 = a0 <u a3\n  3027: a5 = a4 if a4 == 0\n  3030: t1 = u64 [s1 + 0x110]\n  3034: t1 = t1 + a5\n  3037: a4 = t1 << 0x3b\n  3040: a3 = a0 >> 0x5\n  3043: a3 = a3 | a4\n  3046: a0 = a0 << 0x3b\n  3049: a4 = ra >> 0x5\n  3052: a0 = a0 | a4\n  3055: a0 = a0 + t2\n  3058: u64 [s1 + 0xf8] = a0\n  3062: a0 = a0 <u t2\n  3065: t2 = t0\n  3067: a4 = a2 + a0\n  3070: a4 = a4 + a3\n  3073: a3 = a4 ^ a2\n  3076: u64 [s1 + 0xf0] = a4\n  3080: a2 = a4 <u a2\n  3083: a2 = a0 if a3 == 0\n  3086: a4 = u64 [s1 + 0xe8]\n  3090: a0 = u64 [s1 + 0x60]\n  3093: a0 = a4 <u a0\n  3096: a3 = u64 [s1 + 0xc8]\n  3100: a0 = a0 + a3\n  3103: a3 = a4 >> 0x5\n  3106: a4 = a0 << 0x3b\n  3109: a3 = a3 | a4\n  3112: a4 = u64 [s1 + 0x108]\n  3116: t0 = u64 [a4]\n  3118: a4 = u64 [a4 + 0x8]\n  3121: a0 = a0 >> 0x5\n  3124: a3 = 0 if a1 != 0\n  3126: a0 = 0 if a1 != 0\n  3128: a1 = reverse a4\n  3130: a4 = reverse t0\n  3132: t0 = 60, jump @1234\n      : @87 [@dyn 30] (gas: 24)\n  3137: t0 = a0 + a3\n  3140: a0 = u64 [s1 + 0x110]\n  3144: a0 = t1 <u a0\n  3147: a3 = u64 [s1 + 0x100]\n  3151: a0 = a0 + a3\n  3154: a3 = t1 >> 0x5\n  3157: a5 = a0 << 0x3b\n  3160: a3 = a3 | a5\n  3163: a0 = a0 >> 0x5\n  3166: a0 = a0 + a4\n  3169: a4 = u64 [s1 + 0x118]\n  3173: a3 = a3 + a1\n  3176: a1 = a3 <u a1\n  3179: a0 = a0 + a1\n  3182: a2 = a2 + a3\n  3185: u64 [s1 + 0xe8] = a2\n  3189: a1 = a2 <u a3\n  3192: a0 = a0 + a1\n  3195: u64 [s1 + 0xe0] = a0\n  3199: a0 = sp + 0xffffffffffffffe0\n  3202: t1 = a0 & 0xffffffffffffffe0\n  3205: sp = t1\n  3207: u64 [s1 + 0xd8] = t1\n  3211: fallthrough\n      : @88 (gas: 20)\n  3212: a0 = u64 [s1 + 0xf8]\n  3216: a0 = t2 <u a0\n  3219: a2 = u64 [s1 + 0xf0]\n  3223: a1 = a4 ^ a2\n  3226: a2 = a4 <u a2\n  3229: a2 = a0 if a1 == 0\n  3232: a5 = u64 [s1 + 0xe8]\n  3236: a0 = ra <u a5\n  3239: a3 = u64 [s1 + 0xe0]\n  3243: a1 = t0 ^ a3\n  3246: a3 = t0 <u a3\n  3249: a3 = a0 if a1 == 0\n  3252: a0 = ra ^ a5\n  3255: a0 = a0 | a1\n  3258: a3 = a2 if a0 == 0\n  3261: u64 [t1] = t2\n  3263: u64 [t1 + 0x8] = a4\n  3266: u64 [t1 + 0x10] = ra\n  3269: u64 [t1 + 0x18] = t0\n  3272: jump @91 if a3 == 0\n      : @89 (gas: 11)\n  3275: u64 [s1 + 1816] = 0\n  3279: u64 [s1 + 1808] = 0\n  3283: u64 [s1 + 1800] = 0\n  3287: u64 [s1 + 1792] = 0\n  3291: a1 = s1 + 0x700\n  3295: a0 = t1\n  3297: u64 [s1 + 0x110] = t2\n  3301: u64 [s1 + 0x118] = a4\n  3305: u64 [s1 + 0x108] = t0\n  3309: u64 [s1 + 0x100] = ra\n  3313: ra = 62, jump @25\n      : @90 [@dyn 31] (gas: 15)\n  3318: t1 = u64 [s1 + 0xd8]\n  3322: t0 = u64 [s1 + 0x108]\n  3326: a4 = u64 [s1 + 0x118]\n  3330: t2 = u64 [s1 + 0x110]\n  3334: t2 = t2 + 0x1\n  3337: a0 = t2 <u 0x1\n  3340: a4 = a4 + a0\n  3343: a0 = t2 | a4\n  3346: a0 = a0 <u 0x1\n  3349: a1 = u64 [s1 + 0x100]\n  3353: a0 = a0 + a1\n  3356: a1 = a0 <u a1\n  3359: t0 = t0 + a1\n  3362: ra = a0\n  3364: jump @88\n      : @91 (gas: 21)\n  3367: a0 = u64 [s1 + 0xb8]\n  3371: a0 = a0 ^ 0x1\n  3374: a5 = u64 [s1 + 0xd0]\n  3378: a1 = u64 [s1 + 0x58]\n  3381: a0 = a1 if a5 != 0\n  3384: a1 = u64 [s1 + 0x90]\n  3388: a2 = u64 [s1 + 0xc0]\n  3392: a0 = a1 if a2 != 0\n  3395: t2 = u64 [s1 + 0xc8]\n  3399: a2 = a5 | t2\n  3402: a1 = u64 [s1 + 0x60]\n  3405: t1 = a1 >> 0x3f\n  3408: t2 = t2 << 0x1\n  3411: t0 = a5 >> 0x3f\n  3414: a3 = a1 << 0x1\n  3417: u64 [s1 + 0x58] = a3\n  3420: a3 = u64 [s1 + 0x68]\n  3423: ra = a3 >> 0x3f\n  3426: a5 = a5 << 0x1\n  3429: a4 = a3 << 0x1\n  3432: jump @100 if a0 == 0\n      : @92 (gas: 16)\n  3436: u64 [s1 + 0x20] = a2\n  3439: u64 [s1 + 0x40] = a5\n  3442: u64 [s1 + 0x48] = t0\n  3445: u64 [s1 + 0x28] = ra\n  3448: u64 [s1 + 0x30] = t2\n  3451: u64 [s1 + 0x38] = t1\n  3454: u64 [s1 + 0x50] = a4\n  3457: a3 = a3 & 0xffffffffffffffe0\n  3460: u64 [s1 + 0x90] = a3\n  3464: u64 [s1 + 952] = 0\n  3468: u64 [s1 + 944] = 0\n  3472: u64 [s1 + 936] = 0\n  3476: a1 = s1 + 0x3a0\n  3480: u64 [s1 + 928] = 0x1\n  3485: a0 = 0\n  3487: ra = 64, jump @19\n      : @93 [@dyn 32] (gas: 7)\n  3492: a0 = sp + 0xffffffffffffffe0\n  3495: a0 = a0 & 0xffffffffffffffe0\n  3498: u64 [s1 + 0xf0] = a0\n  3502: sp = a0\n  3504: a1 = 0x20\n  3507: a0 = 0\n  3509: ra = 66, jump @31\n      : @94 [@dyn 33] (gas: 35)\n  3514: a1 = sp + 0xffffffffffffffe0\n  3517: a1 = a1 & 0xffffffffffffffe0\n  3520: u64 [s1 + 0xe8] = a1\n  3524: sp = a1\n  3526: i32 a0 = a0 + 0\n  3528: i32 a2 = a1 + 0\n  3530: a1 = 0x20\n  3533: ecalli 7 // 'hash_keccak_256'\n  3535: u64 [s1 + 280] = 0x20\n  3540: a5 = 0\n  3542: u64 [s1 + 272] = 0\n  3546: u64 [s1 + 264] = 0\n  3550: a4 = 0\n  3552: ra = 0\n  3554: u64 [s1 + 248] = 0\n  3558: u64 [s1 + 256] = 0\n  3562: a3 = u64 [s1 + 0xe8]\n  3566: a0 = u64 [a3 + 0x18]\n  3569: a1 = u64 [a3 + 0x10]\n  3572: a2 = u64 [a3 + 0x8]\n  3575: t0 = u64 [a3]\n  3577: t1 = reverse a0\n  3579: a1 = reverse a1\n  3581: a3 = reverse a2\n  3583: a2 = reverse t0\n  3585: t0 = a2\n  3587: a0 = u64 [s1 + 0xf0]\n  3591: u64 [a0 + 0x18] = a2\n  3594: u64 [s1 + 0xd0] = a3\n  3598: u64 [a0 + 0x10] = a3\n  3601: u64 [s1 + 0xe8] = a1\n  3605: u64 [a0 + 0x8] = a1\n  3608: a3 = t1\n  3610: u64 [a0] = t1\n  3612: fallthrough\n      : @95 (gas: 25)\n  3613: t2 = t0\n  3615: t1 = a3\n  3617: a0 = u64 [s1 + 0x90]\n  3621: u64 [s1 + 0xe0] = a4\n  3625: a0 = a4 <u a0\n  3628: a4 = a0 ^ 0x1\n  3631: u64 [s1 + 0xd8] = ra\n  3635: a4 = 0x1 if ra != 0\n  3638: a0 = u64 [s1 + 0x100]\n  3642: a2 = u64 [s1 + 0xf8]\n  3646: a0 = a0 | a2\n  3649: a4 = 0x1 if a0 != 0\n  3652: a1 = u64 [s1 + 0xb0]\n  3656: a0 = u64 [s1 + 0x118]\n  3660: a1 = a1 + a0\n  3663: a3 = u64 [s1 + 0xa8]\n  3667: t0 = a5\n  3669: a3 = a3 + a5\n  3672: a2 = u64 [s1 + 0x98]\n  3676: a0 = u64 [s1 + 0x110]\n  3680: a2 = a2 + a0\n  3683: a0 = u64 [s1 + 0xa0]\n  3687: a5 = u64 [s1 + 0x108]\n  3691: a0 = a0 + a5\n  3694: jump @102 if a4 != 0\n      : @96 (gas: 23)\n  3698: a4 = u64 [s1 + 0x118]\n  3702: a4 = a1 <u a4\n  3705: ra = a3 + a4\n  3708: a3 = t0\n  3710: t0 = ra ^ t0\n  3713: a5 = ra <u a3\n  3716: a5 = a4 if t0 == 0\n  3719: a5 = a5 + a2\n  3722: t0 = a5 <u a2\n  3725: a4 = u64 [s1 + 0x110]\n  3729: a2 = a2 <u a4\n  3732: a0 = a0 + a2\n  3735: a0 = a0 + t0\n  3738: a2 = a1 | a5\n  3741: a0 = ra | a0\n  3744: a2 = a2 | a0\n  3747: a2 = a2 >> 0x20\n  3750: a0 = a0 | a5\n  3753: a0 = a0 << 0x20\n  3756: a0 = a0 | a2\n  3759: u64 [s1 + 0xc8] = t1\n  3763: u64 [s1 + 0xc0] = t2\n  3767: jump @178 if a0 != 0\n      : @97 (gas: 3)\n  3771: a0 = s1 + 0x1e0\n  3775: u64 [s1 + 0xb8] = a3\n  3779: ra = 68, jump @17\n      : @98 [@dyn 34] (gas: 12)\n  3784: a0 = u64 [s1 + 0x1f8]\n  3788: a1 = u64 [s1 + 0x1f0]\n  3792: a2 = u64 [s1 + 0x1e8]\n  3796: a3 = u64 [s1 + 0x1e0]\n  3800: a4 = s1 + 0x700\n  3804: u64 [a4 + 0x38] = a0\n  3807: u64 [a4 + 0x30] = a1\n  3810: u64 [a4 + 0x28] = a2\n  3813: u64 [a4 + 0x20] = a3\n  3816: a1 = s1 + 0x720\n  3820: a0 = u64 [s1 + 0xf0]\n  3824: ra = 70, jump @25\n      : @99 [@dyn 35] (gas: 57)\n  3829: ra = u64 [s1 + 0xc8]\n  3833: ra = ra + 0x1\n  3836: a0 = ra <u 0x1\n  3839: t0 = u64 [s1 + 0xe8]\n  3843: t0 = t0 + a0\n  3846: a0 = ra | t0\n  3849: a0 = a0 <u 0x1\n  3852: a1 = u64 [s1 + 0xd0]\n  3856: t1 = a1 + a0\n  3859: a1 = t1 <u a1\n  3862: a0 = u64 [s1 + 0xc0]\n  3866: a0 = a0 + a1\n  3869: a1 = u64 [s1 + 0x118]\n  3873: a2 = a1 + 0x20\n  3876: u64 [s1 + 0xc8] = a2\n  3880: a3 = a2 <u a1\n  3883: a1 = u64 [s1 + 0xb8]\n  3887: a2 = a1 + a3\n  3890: u64 [s1 + 0xc0] = a2\n  3894: a4 = a2 <u a1\n  3897: a4 = a3 if a3 == 0\n  3900: a1 = u64 [s1 + 0x110]\n  3904: t2 = a1 + a4\n  3907: a4 = t2 <u a1\n  3910: a1 = u64 [s1 + 0x108]\n  3914: a1 = a1 + a4\n  3917: u64 [s1 + 0x108] = a1\n  3921: a1 = u64 [s1 + 0xe0]\n  3925: a4 = a1 + 0x20\n  3928: a5 = a4 <u a1\n  3931: a2 = u64 [s1 + 0xd8]\n  3935: a1 = a2 + a5\n  3938: a2 = a1 <u a2\n  3941: a2 = a5 if a5 == 0\n  3944: a3 = u64 [s1 + 0xf8]\n  3948: a2 = a2 + a3\n  3951: a5 = a2 <u a3\n  3954: a3 = u64 [s1 + 0x100]\n  3958: a3 = a3 + a5\n  3961: u64 [s1 + 0x100] = a3\n  3965: a3 = t0\n  3967: u64 [s1 + 0xe8] = a3\n  3971: a5 = u64 [s1 + 0xf0]\n  3975: u64 [a5 + 0x8] = a3\n  3978: a3 = ra\n  3980: u64 [a5] = ra\n  3982: u64 [a5 + 0x10] = t1\n  3985: t0 = a0\n  3987: u64 [a5 + 0x18] = a0\n  3990: u64 [s1 + 0xd0] = t1\n  3994: a0 = u64 [s1 + 0xc8]\n  3998: u64 [s1 + 0x118] = a0\n  4002: a5 = u64 [s1 + 0xc0]\n  4006: u64 [s1 + 0x110] = t2\n  4010: ra = a1\n  4012: u64 [s1 + 0xf8] = a2\n  4016: jump @95\n      : @100 (gas: 4)\n  4019: a0 = a3 | a1\n  4022: a0 = a0 | a2\n  4025: a2 = u64 [s1 + 0xb0]\n  4029: jump @116 if a0 != 0\n      : @101 (gas: 6)\n  4033: u64 [s1 + 0x50] = a4\n  4036: u64 [s1 + 256] = 0\n  4040: u64 [s1 + 248] = 0\n  4044: u64 [s1 + 264] = 0\n  4048: u64 [s1 + 272] = 0\n  4052: jump @119\n      : @102 (gas: 11)\n  4055: ra = t0\n  4057: t1 = u64 [s1 + 0x68]\n  4060: a4 = u64 [s1 + 0x90]\n  4064: a4 = a4 ^ t1\n  4067: a5 = u64 [s1 + 0x60]\n  4070: a4 = a4 | a5\n  4073: a5 = u64 [s1 + 0x20]\n  4076: a4 = a4 | a5\n  4079: a5 = u64 [s1 + 0x48]\n  4082: t0 = u64 [s1 + 0x40]\n  4085: jump @115 if a4 == 0\n      : @103 (gas: 13)\n  4089: a4 = u64 [s1 + 0x118]\n  4093: a4 = a1 <u a4\n  4096: a3 = a3 + a4\n  4099: t0 = a3 ^ ra\n  4102: a5 = a3 <u ra\n  4105: a5 = a4 if t0 == 0\n  4108: a5 = a5 + a2\n  4111: t0 = a5 <u a2\n  4114: a4 = u64 [s1 + 0x110]\n  4118: a2 = a2 <u a4\n  4121: a0 = a0 + a2\n  4124: a0 = a0 + t0\n  4127: t0 = 72, jump @1227\n      : @104 [@dyn 36] (gas: 1)\n  4132: jump @178 if a0 != 0\n      : @105 (gas: 2)\n  4136: a0 = s1 + 0x380\n  4140: ra = 74, jump @17\n      : @106 [@dyn 37] (gas: 11)\n  4145: a1 = s1 + 0x300\n  4149: a0 = u64 [a1 + 0x98]\n  4153: u64 [s1 + 0x110] = a0\n  4157: a0 = u64 [a1 + 0x90]\n  4161: u64 [s1 + 0x108] = a0\n  4165: a0 = u64 [a1 + 0x88]\n  4169: u64 [s1 + 0x100] = a0\n  4173: a0 = u64 [a1 + 0x80]\n  4177: u64 [s1 + 0xf8] = a0\n  4181: a0 = u64 [s1 + 0x68]\n  4184: t0 = 76, jump @1230\n      : @107 [@dyn 38] (gas: 1)\n  4189: ra = 78, jump @1246\n      : @108 [@dyn 39] (gas: 6)\n  4194: u64 [s1 + 0xe8] = a0\n  4198: u64 [s1 + 0xd0] = a1\n  4202: a0 = 0xffffffffffffffff\n  4205: a1 = 0xffffffffffffffff\n  4208: a2 = u64 [s1 + 0x118]\n  4212: ra = 80, jump @1241\n      : @109 [@dyn 40] (gas: 1)\n  4217: t0 = 82, jump @1229\n      : @110 [@dyn 41] (gas: 1)\n  4222: ra = 84, jump @1241\n      : @111 [@dyn 42] (gas: 1)\n  4227: t0 = 86, jump @1205\n      : @112 [@dyn 43] (gas: 4)\n  4232: a0 = u64 [s1 + 0xf8]\n  4236: a0 = a0 & ~a3\n  4239: a2 = u64 [s1 + 0x100]\n  4243: t0 = 88, jump @1235\n      : @113 [@dyn 44] (gas: 8)\n  4248: a4 = s1 + 0x700\n  4252: u64 [a4 + 0x58] = a3\n  4255: u64 [a4 + 0x50] = a2\n  4258: u64 [a4 + 0x48] = a1\n  4261: u64 [a4 + 0x40] = a0\n  4264: a1 = s1 + 0x740\n  4268: a0 = u64 [s1 + 0xf0]\n  4272: ra = 90, jump @25\n      : @114 [@dyn 45] (gas: 3)\n  4277: t0 = u64 [s1 + 0x40]\n  4280: a5 = u64 [s1 + 0x48]\n  4283: fallthrough\n      : @115 (gas: 22)\n  4284: a0 = u64 [s1 + 0x38]\n  4287: a1 = u64 [s1 + 0x30]\n  4290: a0 = a0 | a1\n  4293: a1 = u64 [s1 + 0x58]\n  4296: a1 = a1 | a5\n  4299: a2 = u64 [s1 + 0x28]\n  4302: a2 = t0 | a2\n  4305: a3 = u64 [s1 + 0x50]\n  4308: a3 = a3 + 0x1\n  4311: u64 [s1 + 1912] = 0\n  4315: u64 [s1 + 1904] = 0\n  4319: u64 [s1 + 1896] = 0\n  4323: a5 = s1 + 0x700\n  4327: u64 [a5 + 96] = 0x1\n  4331: u64 [a5 + 0x80] = a3\n  4335: u64 [a5 + 0x88] = a2\n  4339: u64 [a5 + 0x90] = a1\n  4343: u64 [a5 + 0x98] = a0\n  4347: a0 = s1 + 0x760\n  4351: a1 = s1 + 0x780\n  4355: ra = 0x68\n  4358: jump @25\n      : @116 (gas: 9)\n  4361: a0 = u64 [s1 + 0xa0]\n  4365: a1 = u64 [s1 + 0x98]\n  4369: a0 = a0 | a1\n  4372: a1 = 0xffffffe0\n  4382: a1 = a2 <u a1\n  4385: a3 = u64 [s1 + 0xa8]\n  4389: a1 = 0 if a3 != 0\n  4391: a1 = 0 if a0 != 0\n  4393: jump @178 if a1 == 0\n      : @117 (gas: 9)\n  4397: u64 [s1 + 0x50] = a4\n  4400: i32 a1 = a2 + 0x20\n  4403: a0 = s1 + 0x3c0\n  4407: u64 [s1 + 0x38] = t1\n  4410: u64 [s1 + 0x30] = t2\n  4413: u64 [s1 + 0x28] = ra\n  4416: u64 [s1 + 0x48] = t0\n  4419: u64 [s1 + 0x40] = a5\n  4422: ra = 92, jump @17\n      : @118 [@dyn 46] (gas: 17)\n  4427: a5 = u64 [s1 + 0x40]\n  4430: t0 = u64 [s1 + 0x48]\n  4433: ra = u64 [s1 + 0x28]\n  4436: t2 = u64 [s1 + 0x30]\n  4439: t1 = u64 [s1 + 0x38]\n  4442: a3 = u64 [s1 + 0x68]\n  4445: a1 = s1 + 0x300\n  4449: a0 = u64 [a1 + 0xd8]\n  4453: a2 = s1 + 0x100\n  4457: u64 [a2 + 0x10] = a0\n  4460: a0 = u64 [a1 + 0xd0]\n  4464: u64 [a2 + 0x8] = a0\n  4467: a0 = u64 [a1 + 0xc8]\n  4471: u64 [s1 + 0xf8] = a0\n  4475: a0 = u64 [a1 + 0xc0]\n  4479: u64 [a2] = a0\n  4481: fallthrough\n      : @119 (gas: 13)\n  4482: a0 = u64 [s1 + 0x58]\n  4485: a0 = a0 | t0\n  4488: u64 [s1 + 0xf0] = a0\n  4492: a0 = t2 | t1\n  4495: u64 [s1 + 0xe8] = a0\n  4499: a0 = a5 | ra\n  4502: u64 [s1 + 0xe0] = a0\n  4506: a1 = a3 << 0x3\n  4509: u64 [s1 + 0x118] = a1\n  4513: i32 a2 = 0x80 - a1\n  4517: a0 = 0xffffffffffffffff\n  4520: a1 = 0xffffffffffffffff\n  4523: ra = 94, jump @1246\n      : @120 [@dyn 47] (gas: 7)\n  4528: u64 [s1 + 0xc0] = a0\n  4532: u64 [s1 + 0xd8] = a1\n  4536: a0 = u64 [s1 + 0x68]\n  4539: i32 a2 = a0 << 0x3\n  4542: a0 = 0xffffffffffffffff\n  4545: a1 = 0xffffffffffffffff\n  4548: ra = 96, jump @1241\n      : @121 [@dyn 48] (gas: 10)\n  4553: u64 [s1 + 0xd0] = a0\n  4557: u64 [s1 + 0xc8] = a1\n  4561: a1 = u64 [s1 + 0xc0]\n  4565: a0 = a0 | a1\n  4568: u64 [s1 + 0xc0] = a0\n  4572: a0 = u64 [s1 + 0x118]\n  4576: i32 a2 = a0 + 0xffffffffffffff80\n  4579: a0 = 0xffffffffffffffff\n  4582: a1 = 0xffffffffffffffff\n  4585: ra = 98, jump @1241\n      : @122 [@dyn 49] (gas: 7)\n  4590: a4 = u64 [s1 + 0x118]\n  4594: a2 = a4 <u 0x80\n  4598: a3 = u64 [s1 + 0xc0]\n  4602: a0 = a3 if a2 != 0\n  4605: a5 = u64 [s1 + 0xc8]\n  4609: a3 = u64 [s1 + 0xd8]\n  4613: t0 = 100, jump @1220\n      : @123 [@dyn 50] (gas: 2)\n  4618: a4 = u64 [s1 + 0xd0]\n  4622: t0 = 102, jump @1217\n      : @124 [@dyn 51] (gas: 20)\n  4627: a4 = u64 [s1 + 0x50]\n  4630: a0 = a0 | a4\n  4633: a4 = u64 [s1 + 0xe0]\n  4637: a1 = a1 | a4\n  4640: a4 = u64 [s1 + 0xe8]\n  4644: a3 = a3 | a4\n  4647: a4 = u64 [s1 + 0xf0]\n  4651: a2 = a2 | a4\n  4654: a5 = s1 + 0x700\n  4658: u64 [a5 + 160] = 0x1\n  4663: u64 [a5 + 0xd0] = a2\n  4667: u64 [a5 + 0xd8] = a3\n  4671: u64 [a5 + 0xc8] = a1\n  4675: u64 [a5 + 0xc0] = a0\n  4679: u64 [s1 + 1976] = 0\n  4683: u64 [s1 + 1968] = 0\n  4687: u64 [s1 + 1960] = 0\n  4691: a0 = s1 + 0x7a0\n  4695: a1 = s1 + 0x7c0\n  4699: ra = 104, jump @25\n      : @125 [@dyn 52] (gas: 12)\n  4704: a1 = u64 [s1 + 0x88]\n  4708: a3 = u64 [s1 + 0x78]\n  4711: a0 = a1 | a3\n  4714: a2 = u64 [s1 + 0x80]\n  4718: a4 = u64 [s1 + 0x70]\n  4721: a2 = a2 | a4\n  4724: a0 = a0 | a2\n  4727: a0 = a0 >> 0x20\n  4730: a2 = a2 | a3\n  4733: a2 = a2 << 0x20\n  4736: a0 = a0 | a2\n  4739: jump @178 if a0 != 0\n      : @126 (gas: 2)\n  4743: a0 = s1 + 0x360\n  4747: ra = 106, jump @17\n      : @127 [@dyn 53] (gas: 17)\n  4752: a0 = s1 + 0x300\n  4756: a3 = u64 [a0 + 0x78]\n  4759: a2 = u64 [a0 + 0x70]\n  4762: a1 = u64 [a0 + 0x68]\n  4765: a0 = a3 >u 0\n  4767: a4 = a2 >u 0\n  4769: a4 = a0 if a3 != 0\n  4772: u64 [s1 + 0x98] = a1\n  4776: a0 = a1 >u 0\n  4778: u64 [s1 + 0x90] = a2\n  4782: u64 [s1 + 0x68] = a3\n  4785: a2 = a2 | a3\n  4788: u64 [s1 + 0xb8] = a0\n  4792: u64 [s1 + 0xc0] = a4\n  4796: u64 [s1 + 0xd0] = a2\n  4800: a0 = a4 if a2 != 0\n  4803: jump @200 if a0 != 0\n      : @128 (gas: 9)\n  4807: a0 = u64 [s1 + 0x360]\n  4811: u64 [s1 + 0xa0] = a0\n  4815: u64 [s1 + 2040] = 0\n  4819: u64 [s1 + 2032] = 0\n  4823: u64 [s1 + 2024] = 0\n  4827: u64 [s1 + 2016] = 0x2\n  4832: a0 = s1 + 0x340\n  4836: a1 = s1 + 0x7e0\n  4840: ra = 108, jump @21\n      : @129 [@dyn 54] (gas: 6)\n  4845: a4 = s1 + 0x300\n  4849: a0 = u64 [a4 + 0x50]\n  4852: a1 = u64 [a4 + 0x48]\n  4855: a2 = u64 [a4 + 0x40]\n  4858: a3 = u64 [a4 + 0x58]\n  4861: t0 = 110, jump @1213\n      : @130 [@dyn 55] (gas: 12)\n  4866: t0 = a2 <u 0x1\n  4869: ra = a1 & 0x7f\n  4872: t2 = a5 & a0\n  4875: a4 = a5 & t1\n  4878: ra = a1 if a2 != 0\n  4881: a1 = ra <u 0x20\n  4884: a5 = a5 & a3\n  4887: a2 = a1\n  4889: a2 = 0 if a4 != 0\n  4891: a0 = t2 | a5\n  4894: a2 = 0 if a0 != 0\n  4896: jump @206 if t0 != a2\n      : @131 (gas: 1)\n  4900: t0 = 112, jump @1224\n      : @132 [@dyn 56] (gas: 4)\n  4905: a0 = u64 [s1 + 0xa0]\n  4909: a0 = a0 <u 0x20\n  4912: u64 [s1 + 0xc8] = a0\n  4916: jump @141 if a3 == 0\n      : @133 (gas: 11)\n  4920: u64 [s1 + 0xf0] = a4\n  4924: u64 [s1 + 0xf8] = ra\n  4928: u64 [s1 + 0x100] = a5\n  4932: u64 [s1 + 0x110] = t2\n  4936: u64 [s1 + 824] = 0\n  4940: u64 [s1 + 816] = 0\n  4944: u64 [s1 + 808] = 0\n  4948: a1 = s1 + 0x320\n  4952: u64 [s1 + 800] = 0x2\n  4957: a0 = 0\n  4959: ra = 114, jump @19\n      : @134 [@dyn 57] (gas: 2)\n  4964: a1 = i32 [0x20124]\n  4969: jump @136 if a1 >u 31\n      : @135 (gas: 2)\n  4973: u32 [0x20124] = 0x20\n  4979: fallthrough\n      : @136 (gas: 87)\n  4980: a0 = sp + 0xffffffffffffffe0\n  4983: a2 = a0 & 0xffffffffffffffe0\n  4986: u64 [s1 + 0x108] = a2\n  4990: sp = a2\n  4992: a0 = 0x20130\n  4997: i32 a0 = a0 + 0\n  4999: i32 a2 = a2 + 0\n  5001: a1 = 0x20\n  5004: ecalli 7 // 'hash_keccak_256'\n  5006: a0 = u64 [s1 + 0xa0]\n  5010: a1 = a0 + 0x1f\n  5013: a0 = a1 <u a0\n  5016: a5 = u64 [s1 + 0x98]\n  5020: a2 = a5 + a0\n  5023: a3 = a2 <u a5\n  5026: a3 = a0 if a0 == 0\n  5029: a4 = u64 [s1 + 0x90]\n  5033: a3 = a3 + a4\n  5036: u64 [s1 + 0xe8] = a3\n  5040: a3 = a3 << 0x3b\n  5043: a4 = a2 >> 0x5\n  5046: a4 = a4 | a3\n  5049: a0 = u64 [s1 + 0x108]\n  5053: t0 = u64 [a0 + 0x18]\n  5056: a2 = a2 << 0x3b\n  5059: a0 = u64 [a0 + 0x10]\n  5062: a1 = a1 >> 0x5\n  5065: a2 = a2 | a1\n  5068: t2 = reverse t0\n  5070: a0 = reverse a0\n  5072: a1 = u64 [s1 + 0xc8]\n  5076: a1 = 0 if a5 != 0\n  5078: a3 = u64 [s1 + 0xd0]\n  5082: a1 = 0 if a3 != 0\n  5084: a4 = 0 if a1 != 0\n  5086: a2 = 0 if a1 != 0\n  5088: t0 = t2 + a2\n  5091: a2 = t0 <u t2\n  5094: a5 = a0 + a2\n  5097: a4 = a4 + a5\n  5100: u64 [s1 + 0x118] = a4\n  5104: a5 = a4 ^ a0\n  5107: a3 = a4 <u a0\n  5110: a3 = a2 if a5 == 0\n  5113: u64 [s1 + 0xe0] = a3\n  5117: a2 = u64 [s1 + 0xf8]\n  5121: ra = a2 + 0x1f\n  5124: a4 = ra <u a2\n  5127: a3 = u64 [s1 + 0xf0]\n  5131: a2 = a3 + a4\n  5134: a5 = a2 <u a3\n  5137: a5 = a4 if a4 == 0\n  5140: t1 = u64 [s1 + 0x110]\n  5144: t1 = t1 + a5\n  5147: a4 = t1 << 0x3b\n  5150: a3 = a2 >> 0x5\n  5153: a3 = a3 | a4\n  5156: a2 = a2 << 0x3b\n  5159: a4 = ra >> 0x5\n  5162: a2 = a2 | a4\n  5165: a2 = a2 + t2\n  5168: u64 [s1 + 0xf8] = a2\n  5172: a4 = a2 <u t2\n  5175: t2 = t0\n  5177: a2 = a0 + a4\n  5180: a2 = a2 + a3\n  5183: a3 = a2 ^ a0\n  5186: u64 [s1 + 0xf0] = a2\n  5190: a2 = a2 <u a0\n  5193: a2 = a4 if a3 == 0\n  5196: a4 = u64 [s1 + 0xe8]\n  5200: a0 = u64 [s1 + 0x90]\n  5204: a0 = a4 <u a0\n  5207: a3 = u64 [s1 + 0x68]\n  5210: a0 = a0 + a3\n  5213: a3 = a4 >> 0x5\n  5216: a4 = a0 << 0x3b\n  5219: a3 = a3 | a4\n  5222: a4 = u64 [s1 + 0x108]\n  5226: t0 = u64 [a4]\n  5228: a4 = u64 [a4 + 0x8]\n  5231: a0 = a0 >> 0x5\n  5234: a3 = 0 if a1 != 0\n  5236: a0 = 0 if a1 != 0\n  5238: a1 = reverse a4\n  5240: a4 = reverse t0\n  5242: t0 = 116, jump @1234\n      : @137 [@dyn 58] (gas: 24)\n  5247: t0 = a0 + a3\n  5250: a0 = u64 [s1 + 0x110]\n  5254: a0 = t1 <u a0\n  5257: a3 = u64 [s1 + 0x100]\n  5261: a0 = a0 + a3\n  5264: a3 = t1 >> 0x5\n  5267: a5 = a0 << 0x3b\n  5270: a3 = a3 | a5\n  5273: a0 = a0 >> 0x5\n  5276: a0 = a0 + a4\n  5279: a4 = u64 [s1 + 0x118]\n  5283: a3 = a3 + a1\n  5286: a1 = a3 <u a1\n  5289: a0 = a0 + a1\n  5292: a2 = a2 + a3\n  5295: u64 [s1 + 0xe8] = a2\n  5299: a1 = a2 <u a3\n  5302: a0 = a0 + a1\n  5305: u64 [s1 + 0xe0] = a0\n  5309: a0 = sp + 0xffffffffffffffe0\n  5312: t1 = a0 & 0xffffffffffffffe0\n  5315: sp = t1\n  5317: u64 [s1 + 0xd8] = t1\n  5321: fallthrough\n      : @138 (gas: 20)\n  5322: a0 = u64 [s1 + 0xf8]\n  5326: a0 = t2 <u a0\n  5329: a2 = u64 [s1 + 0xf0]\n  5333: a1 = a4 ^ a2\n  5336: a2 = a4 <u a2\n  5339: a2 = a0 if a1 == 0\n  5342: a5 = u64 [s1 + 0xe8]\n  5346: a0 = ra <u a5\n  5349: a3 = u64 [s1 + 0xe0]\n  5353: a1 = t0 ^ a3\n  5356: a3 = t0 <u a3\n  5359: a3 = a0 if a1 == 0\n  5362: a0 = ra ^ a5\n  5365: a0 = a0 | a1\n  5368: a3 = a2 if a0 == 0\n  5371: u64 [t1] = t2\n  5373: u64 [t1 + 0x8] = a4\n  5376: u64 [t1 + 0x10] = ra\n  5379: u64 [t1 + 0x18] = t0\n  5382: jump @141 if a3 == 0\n      : @139 (gas: 16)\n  5385: a0 = s1 + 0x1000\n  5389: u64 [a0 + 4294965272] = 0\n  5393: a0 = s1 + 0x1000\n  5397: u64 [a0 + 4294965264] = 0\n  5401: a0 = s1 + 0x1000\n  5405: u64 [a0 + 4294965256] = 0\n  5409: a0 = s1 + 0x1000\n  5413: u64 [a0 + 4294965248] = 0\n  5417: a1 = s1 + 0x7ff\n  5421: a1 = a1 + 0x1\n  5424: a0 = t1\n  5426: u64 [s1 + 0x110] = t2\n  5430: u64 [s1 + 0x118] = a4\n  5434: u64 [s1 + 0x108] = t0\n  5438: u64 [s1 + 0x100] = ra\n  5442: ra = 118, jump @25\n      : @140 [@dyn 59] (gas: 15)\n  5447: t1 = u64 [s1 + 0xd8]\n  5451: t0 = u64 [s1 + 0x108]\n  5455: a4 = u64 [s1 + 0x118]\n  5459: t2 = u64 [s1 + 0x110]\n  5463: t2 = t2 + 0x1\n  5466: a0 = t2 <u 0x1\n  5469: a4 = a4 + a0\n  5472: a0 = t2 | a4\n  5475: a0 = a0 <u 0x1\n  5478: a1 = u64 [s1 + 0x100]\n  5482: a0 = a0 + a1\n  5485: a1 = a0 <u a1\n  5488: t0 = t0 + a1\n  5491: ra = a0\n  5493: jump @138\n      : @141 (gas: 9)\n  5496: a0 = u64 [s1 + 0xc8]\n  5500: a0 = a0 ^ 0x1\n  5503: a5 = u64 [s1 + 0x98]\n  5507: a1 = u64 [s1 + 0xb8]\n  5511: a0 = a1 if a5 != 0\n  5514: a1 = u64 [s1 + 0xc0]\n  5518: a2 = u64 [s1 + 0xd0]\n  5522: a0 = a1 if a2 != 0\n  5525: jump @151 if a0 == 0\n      : @142 (gas: 10)\n  5529: a0 = u64 [s1 + 0xa0]\n  5533: a0 = a0 & 0xffffffffffffffe0\n  5536: u64 [s1 + 0xa8] = a0\n  5540: u64 [s1 + 760] = 0\n  5544: u64 [s1 + 752] = 0\n  5548: u64 [s1 + 744] = 0\n  5552: a1 = s1 + 0x2e0\n  5556: u64 [s1 + 736] = 0x2\n  5561: a0 = 0\n  5563: ra = 120, jump @19\n      : @143 [@dyn 60] (gas: 7)\n  5568: a0 = sp + 0xffffffffffffffe0\n  5571: a0 = a0 & 0xffffffffffffffe0\n  5574: u64 [s1 + 0x100] = a0\n  5578: sp = a0\n  5580: a1 = 0x20\n  5583: a0 = 0\n  5585: ra = 122, jump @31\n      : @144 [@dyn 61] (gas: 35)\n  5590: a1 = sp + 0xffffffffffffffe0\n  5593: a1 = a1 & 0xffffffffffffffe0\n  5596: u64 [s1 + 0xf8] = a1\n  5600: sp = a1\n  5602: i32 a0 = a0 + 0\n  5604: i32 a2 = a1 + 0\n  5606: a1 = 0x20\n  5609: ecalli 7 // 'hash_keccak_256'\n  5611: u64 [s1 + 272] = 0x20\n  5616: u64 [s1 + 264] = 0\n  5620: t1 = 0\n  5622: u64 [s1 + 280] = 0\n  5626: a4 = 0\n  5628: a5 = 0\n  5630: a2 = 0\n  5632: a3 = 0\n  5634: a0 = u64 [s1 + 0xf8]\n  5638: t2 = u64 [a0 + 0x18]\n  5641: a1 = u64 [a0 + 0x10]\n  5644: ra = u64 [a0 + 0x8]\n  5647: t0 = u64 [a0]\n  5649: t2 = reverse t2\n  5651: a1 = reverse a1\n  5653: ra = reverse ra\n  5655: t0 = reverse t0\n  5657: u64 [s1 + 0xe8] = t0\n  5661: a0 = u64 [s1 + 0x100]\n  5665: u64 [a0 + 0x18] = t0\n  5668: u64 [s1 + 0xc0] = ra\n  5672: u64 [a0 + 0x10] = ra\n  5675: u64 [s1 + 0xf0] = a1\n  5679: u64 [a0 + 0x8] = a1\n  5682: t0 = t2\n  5684: u64 [a0] = t2\n  5686: fallthrough\n      : @145 (gas: 24)\n  5687: ra = t0\n  5689: a0 = u64 [s1 + 0xa8]\n  5693: u64 [s1 + 0xd0] = a4\n  5697: a0 = a4 <u a0\n  5700: a4 = a0 ^ 0x1\n  5703: u64 [s1 + 0xc8] = a5\n  5707: a4 = 0x1 if a5 != 0\n  5710: u64 [s1 + 0xf8] = a3\n  5714: u64 [s1 + 0xe0] = a2\n  5718: a0 = a2 | a3\n  5721: a4 = 0x1 if a0 != 0\n  5724: a0 = u64 [s1 + 0x88]\n  5728: a1 = u64 [s1 + 0x110]\n  5732: a1 = a1 + a0\n  5735: a3 = u64 [s1 + 0x80]\n  5739: t0 = u64 [s1 + 0x108]\n  5743: t0 = t0 + a3\n  5746: t2 = u64 [s1 + 0x78]\n  5749: u64 [s1 + 0xd8] = t1\n  5753: a2 = t2 + t1\n  5756: t1 = u64 [s1 + 0x70]\n  5759: a5 = u64 [s1 + 0x118]\n  5763: t1 = t1 + a5\n  5766: jump @153 if a4 != 0\n      : @146 (gas: 6)\n  5770: a0 = a1 <u a0\n  5773: a4 = t0 + a0\n  5776: t0 = a4 ^ a3\n  5779: a5 = a4 <u a3\n  5782: a5 = a0 if t0 == 0\n  5785: t0 = 124, jump @1219\n      : @147 [@dyn 62] (gas: 2)\n  5790: u64 [s1 + 0xb8] = ra\n  5794: jump @178 if a0 != 0\n      : @148 (gas: 2)\n  5798: a0 = s1 + 0x280\n  5802: ra = 126, jump @17\n      : @149 [@dyn 63] (gas: 17)\n  5807: a4 = s1 + 0x200\n  5811: a0 = u64 [a4 + 0x98]\n  5815: a1 = u64 [a4 + 0x90]\n  5819: a2 = u64 [a4 + 0x88]\n  5823: a3 = u64 [a4 + 0x80]\n  5827: a4 = s1 + 0x1000\n  5831: u64 [a4 + 0xfffffffffffff838] = a0\n  5835: a0 = s1 + 0x1000\n  5839: u64 [a0 + 0xfffffffffffff830] = a1\n  5843: a0 = s1 + 0x1000\n  5847: u64 [a0 + 0xfffffffffffff828] = a2\n  5851: a0 = s1 + 0x1000\n  5855: u64 [a0 + 0xfffffffffffff820] = a3\n  5859: a1 = s1 + 0x7ff\n  5863: a1 = a1 + 0x21\n  5866: a0 = u64 [s1 + 0x100]\n  5870: ra = 128, jump @25\n      : @150 [@dyn 64] (gas: 57)\n  5876: a3 = u64 [s1 + 0xb8]\n  5880: a3 = a3 + 0x1\n  5883: a0 = a3 <u 0x1\n  5886: t0 = u64 [s1 + 0xf0]\n  5890: t0 = t0 + a0\n  5893: a0 = a3 | t0\n  5896: a0 = a0 <u 0x1\n  5899: a1 = u64 [s1 + 0xc0]\n  5903: t1 = a1 + a0\n  5906: a1 = t1 <u a1\n  5909: a0 = u64 [s1 + 0xe8]\n  5913: a0 = a0 + a1\n  5916: a1 = u64 [s1 + 0x110]\n  5920: a2 = a1 + 0x20\n  5923: u64 [s1 + 0xb8] = a2\n  5927: a1 = a2 <u a1\n  5930: a2 = u64 [s1 + 0x108]\n  5934: a4 = a2 + a1\n  5937: u64 [s1 + 0xb0] = a4\n  5941: a4 = a4 <u a2\n  5944: a4 = a1 if a1 == 0\n  5947: a1 = u64 [s1 + 0xd8]\n  5951: t2 = a1 + a4\n  5954: a4 = t2 <u a1\n  5957: a1 = u64 [s1 + 0x118]\n  5961: a1 = a1 + a4\n  5964: u64 [s1 + 0x118] = a1\n  5968: a1 = u64 [s1 + 0xd0]\n  5972: a4 = a1 + 0x20\n  5975: a5 = a4 <u a1\n  5978: a2 = u64 [s1 + 0xc8]\n  5982: a1 = a2 + a5\n  5985: a2 = a1 <u a2\n  5988: a2 = a5 if a5 == 0\n  5991: a5 = u64 [s1 + 0xe0]\n  5995: a2 = a2 + a5\n  5998: a5 = a2 <u a5\n  6001: ra = u64 [s1 + 0xf8]\n  6005: ra = ra + a5\n  6008: u64 [s1 + 0xf0] = t0\n  6012: a5 = u64 [s1 + 0x100]\n  6016: u64 [a5 + 0x8] = t0\n  6019: t0 = a3\n  6021: u64 [a5] = a3\n  6023: a3 = t1\n  6025: u64 [a5 + 0x10] = a3\n  6028: u64 [s1 + 0xe8] = a0\n  6032: u64 [a5 + 0x18] = a0\n  6035: u64 [s1 + 0xc0] = a3\n  6039: a0 = u64 [s1 + 0xb8]\n  6043: u64 [s1 + 0x110] = a0\n  6047: a3 = ra\n  6049: a0 = u64 [s1 + 0xb0]\n  6053: u64 [s1 + 0x108] = a0\n  6057: t1 = t2\n  6059: a5 = a1\n  6061: jump @145\n      : @151 (gas: 10)\n  6064: a4 = u64 [s1 + 0xa0]\n  6068: a2 = u64 [s1 + 0x90]\n  6072: a0 = a4 | a2\n  6075: a3 = u64 [s1 + 0x68]\n  6078: a1 = a5 | a3\n  6081: a0 = a0 | a1\n  6084: t0 = u64 [s1 + 0x88]\n  6088: t1 = u64 [s1 + 0x80]\n  6092: a1 = u64 [s1 + 0x78]\n  6095: jump @167 if a0 != 0\n      : @152 (gas: 5)\n  6099: u64 [s1 + 256] = 0\n  6103: u64 [s1 + 248] = 0\n  6107: u64 [s1 + 264] = 0\n  6111: u64 [s1 + 272] = 0\n  6115: jump @170\n      : @153 (gas: 12)\n  6118: a4 = u64 [s1 + 0xa8]\n  6122: a5 = u64 [s1 + 0xa0]\n  6126: a4 = a4 ^ a5\n  6129: ra = u64 [s1 + 0x90]\n  6133: a4 = a4 | ra\n  6136: u64 [s1 + 0x118] = a4\n  6140: a5 = u64 [s1 + 0x98]\n  6144: a4 = u64 [s1 + 0x68]\n  6147: a5 = a5 | a4\n  6150: a4 = u64 [s1 + 0x118]\n  6154: a4 = a4 | a5\n  6157: jump @166 if a4 == 0\n      : @154 (gas: 6)\n  6161: a0 = a1 <u a0\n  6164: a4 = t0 + a0\n  6167: t0 = a4 ^ a3\n  6170: a5 = a4 <u a3\n  6173: a5 = a0 if t0 == 0\n  6176: t0 = 130, jump @1219\n      : @155 [@dyn 65] (gas: 1)\n  6182: jump @178 if a0 != 0\n      : @156 (gas: 2)\n  6186: a0 = s1 + 0x2c0\n  6190: ra = 132, jump @17\n      : @157 [@dyn 66] (gas: 11)\n  6196: a1 = s1 + 0x200\n  6200: a0 = u64 [a1 + 0xd8]\n  6204: u64 [s1 + 0x110] = a0\n  6208: a0 = u64 [a1 + 0xd0]\n  6212: u64 [s1 + 0x108] = a0\n  6216: a0 = u64 [a1 + 0xc8]\n  6220: u64 [s1 + 0xf8] = a0\n  6224: a0 = u64 [a1 + 0xc0]\n  6228: u64 [s1 + 0xf0] = a0\n  6232: a0 = u64 [s1 + 0xa0]\n  6236: t0 = 134, jump @1230\n      : @158 [@dyn 67] (gas: 1)\n  6242: ra = 136, jump @1246\n      : @159 [@dyn 68] (gas: 6)\n  6248: u64 [s1 + 0xe8] = a0\n  6252: u64 [s1 + 0xd0] = a1\n  6256: a0 = 0xffffffffffffffff\n  6259: a1 = 0xffffffffffffffff\n  6262: a2 = u64 [s1 + 0x118]\n  6266: ra = 138, jump @1241\n      : @160 [@dyn 69] (gas: 1)\n  6272: t0 = 140, jump @1229\n      : @161 [@dyn 70] (gas: 1)\n  6278: ra = 142, jump @1241\n      : @162 [@dyn 71] (gas: 1)\n  6284: t0 = 144, jump @1205\n      : @163 [@dyn 72] (gas: 4)\n  6290: a0 = u64 [s1 + 0xf0]\n  6294: a0 = a0 & ~a3\n  6297: a2 = u64 [s1 + 0xf8]\n  6301: t0 = 146, jump @1235\n      : @164 [@dyn 73] (gas: 12)\n  6307: a4 = s1 + 0x1000\n  6311: u64 [a4 + 0xfffffffffffff858] = a3\n  6315: a3 = s1 + 0x1000\n  6319: u64 [a3 + 0xfffffffffffff850] = a2\n  6323: a2 = s1 + 0x1000\n  6327: u64 [a2 + 0xfffffffffffff848] = a1\n  6331: a1 = s1 + 0x1000\n  6335: u64 [a1 + 0xfffffffffffff840] = a0\n  6339: a1 = s1 + 0x7ff\n  6343: a1 = a1 + 0x41\n  6346: a0 = u64 [s1 + 0x100]\n  6350: ra = 148, jump @25\n      : @165 [@dyn 74] (gas: 2)\n  6356: ra = u64 [s1 + 0x90]\n  6360: fallthrough\n      : @166 (gas: 36)\n  6361: a0 = ra >> 0x3f\n  6364: a1 = u64 [s1 + 0x68]\n  6367: a1 = a1 << 0x1\n  6370: a0 = a0 | a1\n  6373: a3 = u64 [s1 + 0x98]\n  6377: a1 = a3 >> 0x3f\n  6380: a2 = ra << 0x1\n  6383: a1 = a1 | a2\n  6386: a4 = u64 [s1 + 0xa0]\n  6390: a2 = a4 >> 0x3f\n  6393: a3 = a3 << 0x1\n  6396: a2 = a2 | a3\n  6399: a3 = a4 << 0x1\n  6402: a3 = a3 + 0x1\n  6405: a4 = s1 + 0x1000\n  6409: u64 [a4 + 4294965368] = 0\n  6413: a4 = s1 + 0x1000\n  6417: u64 [a4 + 4294965360] = 0\n  6421: a4 = s1 + 0x1000\n  6425: u64 [a4 + 4294965352] = 0\n  6429: a5 = s1 + 0x1000\n  6433: u64 [a5 + 4294965344] = 0x2\n  6438: a4 = s1 + 0x1000\n  6442: u64 [a4 + 0xfffffffffffff880] = a3\n  6446: a3 = s1 + 0x1000\n  6450: u64 [a3 + 0xfffffffffffff888] = a2\n  6454: a2 = s1 + 0x7ff\n  6458: a2 = a2 + 0x91\n  6462: u64 [a2] = a1\n  6464: u64 [a2 + 0x8] = a0\n  6467: a0 = s1 + 0x7ff\n  6471: a0 = a0 + 0x61\n  6474: a1 = s1 + 0x7ff\n  6478: a1 = a1 + 0x81\n  6482: ra = 0xa2\n  6486: jump @25\n      : @167 (gas: 7)\n  6489: a0 = u64 [s1 + 0x70]\n  6492: a0 = a0 | a1\n  6495: a1 = 0xffffffe0\n  6505: a1 = t0 <u a1\n  6508: a1 = 0 if t1 != 0\n  6510: a1 = 0 if a0 != 0\n  6512: jump @178 if a1 == 0\n      : @168 (gas: 3)\n  6516: i32 a1 = t0 + 0x20\n  6519: a0 = s1 + 0x300\n  6523: ra = 150, jump @17\n      : @169 [@dyn 75] (gas: 14)\n  6529: a3 = u64 [s1 + 0x68]\n  6532: a2 = u64 [s1 + 0x90]\n  6536: a5 = u64 [s1 + 0x98]\n  6540: a4 = u64 [s1 + 0xa0]\n  6544: a1 = s1 + 0x300\n  6548: a0 = u64 [a1 + 0x18]\n  6551: u64 [s1 + 0x110] = a0\n  6555: a0 = u64 [a1 + 0x10]\n  6558: u64 [s1 + 0x108] = a0\n  6562: a0 = u64 [a1 + 0x8]\n  6565: u64 [s1 + 0xf8] = a0\n  6569: a0 = u64 [a1]\n  6571: u64 [s1 + 0x100] = a0\n  6575: fallthrough\n      : @170 (gas: 20)\n  6576: a0 = a5 >> 0x3f\n  6579: a1 = a2 << 0x1\n  6582: a0 = a0 | a1\n  6585: u64 [s1 + 0xf0] = a0\n  6589: a0 = a2 >> 0x3f\n  6592: a1 = a3 << 0x1\n  6595: a0 = a0 | a1\n  6598: u64 [s1 + 0xe8] = a0\n  6602: a0 = a4 >> 0x3f\n  6605: a1 = a5 << 0x1\n  6608: a0 = a0 | a1\n  6611: u64 [s1 + 0xe0] = a0\n  6615: a0 = a4 << 0x1\n  6618: u64 [s1 + 0xd8] = a0\n  6622: a1 = a4 << 0x3\n  6625: u64 [s1 + 0x118] = a1\n  6629: i32 a2 = 0x80 - a1\n  6633: a0 = 0xffffffffffffffff\n  6636: a1 = 0xffffffffffffffff\n  6639: ra = 152, jump @1246\n      : @171 [@dyn 76] (gas: 7)\n  6645: u64 [s1 + 0xb8] = a0\n  6649: u64 [s1 + 0xd0] = a1\n  6653: a0 = u64 [s1 + 0xa0]\n  6657: i32 a2 = a0 << 0x3\n  6660: a0 = 0xffffffffffffffff\n  6663: a1 = 0xffffffffffffffff\n  6666: ra = 154, jump @1241\n      : @172 [@dyn 77] (gas: 10)\n  6672: u64 [s1 + 0xc8] = a0\n  6676: u64 [s1 + 0xc0] = a1\n  6680: a1 = u64 [s1 + 0xb8]\n  6684: a0 = a0 | a1\n  6687: u64 [s1 + 0xb8] = a0\n  6691: a0 = u64 [s1 + 0x118]\n  6695: i32 a2 = a0 + 0xffffffffffffff80\n  6698: a0 = 0xffffffffffffffff\n  6701: a1 = 0xffffffffffffffff\n  6704: ra = 156, jump @1241\n      : @173 [@dyn 78] (gas: 7)\n  6710: a4 = u64 [s1 + 0x118]\n  6714: a2 = a4 <u 0x80\n  6718: a3 = u64 [s1 + 0xb8]\n  6722: a0 = a3 if a2 != 0\n  6725: a5 = u64 [s1 + 0xc0]\n  6729: a3 = u64 [s1 + 0xd0]\n  6733: t0 = 158, jump @1220\n      : @174 [@dyn 79] (gas: 2)\n  6739: a4 = u64 [s1 + 0xc8]\n  6743: t0 = 160, jump @1217\n      : @175 [@dyn 80] (gas: 23)\n  6749: a4 = u64 [s1 + 0xd8]\n  6753: a0 = a0 | a4\n  6756: a4 = u64 [s1 + 0xe0]\n  6760: a1 = a1 | a4\n  6763: a4 = u64 [s1 + 0xe8]\n  6767: a3 = a3 | a4\n  6770: a4 = u64 [s1 + 0xf0]\n  6774: a2 = a2 | a4\n  6777: a5 = s1 + 0x7ff\n  6781: a5 = a5 + 0x91\n  6785: u64 [a5 + 16] = 0x2\n  6789: u64 [a5 + 0x40] = a2\n  6792: u64 [a5 + 0x48] = a3\n  6795: u64 [a5 + 0x38] = a1\n  6798: u64 [a5 + 0x30] = a0\n  6801: u64 [a5 + 40] = 0\n  6804: u64 [a5 + 32] = 0\n  6807: u64 [a5 + 24] = 0\n  6810: a0 = s1 + 0x7ff\n  6814: a0 = a0 + 0xa1\n  6818: a1 = s1 + 0x7ff\n  6822: a1 = a1 + 0xc1\n  6826: ra = 162, jump @25\n      : @176 [@dyn 81] (gas: 3)\n  6832: a0 = s1 + 0x2a0\n  6836: a1 = 0x40\n  6839: ra = 164, jump @17\n      : @177 [@dyn 82] (gas: 13)\n  6845: a4 = s1 + 0x200\n  6849: a3 = u64 [a4 + 0xb8]\n  6853: a1 = u64 [a4 + 0xb0]\n  6857: a2 = u64 [a4 + 0xa8]\n  6861: a0 = u64 [a4 + 0xa0]\n  6865: a3 = a3 | a2\n  6868: a2 = a0 | a1\n  6871: a2 = a2 | a3\n  6874: a2 = a2 >> 0x20\n  6877: a1 = a1 | a3\n  6880: a1 = a1 << 0x20\n  6883: a1 = a1 | a2\n  6886: jump @213 if a1 == 0\n      : @178 (gas: 1)\n  6890: trap\n      : @179 (gas: 6)\n  6891: a1 = 0x20130\n  6896: i32 a1 = a1 + 0\n  6898: a0 = 0x1\n  6901: a2 = 0\n  6903: ecalli 11 // 'seal_return'\n  6905: jump @183\n      : @180 (gas: 6)\n  6907: a1 = 0x20130\n  6912: i32 a1 = a1 + 0\n  6914: a0 = 0x1\n  6917: a2 = 0\n  6919: ecalli 11 // 'seal_return'\n  6921: jump @183\n      : @181 (gas: 6)\n  6923: a1 = 0x20130\n  6928: i32 a1 = a1 + 0\n  6930: a0 = 0x1\n  6933: a2 = 0\n  6935: ecalli 11 // 'seal_return'\n  6937: jump @183\n      : @182 (gas: 6)\n  6939: a1 = 0x20130\n  6944: i32 a1 = a1 + 0\n  6946: a0 = 0x1\n  6949: a2 = 0\n  6951: ecalli 11 // 'seal_return'\n  6953: fallthrough\n      : @183 (gas: 8)\n  6954: u64 [s1 + 336] = 0\n  6958: u64 [s1 + 328] = 0\n  6962: u64 [s1 + 320] = 0\n  6966: a0 = 0x1e4fbdf700000000\n  6976: a1 = s1 + 0x140\n  6980: u64 [s1 + 0x158] = a0\n  6984: a0 = 0\n  6986: ra = 166, jump @19\n      : @184 [@dyn 83] (gas: 7)\n  6992: u64 [s1 + 312] = 0\n  6996: u64 [s1 + 304] = 0\n  7000: u64 [s1 + 296] = 0\n  7004: a0 = 0x4\n  7007: a1 = s1 + 0x120\n  7011: u64 [s1 + 288] = 0\n  7015: ra = 168, jump @19\n      : @185 [@dyn 84] (gas: 2)\n  7021: a1 = i32 [0x20124]\n  7026: jump @187 if a1 >u 63\n      : @186 (gas: 3)\n  7030: u32 [0x20124] = 0x40\n  7036: a1 = 0x20130\n  7041: jump @212\n      : @187 (gas: 2)\n  7044: a1 = 0x20130\n  7049: jump @212\n      : @188 (gas: 6)\n  7052: u64 [s1 + 400] = 0\n  7056: u64 [s1 + 392] = 0\n  7060: u64 [s1 + 384] = 0\n  7064: t0 = 0xaa\n  7068: a0 = 0x4e487b7100000000\n  7078: fallthrough\n      : @189 [@dyn 85] (gas: 4)\n  7079: a1 = s1 + 0x180\n  7083: u64 [s1 + 0x198] = a0\n  7087: a0 = 0\n  7089: ra = 172, jump @19\n      : @190 [@dyn 86] (gas: 7)\n  7095: u64 [s1 + 376] = 0\n  7099: u64 [s1 + 368] = 0\n  7103: u64 [s1 + 352] = 0x41\n  7108: a0 = 0x4\n  7111: a1 = s1 + 0x160\n  7115: u64 [s1 + 360] = 0\n  7119: ra = 174, jump @19\n      : @191 [@dyn 87] (gas: 2)\n  7125: a1 = i32 [0x20124]\n  7130: jump @193 if a1 >u 63\n      : @192 (gas: 3)\n  7134: u32 [0x20124] = 0x40\n  7140: a1 = 0x20130\n  7145: jump @212\n      : @193 (gas: 2)\n  7148: a1 = 0x20130\n  7153: jump @212\n      : @194 (gas: 6)\n  7156: u64 [s1 + 464] = 0\n  7160: u64 [s1 + 456] = 0\n  7164: u64 [s1 + 448] = 0\n  7168: t0 = 0xb0\n  7172: a0 = 0x4e487b7100000000\n  7182: fallthrough\n      : @195 [@dyn 88] (gas: 4)\n  7183: a1 = s1 + 0x1c0\n  7187: u64 [s1 + 0x1d8] = a0\n  7191: a0 = 0\n  7193: ra = 178, jump @19\n      : @196 [@dyn 89] (gas: 7)\n  7199: u64 [s1 + 440] = 0\n  7203: u64 [s1 + 432] = 0\n  7207: u64 [s1 + 416] = 0x22\n  7212: a0 = 0x4\n  7215: a1 = s1 + 0x1a0\n  7219: u64 [s1 + 424] = 0\n  7223: ra = 180, jump @19\n      : @197 [@dyn 90] (gas: 2)\n  7229: a1 = i32 [0x20124]\n  7234: jump @199 if a1 >u 63\n      : @198 (gas: 3)\n  7238: u32 [0x20124] = 0x40\n  7244: a1 = 0x20130\n  7249: jump @212\n      : @199 (gas: 2)\n  7252: a1 = 0x20130\n  7257: jump @212\n      : @200 (gas: 6)\n  7260: u64 [s1 + 560] = 0\n  7264: u64 [s1 + 552] = 0\n  7268: u64 [s1 + 544] = 0\n  7272: t0 = 0xb6\n  7276: a0 = 0x4e487b7100000000\n  7286: fallthrough\n      : @201 [@dyn 91] (gas: 4)\n  7287: a1 = s1 + 0x220\n  7291: u64 [s1 + 0x238] = a0\n  7295: a0 = 0\n  7297: ra = 184, jump @19\n      : @202 [@dyn 92] (gas: 7)\n  7303: u64 [s1 + 536] = 0\n  7307: u64 [s1 + 528] = 0\n  7311: u64 [s1 + 512] = 0x41\n  7316: a0 = 0x4\n  7319: a1 = s1 + 0x200\n  7323: u64 [s1 + 520] = 0\n  7327: ra = 186, jump @19\n      : @203 [@dyn 93] (gas: 2)\n  7333: a1 = i32 [0x20124]\n  7338: jump @205 if a1 >u 63\n      : @204 (gas: 3)\n  7342: u32 [0x20124] = 0x40\n  7348: a1 = 0x20130\n  7353: jump @212\n      : @205 (gas: 2)\n  7355: a1 = 0x20130\n  7360: jump @212\n      : @206 (gas: 6)\n  7362: u64 [s1 + 624] = 0\n  7366: u64 [s1 + 616] = 0\n  7370: u64 [s1 + 608] = 0\n  7374: t0 = 0xbc\n  7378: a0 = 0x4e487b7100000000\n  7388: fallthrough\n      : @207 [@dyn 94] (gas: 4)\n  7389: a1 = s1 + 0x260\n  7393: u64 [s1 + 0x278] = a0\n  7397: a0 = 0\n  7399: ra = 190, jump @19\n      : @208 [@dyn 95] (gas: 7)\n  7405: u64 [s1 + 600] = 0\n  7409: u64 [s1 + 592] = 0\n  7413: u64 [s1 + 576] = 0x22\n  7418: a0 = 0x4\n  7421: a1 = s1 + 0x240\n  7425: u64 [s1 + 584] = 0\n  7429: ra = 192, jump @19\n      : @209 [@dyn 96] (gas: 2)\n  7435: a1 = i32 [0x20124]\n  7440: jump @211 if a1 >u 63\n      : @210 (gas: 3)\n  7444: u32 [0x20124] = 0x40\n  7450: a1 = 0x20130\n  7455: jump @212\n      : @211 (gas: 2)\n  7457: a1 = 0x20130\n  7462: fallthrough\n      : @212 (gas: 7)\n  7463: i32 a1 = a1 + 0\n  7465: a0 = 0x1\n  7468: a2 = 0x24\n  7471: ecalli 11 // 'seal_return'\n  7473: u64 [s1 + 0x118] = a0\n  7477: ra = 0xc2\n  7481: jump @31\n      : @213 (gas: 2)\n  7484: u64 [s1 + 0x118] = a0\n  7488: ra = 194, jump @31\n      : @214 [@dyn 97] (gas: 5)\n  7494: i32 a0 = a0 + 0\n  7496: a1 = 0\n  7498: a2 = 0\n  7500: ecalli 1 // 'call_data_copy'\n  7502: jump @15\n      : @215 (gas: 3)\n  7505: a0 = u64 [s1 + 0x118]\n  7509: a1 = 0\n  7511: ra = 196, jump @31\n      : @216 [@dyn 98] (gas: 5)\n  7517: i32 a1 = a0 + 0\n  7519: a0 = 0\n  7521: a2 = 0\n  7523: ecalli 11 // 'seal_return'\n  7525: jump @183\n      : @217 [@dyn 99] (gas: 4)\n  7528: a0 = 0x20120\n  7533: u64 [s1 + 0xb8] = a0\n  7537: a0 = i32 [0x20120]\n  7542: jump @219 if a0 >=u 4\n      : @218 (gas: 1)\n  7546: jump @814\n      : @219 (gas: 6)\n  7549: a0 = s1 + 0x2000\n  7553: i32 a0 = a0 + 0xfffffffffffff8e0\n  7557: a1 = 0\n  7559: ra = 0xc8\n  7563: ecalli 2 // 'call_data_load'\n  7565: fallthrough\n      : @220 [@dyn 100] (gas: 3)\n  7566: a2 = s1 + 0x1838\n  7570: a0 = i32 [a2 + 0xc4]\n  7574: jump @222 if a0 != 2163561989\n      : @221 (gas: 1)\n  7581: jump @494\n      : @222 (gas: 1)\n  7584: jump @273 if a0 == 2376452955\n      : @223 (gas: 2)\n  7592: a3 = s1 + 0x2038\n  7596: jump @225 if a0 != 2514000705\n      : @224 (gas: 1)\n  7603: jump @425\n      : @225 (gas: 1)\n  7606: jump @284 if a0 == 3105385853\n      : @226 (gas: 1)\n  7614: jump @228 if a0 != 3629989159\n      : @227 (gas: 1)\n  7621: jump @534\n      : @228 (gas: 1)\n  7624: jump @369 if a0 == 3879258056\n      : @229 (gas: 1)\n  7632: jump @303 if a0 == 4158223735\n      : @230 (gas: 1)\n  7640: jump @232 if a0 != 7709463\n      : @231 (gas: 1)\n  7646: jump @568\n      : @232 (gas: 1)\n  7649: jump @387 if a0 == 117300739\n      : @233 (gas: 1)\n  7657: jump @235 if a0 != 328625589\n      : @234 (gas: 1)\n  7664: jump @588\n      : @235 (gas: 1)\n  7667: jump @237 if a0 != 658669105\n      : @236 (gas: 1)\n  7674: jump @456\n      : @237 (gas: 1)\n  7677: jump @239 if a0 != 738836215\n      : @238 (gas: 1)\n  7684: jump @558\n      : @239 (gas: 1)\n  7687: jump @241 if a0 != 751508272\n      : @240 (gas: 1)\n  7694: jump @505\n      : @241 (gas: 1)\n  7697: jump @346 if a0 == 1292031669\n      : @242 (gas: 1)\n  7705: jump @244 if a0 != 1639501452\n      : @243 (gas: 1)\n  7712: jump @445\n      : @244 (gas: 1)\n  7715: jump @246 if a0 != 1666326814\n      : @245 (gas: 1)\n  7722: jump @407\n      : @246 (gas: 1)\n  7725: jump @248 if a0 == 1842260063\n      : @247 (gas: 1)\n  7732: jump @481\n      : @248 (gas: 8)\n  7735: u64 [a2 + 1440] = 0\n  7739: u64 [a2 + 1432] = 0\n  7743: u64 [a2 + 1424] = 0\n  7747: u64 [a2 + 1416] = 0\n  7751: a0 = s1 + 0x2000\n  7755: i32 a0 = a0 + 0xfffffffffffffdc0\n  7759: ecalli 14 // 'value_transferred'\n  7761: fallthrough\n      : @249 (gas: 10)\n  7762: a3 = s1 + 0x1838\n  7766: a4 = a3 + 0x500\n  7770: a0 = u64 [a4 + 0x98]\n  7774: a1 = u64 [a4 + 0xa0]\n  7778: a2 = u64 [a4 + 0x90]\n  7782: a3 = u64 [a4 + 0x88]\n  7786: a1 = a1 | a2\n  7789: a0 = a0 | a3\n  7792: a0 = a0 | a1\n  7795: jump @251 if a0 == 0\n      : @250 (gas: 1)\n  7798: jump @689\n      : @251 (gas: 3)\n  7801: a0 = u64 [s1 + 0xb8]\n  7805: a0 = i32 [a0]\n  7807: jump @253 if a0 >u 35\n      : @252 (gas: 1)\n  7811: jump @690\n      : @253 (gas: 3)\n  7814: a0 = s1 + 0x7ff\n  7818: a0 = a0 + 0x5c1\n  7822: ra = 202, jump @907\n      : @254 [@dyn 101] (gas: 9)\n  7828: a0 = s1 + 0x7ff\n  7832: a0 = a0 + 0x39\n  7835: a1 = u64 [a0 + 0x590]\n  7839: u64 [s1 + 0xb0] = a1\n  7843: a1 = u64 [a0 + 0x588]\n  7847: u64 [s1 + 0xb8] = a1\n  7851: a0 = u32 [a0 + 0x598]\n  7855: u64 [s1 + 0xa8] = a0\n  7859: ra = 204, jump @1112\n      : @255 [@dyn 102] (gas: 6)\n  7865: a0 = u64 [s1 + 0xb8]\n  7869: a1 = u64 [s1 + 0xa8]\n  7873: a0 = a0 | a1\n  7876: a1 = u64 [s1 + 0xb0]\n  7880: a0 = a0 | a1\n  7883: jump @257 if a0 == 0\n      : @256 (gas: 1)\n  7886: jump @691\n      : @257 (gas: 4)\n  7889: a0 = s1 + 0x7ff\n  7893: a0 = a0 + 0x541\n  7897: a1 = 0x40\n  7900: ra = 206, jump @17\n      : @258 [@dyn 103] (gas: 15)\n  7906: a3 = s1 + 0x7ff\n  7910: a3 = a3 + 0x39\n  7913: t0 = u64 [a3 + 0x520]\n  7917: a1 = a3 + 0x500\n  7921: a5 = u64 [a1 + 0x18]\n  7924: a4 = u64 [a1 + 0x10]\n  7927: a0 = u64 [a1 + 0x8]\n  7930: a2 = a4 | t0\n  7933: a1 = a0 | a5\n  7936: a1 = a1 | a2\n  7939: a1 = a1 >> 0x20\n  7942: a2 = a2 | a5\n  7945: a2 = a2 << 0x20\n  7948: a1 = a1 | a2\n  7951: jump @260 if a1 == 0\n      : @259 (gas: 1)\n  7954: jump @688\n      : @260 (gas: 13)\n  7957: a2 = a3\n  7959: u64 [a3 + 1272] = 0\n  7963: u64 [a3 + 1264] = 0\n  7967: u64 [a3 + 1256] = 0\n  7971: a3 = 0x8c379a000000000\n  7981: a1 = s1 + 0x7ff\n  7985: a1 = a1 + 0x521\n  7989: u64 [a2 + 0x500] = a3\n  7993: u64 [s1 + 0xb8] = a0\n  7997: u64 [s1 + 0xb0] = a4\n  8001: u64 [s1 + 0xa0] = t0\n  8005: u64 [s1 + 0xa8] = a5\n  8009: ra = 208, jump @19\n      : @261 [@dyn 104] (gas: 5)\n  8015: a1 = u64 [s1 + 0xb8]\n  8019: a0 = u64 [s1 + 0xa8]\n  8023: a3 = u64 [s1 + 0xa0]\n  8027: a3 = a3 | a0\n  8030: t0 = 210, jump @1199\n      : @262 [@dyn 105] (gas: 1)\n  8036: jump @264 if a0 != 0\n      : @263 (gas: 1)\n  8039: jump @688\n      : @264 (gas: 12)\n  8042: i32 a0 = a1 + 0x4\n  8045: a2 = s1 + 0x7ff\n  8049: a2 = a2 + 0x39\n  8052: u64 [a2 + 1248] = 0\n  8056: u64 [a2 + 1240] = 0\n  8060: u64 [a2 + 1224] = 0x20\n  8065: a1 = s1 + 0x7ff\n  8069: a1 = a1 + 0x501\n  8073: u64 [a2 + 1232] = 0\n  8077: u64 [s1 + 0xa8] = a3\n  8081: u64 [s1 + 0xa0] = a4\n  8085: ra = 212, jump @19\n      : @265 [@dyn 106] (gas: 1)\n  8091: t0 = 214, jump @1210\n      : @266 [@dyn 107] (gas: 1)\n  8097: jump @268 if a0 != 0\n      : @267 (gas: 1)\n  8100: jump @688\n      : @268 (gas: 10)\n  8103: i32 a0 = a1 + 0x24\n  8106: a3 = s1 + 0x7ff\n  8110: a3 = a3 + 0x39\n  8113: u64 [a3 + 1216] = 0\n  8117: u64 [a3 + 1208] = 0\n  8121: u64 [a3 + 1192] = 0x8\n  8126: a1 = s1 + 0x7ff\n  8130: a1 = a1 + 0x4e1\n  8134: u64 [a3 + 1200] = 0\n  8138: ra = 216, jump @19\n      : @269 [@dyn 108] (gas: 1)\n  8144: t0 = 218, jump @1197\n      : @270 [@dyn 109] (gas: 1)\n  8150: jump @272 if a0 != 0\n      : @271 (gas: 1)\n  8153: jump @688\n      : @272 (gas: 12)\n  8156: i32 a0 = a2 + 0x44\n  8159: a1 = u64 [0x20090]\n  8164: a3 = s1 + 0x7ff\n  8168: a3 = a3 + 0x39\n  8171: u64 [a3 + 1176] = 0\n  8175: u64 [a3 + 1168] = 0\n  8179: u64 [a3 + 0x4a0] = a1\n  8183: a1 = s1 + 0x7ff\n  8187: a1 = a1 + 0x4c1\n  8191: u64 [a3 + 1160] = 0\n  8195: ra = 0x20e\n  8199: jump @19\n      : @273 (gas: 8)\n  8202: u64 [a2 + 1952] = 0\n  8206: u64 [a2 + 1944] = 0\n  8210: u64 [a2 + 1936] = 0\n  8214: u64 [a2 + 1928] = 0\n  8218: a0 = s1 + 0x2000\n  8222: i32 a0 = a0 + 0xffffffffffffffc0\n  8225: ecalli 14 // 'value_transferred'\n  8227: fallthrough\n      : @274 (gas: 11)\n  8228: a3 = s1 + 0x1838\n  8232: a5 = a3 + 0x700\n  8236: a0 = u64 [a5 + 0x98]\n  8240: a1 = u64 [a5 + 0xa0]\n  8244: a2 = u64 [a5 + 0x90]\n  8248: a4 = a3\n  8250: a3 = u64 [a5 + 0x88]\n  8254: a1 = a1 | a2\n  8257: a0 = a0 | a3\n  8260: a0 = a0 | a1\n  8263: jump @276 if a0 == 0\n      : @275 (gas: 1)\n  8266: jump @696\n      : @276 (gas: 3)\n  8269: a0 = u64 [s1 + 0xb8]\n  8273: a0 = i32 [a0]\n  8275: jump @278 if a0 >u 3\n      : @277 (gas: 1)\n  8279: jump @697\n      : @278 (gas: 7)\n  8282: u64 [a4 + 1984] = 0\n  8286: u64 [a4 + 1976] = 0\n  8290: u64 [a4 + 1968] = 0\n  8294: u64 [a4 + 1960] = 0\n  8298: a0 = s1 + 0x1020\n  8302: a1 = s1 + 0x1fe0\n  8306: ra = 220, jump @21\n      : @279 [@dyn 110] (gas: 11)\n  8312: a0 = s1 + 0x1038\n  8316: a2 = a0 + 0xffffffffffffff00\n  8320: a1 = u64 [a2 + 0xf8]\n  8324: u64 [s1 + 0xa8] = a1\n  8328: a1 = u64 [a2 + 0xf0]\n  8332: u64 [s1 + 0xb8] = a1\n  8336: a0 = u64 [a2 + 0xe8]\n  8340: u64 [s1 + 0xb0] = a0\n  8344: a0 = s1 + 0x1000\n  8348: a1 = 0x40\n  8351: ra = 222, jump @17\n      : @280 [@dyn 111] (gas: 8)\n  8357: a3 = s1 + 0x7ff\n  8361: a3 = a3 + 0x39\n  8364: a5 = a3 + 0x700\n  8368: a4 = u64 [a5 + 0xe0]\n  8372: a1 = u64 [a5 + 0xd8]\n  8376: a2 = u64 [a5 + 0xd0]\n  8380: a0 = u64 [a5 + 0xc8]\n  8384: t0 = 224, jump @1207\n      : @281 [@dyn 112] (gas: 1)\n  8390: jump @283 if a1 == 0\n      : @282 (gas: 1)\n  8393: jump @688\n      : @283 (gas: 15)\n  8396: a1 = u64 [s1 + 0xa8]\n  8400: a1 = a1 << 0x20\n  8403: a2 = a1 >> 0x20\n  8406: u64 [a3 + 1984] = 0\n  8410: a1 = u64 [s1 + 0xb0]\n  8414: a4 = a3 + 0x700\n  8418: u64 [a4 + 0xa8] = a1\n  8422: a1 = u64 [s1 + 0xb8]\n  8426: u64 [a4 + 0xb0] = a1\n  8430: a1 = s1 + 0x7ff\n  8434: a1 = a1 + 0x7e1\n  8438: u64 [a4 + 0xb8] = a2\n  8442: u64 [s1 + 0xb8] = a0\n  8446: ra = 0x1fe\n  8450: jump @19\n      : @284 (gas: 8)\n  8453: u64 [a3 + 32] = 0\n  8456: u64 [a3 + 24] = 0\n  8459: u64 [a3 + 16] = 0\n  8462: u64 [a3 + 8] = 0\n  8465: a0 = s1 + 0x2000\n  8469: i32 a0 = a0 + 0x40\n  8472: ecalli 14 // 'value_transferred'\n  8474: fallthrough\n      : @285 (gas: 9)\n  8475: a3 = s1 + 0x2038\n  8479: a0 = u64 [a3 + 0x18]\n  8482: a1 = u64 [a3 + 0x20]\n  8485: a2 = u64 [a3 + 0x10]\n  8488: a3 = u64 [a3 + 0x8]\n  8491: a1 = a1 | a2\n  8494: a0 = a0 | a3\n  8497: a0 = a0 | a1\n  8500: jump @287 if a0 == 0\n      : @286 (gas: 1)\n  8503: jump @698\n      : @287 (gas: 3)\n  8506: a0 = u64 [s1 + 0xb8]\n  8510: a0 = i32 [a0]\n  8512: jump @289 if a0 >u 35\n      : @288 (gas: 1)\n  8516: jump @699\n      : @289 (gas: 18)\n  8519: a0 = s1 + 0x2000\n  8523: i32 a0 = a0 + 0x60\n  8526: a1 = 0x4\n  8529: ecalli 2 // 'call_data_load'\n  8531: a3 = s1 + 0x2038\n  8535: a0 = u64 [a3 + 0x28]\n  8538: a1 = u64 [a3 + 0x30]\n  8541: a2 = u64 [a3 + 0x38]\n  8544: a3 = u64 [a3 + 0x40]\n  8547: a4 = s1 + 0x1038\n  8551: a5 = a4 + 0x200\n  8555: u64 [a5 + 0x80] = a3\n  8559: u64 [a5 + 0x78] = a2\n  8562: u64 [a5 + 0x70] = a1\n  8565: a1 = s1 + 0x12a0\n  8569: u64 [a5 + 0x68] = a0\n  8572: a0 = 0\n  8574: ra = 226, jump @19\n      : @290 [@dyn 113] (gas: 3)\n  8580: t0 = 0xe4\n  8584: a1 = s1 + 0x1038\n  8588: fallthrough\n      : @291 [@dyn 114] (gas: 8)\n  8589: u64 [a1 + 608] = 0\n  8593: u64 [a1 + 600] = 0\n  8597: u64 [a1 + 584] = 0x6\n  8602: a2 = a1\n  8604: a0 = 0x20\n  8607: a1 = s1 + 0x1280\n  8611: u64 [a2 + 592] = 0\n  8615: ra = 230, jump @19\n      : @292 [@dyn 115] (gas: 2)\n  8621: a1 = i32 [0x20124]\n  8626: jump @294 if a1 >u 63\n      : @293 (gas: 2)\n  8630: u32 [0x20124] = 0x40\n  8636: fallthrough\n      : @294 (gas: 13)\n  8637: a0 = sp + 0xffffffffffffffe0\n  8640: a2 = a0 & 0xffffffffffffffe0\n  8643: u64 [s1 + 0xb8] = a2\n  8647: sp = a2\n  8649: a0 = 0x20130\n  8654: i32 a0 = a0 + 0\n  8656: i32 a2 = a2 + 0\n  8658: a1 = 0x40\n  8661: ra = 0xe8\n  8665: ecalli 7 // 'hash_keccak_256'\n  8667: a3 = u64 [s1 + 0xb8]\n  8671: t0 = 0xea\n  8675: jump @1200\n      : @295 [@dyn 116] (gas: 2)\n  8678: a3 = u64 [s1 + 0xb8]\n  8682: t0 = 234, jump @1200\n      : @296 [@dyn 117] (gas: 7)\n  8688: u64 [a4 + 0x60] = a3\n  8691: u64 [a4 + 0x58] = a2\n  8694: u64 [a4 + 0x50] = a1\n  8697: u64 [a4 + 0x48] = a0\n  8700: a0 = s1 + 0x1260\n  8704: a1 = s1 + 0x2080\n  8708: ra = 236, jump @21\n      : @297 [@dyn 118] (gas: 3)\n  8714: t0 = 0xee\n  8718: a1 = s1 + 0x1038\n  8722: fallthrough\n      : @298 [@dyn 119] (gas: 12)\n  8723: a2 = a1 + 0x200\n  8727: a0 = u64 [a2 + 0x40]\n  8730: u64 [s1 + 0xb8] = a0\n  8734: a0 = u64 [a2 + 0x38]\n  8737: u64 [s1 + 0xb0] = a0\n  8741: a0 = u64 [a2 + 0x30]\n  8744: u64 [s1 + 0xa8] = a0\n  8748: a0 = u64 [a2 + 0x28]\n  8751: u64 [s1 + 0xa0] = a0\n  8755: a0 = s1 + 0x1240\n  8759: a1 = 0x40\n  8762: ra = 240, jump @17\n      : @299 [@dyn 120] (gas: 7)\n  8768: a3 = s1 + 0x1038\n  8772: a5 = a3 + 0x200\n  8776: a0 = u64 [a5 + 0x20]\n  8779: a1 = u64 [a5 + 0x18]\n  8782: a2 = u64 [a5 + 0x10]\n  8785: a4 = u64 [a5 + 0x8]\n  8788: t0 = 242, jump @1211\n      : @300 [@dyn 121] (gas: 1)\n  8794: jump @302 if a0 == 0\n      : @301 (gas: 1)\n  8797: jump @688\n      : @302 (gas: 14)\n  8800: a0 = u64 [s1 + 0xa0]\n  8804: a1 = a3 + 0x100\n  8808: u64 [a1 + 0xe8] = a0\n  8812: a0 = u64 [s1 + 0xa8]\n  8816: u64 [a1 + 0xf0] = a0\n  8820: a0 = u64 [s1 + 0xb0]\n  8824: u64 [a1 + 0xf8] = a0\n  8828: a1 = s1 + 0x1220\n  8832: a0 = u64 [s1 + 0xb8]\n  8836: u64 [a3 + 0x200] = a0\n  8840: a0 = a4\n  8842: u64 [s1 + 0xb8] = a4\n  8846: ra = 0x1fe\n  8850: jump @19\n      : @303 (gas: 10)\n  8853: u64 [a3 + 416] = 0\n  8857: u64 [a3 + 408] = 0\n  8861: u64 [a3 + 400] = 0\n  8865: u64 [a3 + 392] = 0\n  8869: a0 = s1 + 0x2000\n  8873: i32 a0 = a0 + 0x1c0\n  8877: ra = 0xf4\n  8881: ecalli 14 // 'value_transferred'\n  8883: t0 = 0xf6\n  8887: jump @1238\n      : @304 [@dyn 122] (gas: 1)\n  8890: t0 = 246, jump @1238\n      : @305 [@dyn 123] (gas: 8)\n  8896: a0 = u64 [a4 + 0x98]\n  8900: a1 = u64 [a4 + 0xa0]\n  8904: a2 = u64 [a4 + 0x90]\n  8908: a3 = u64 [a4 + 0x88]\n  8912: a1 = a1 | a2\n  8915: a0 = a0 | a3\n  8918: a0 = a0 | a1\n  8921: jump @307 if a0 == 0\n      : @306 (gas: 1)\n  8924: jump @700\n      : @307 (gas: 3)\n  8927: a0 = u64 [s1 + 0xb8]\n  8931: a0 = i32 [a0]\n  8933: jump @309 if a0 >u 67\n      : @308 (gas: 1)\n  8937: jump @701\n      : @309 (gas: 25)\n  8940: a0 = s1 + 0x2000\n  8944: i32 a0 = a0 + 0x1e0\n  8948: a1 = 0x4\n  8951: ecalli 2 // 'call_data_load'\n  8953: a1 = s1 + 0x2038\n  8957: a2 = a1 + 0x100\n  8961: a0 = u64 [a2 + 0xc0]\n  8965: u64 [s1 + 0xa0] = a0\n  8969: a0 = u64 [a2 + 0xb8]\n  8973: u64 [s1 + 0xa8] = a0\n  8977: a0 = u64 [a2 + 0xb0]\n  8981: u64 [s1 + 0xb0] = a0\n  8985: a0 = u64 [a2 + 0xa8]\n  8989: u64 [s1 + 0xb8] = a0\n  8993: a0 = sp + 0xffffffffffffffe0\n  8996: a0 = a0 & 0xffffffffffffffe0\n  8999: u64 [s1 + 0x98] = a0\n  9003: sp = a0\n  9005: a0 = s1 + 0x2000\n  9009: i32 a0 = a0 + 0x200\n  9013: a1 = 0x24\n  9016: ra = 0xf8\n  9020: ecalli 2 // 'call_data_load'\n  9022: t0 = 0xfa\n  9026: jump @1238\n      : @310 [@dyn 124] (gas: 1)\n  9029: t0 = 250, jump @1238\n      : @311 [@dyn 125] (gas: 24)\n  9035: a0 = u64 [a4 + 0xe0]\n  9039: a1 = u64 [a4 + 0xd8]\n  9043: a2 = u64 [a4 + 0xd0]\n  9047: a3 = u64 [a4 + 0xc8]\n  9051: u64 [s1 + 0x68] = a0\n  9054: a4 = u64 [s1 + 0x98]\n  9058: u64 [a4 + 0x18] = a0\n  9061: u64 [s1 + 0x60] = a1\n  9064: u64 [a4 + 0x10] = a1\n  9067: u64 [s1 + 0x58] = a2\n  9070: u64 [a4 + 0x8] = a2\n  9073: u64 [s1 + 0x50] = a3\n  9076: u64 [a4] = a3\n  9078: a2 = s1 + 0x1838\n  9082: a0 = u64 [s1 + 0xa0]\n  9086: u64 [a2 + 0x80] = a0\n  9090: a0 = u64 [s1 + 0xa8]\n  9094: u64 [a2 + 0x78] = a0\n  9097: a0 = u64 [s1 + 0xb0]\n  9101: u64 [a2 + 0x70] = a0\n  9104: a0 = s1 + 0x18a0\n  9108: a1 = u64 [s1 + 0xb8]\n  9112: u64 [a2 + 0x68] = a1\n  9115: ra = 252, jump @1099\n      : @312 [@dyn 126] (gas: 8)\n  9121: a0 = s1 + 0x2038\n  9125: u64 [a0 + 512] = 0\n  9129: u64 [a0 + 504] = 0\n  9133: u64 [a0 + 496] = 0\n  9137: u64 [a0 + 488] = 0\n  9141: a0 = s1 + 0x1880\n  9145: a1 = s1 + 0x2220\n  9149: ra = 254, jump @21\n      : @313 [@dyn 127] (gas: 15)\n  9155: a1 = s1 + 0x1838\n  9159: a0 = u64 [a1 + 0x50]\n  9162: u64 [s1 + 0x88] = a0\n  9166: a0 = u64 [a1 + 0x48]\n  9169: u64 [s1 + 0x80] = a0\n  9173: a0 = u32 [a1 + 0x58]\n  9176: u64 [s1 + 0x78] = a0\n  9179: a0 = 0x30130\n  9184: u64 [s1 + 0x90] = a0\n  9188: i32 a0 = a0 + 0\n  9190: u64 [s1 + 0x70] = a0\n  9193: ra = 0x100\n  9197: ecalli 4 // 'caller'\n  9199: t0 = 0x102\n  9203: jump @1202\n      : @314 [@dyn 128] (gas: 1)\n  9206: t0 = 258, jump @1202\n      : @315 [@dyn 129] (gas: 1)\n  9212: jump @321 if a0 == 0\n      : @316 (gas: 8)\n  9215: a1 = s1 + 0x2038\n  9219: u64 [a1 + 544] = 0\n  9223: u64 [a1 + 536] = 0\n  9227: u64 [a1 + 528] = 0\n  9231: u64 [a1 + 520] = 0x9\n  9236: a0 = s1 + 0x1860\n  9240: a1 = s1 + 0x2240\n  9244: ra = 260, jump @21\n      : @317 [@dyn 130] (gas: 12)\n  9250: a0 = s1 + 0x1838\n  9254: a1 = u64 [a0 + 0x30]\n  9257: u64 [s1 + 0x88] = a1\n  9261: a1 = u64 [a0 + 0x28]\n  9264: u64 [s1 + 0x80] = a1\n  9268: a0 = u32 [a0 + 0x38]\n  9271: u64 [s1 + 0x78] = a0\n  9274: a0 = u64 [s1 + 0x70]\n  9277: ra = 0x106\n  9281: ecalli 4 // 'caller'\n  9283: t0 = 0x108\n  9287: jump @1202\n      : @318 [@dyn 131] (gas: 1)\n  9290: t0 = 264, jump @1202\n      : @319 [@dyn 132] (gas: 1)\n  9296: jump @321 if a0 == 0\n      : @320 (gas: 1)\n  9299: jump @608\n      : @321 (gas: 13)\n  9302: a2 = s1 + 0x1038\n  9306: a0 = u64 [s1 + 0xb8]\n  9310: a3 = a2 + 0x700\n  9314: u64 [a3 + 0x68] = a0\n  9317: a0 = u64 [s1 + 0xb0]\n  9321: u64 [a3 + 0x70] = a0\n  9324: a0 = u64 [s1 + 0xa8]\n  9328: u64 [a3 + 0x78] = a0\n  9331: a1 = s1 + 0x17a0\n  9335: a0 = u64 [s1 + 0xa0]\n  9339: u64 [a3 + 0x80] = a0\n  9343: a0 = 0\n  9345: ra = 266, jump @19\n      : @322 [@dyn 133] (gas: 3)\n  9351: t0 = 0x10c\n  9355: a1 = s1 + 0x1038\n  9359: fallthrough\n      : @323 [@dyn 134] (gas: 8)\n  9360: u64 [a1 + 1888] = 0\n  9364: u64 [a1 + 1880] = 0\n  9368: u64 [a1 + 1864] = 0x6\n  9373: a2 = a1\n  9375: a0 = 0x20\n  9378: a1 = s1 + 0x1780\n  9382: u64 [a2 + 1872] = 0\n  9386: ra = 270, jump @19\n      : @324 [@dyn 135] (gas: 3)\n  9392: a1 = 0x20124\n  9397: a0 = i32 [0x20124]\n  9402: jump @326 if a0 >u 63\n      : @325 (gas: 2)\n  9406: u32 [0x20124] = 0x40\n  9412: fallthrough\n      : @326 (gas: 15)\n  9413: a0 = sp + 0xffffffffffffffe0\n  9416: a2 = a0 & 0xffffffffffffffe0\n  9419: u64 [s1 + 0x80] = a2\n  9423: sp = a2\n  9425: a0 = 0x20130\n  9430: i32 a0 = a0 + 0\n  9432: i32 a2 = a2 + 0\n  9434: u64 [s1 + 0x88] = a1\n  9438: a1 = 0x40\n  9441: u64 [s1 + 0x90] = a0\n  9445: ra = 0x110\n  9449: ecalli 7 // 'hash_keccak_256'\n  9451: a3 = u64 [s1 + 0x80]\n  9455: t0 = 0x112\n  9459: jump @1200\n      : @327 [@dyn 136] (gas: 2)\n  9462: a3 = u64 [s1 + 0x80]\n  9466: t0 = 274, jump @1200\n      : @328 [@dyn 137] (gas: 8)\n  9472: a5 = a4 + 0x200\n  9476: u64 [a5 + 0x40] = a3\n  9479: u64 [a5 + 0x38] = a2\n  9482: u64 [a5 + 0x30] = a1\n  9485: u64 [a5 + 0x28] = a0\n  9488: a0 = s1 + 0x2260\n  9492: a1 = u64 [s1 + 0x98]\n  9496: ra = 276, jump @25\n      : @329 [@dyn 138] (gas: 13)\n  9502: a2 = s1 + 0x1038\n  9506: a0 = u64 [s1 + 0xa0]\n  9510: a3 = a2 + 0x700\n  9514: u64 [a3 + 0x40] = a0\n  9517: a0 = u64 [s1 + 0xa8]\n  9521: u64 [a3 + 0x38] = a0\n  9524: a0 = u64 [s1 + 0xb0]\n  9528: u64 [a3 + 0x30] = a0\n  9531: a1 = s1 + 0x1760\n  9535: a0 = u64 [s1 + 0xb8]\n  9539: u64 [a3 + 0x28] = a0\n  9542: a0 = 0\n  9544: ra = 278, jump @19\n      : @330 [@dyn 139] (gas: 2)\n  9550: a1 = s1 + 0x1038\n  9554: t0 = 280, jump @1239\n      : @331 [@dyn 140] (gas: 3)\n  9560: a1 = s1 + 0x1740\n  9564: u64 [a2 + 1808] = 0\n  9568: ra = 282, jump @19\n      : @332 [@dyn 141] (gas: 7)\n  9574: a1 = u64 [s1 + 0x88]\n  9578: a0 = sp + 0xffffffffffffffe0\n  9581: a0 = a0 & 0xffffffffffffffe0\n  9584: u64 [s1 + 0x98] = a0\n  9588: sp = a0\n  9590: a0 = i32 [a1]\n  9592: jump @334 if a0 >u 63\n      : @333 (gas: 2)\n  9596: u32 [a1 + 0] = 0x40\n  9599: fallthrough\n      : @334 (gas: 11)\n  9600: a0 = sp + 0xffffffffffffffe0\n  9603: a0 = a0 & 0xffffffffffffffe0\n  9606: u64 [s1 + 0x88] = a0\n  9610: sp = a0\n  9612: i32 a2 = a0 + 0\n  9614: a1 = 0x40\n  9617: a0 = u64 [s1 + 0x90]\n  9621: ra = 0x11c\n  9625: ecalli 7 // 'hash_keccak_256'\n  9627: t0 = 0x11e\n  9631: jump @1215\n      : @335 [@dyn 142] (gas: 1)\n  9634: t0 = 286, jump @1215\n      : @336 [@dyn 143] (gas: 2)\n  9640: a0 = s1 + 0x1720\n  9644: ra = 288, jump @21\n      : @337 [@dyn 144] (gas: 2)\n  9650: a3 = s1 + 0x1038\n  9654: t0 = 290, jump @1231\n      : @338 [@dyn 145] (gas: 10)\n  9660: i32 a4 = a4 + 0x38\n  9663: a4 = a4 + s1\n  9666: a5 = a4 + 0x200\n  9670: u64 [a5 + 0x60] = a2\n  9673: u64 [a5 + 0x58] = a3\n  9676: u64 [a5 + 0x50] = a1\n  9679: u64 [a5 + 0x48] = a0\n  9682: a1 = s1 + 0x2280\n  9686: a0 = u64 [s1 + 0x98]\n  9690: ra = 292, jump @25\n      : @339 [@dyn 146] (gas: 3)\n  9696: a0 = s1 + 0x1700\n  9700: a1 = 0x40\n  9703: ra = 294, jump @17\n      : @340 [@dyn 147] (gas: 7)\n  9709: a3 = s1 + 0x1038\n  9713: a5 = a3 + 0x600\n  9717: a0 = u64 [a5 + 0xe0]\n  9721: a1 = u64 [a5 + 0xd8]\n  9725: a2 = u64 [a5 + 0xd0]\n  9729: a4 = u64 [a5 + 0xc8]\n  9733: t0 = 296, jump @1211\n      : @341 [@dyn 148] (gas: 1)\n  9739: jump @343 if a0 == 0\n      : @342 (gas: 1)\n  9742: jump @688\n      : @343 (gas: 13)\n  9745: a0 = u64 [s1 + 0x50]\n  9748: a2 = a3 + 0x600\n  9752: u64 [a2 + 0xa8] = a0\n  9756: a0 = u64 [s1 + 0x58]\n  9759: u64 [a2 + 0xb0] = a0\n  9763: a0 = u64 [s1 + 0x60]\n  9766: u64 [a2 + 0xb8] = a0\n  9770: a1 = s1 + 0x16e0\n  9774: a0 = u64 [s1 + 0x68]\n  9777: u64 [a2 + 0xc0] = a0\n  9781: a0 = a4\n  9783: u64 [s1 + 0x98] = a4\n  9787: ra = 298, jump @19\n      : @344 [@dyn 149] (gas: 23)\n  9793: a0 = u64 [s1 + 0xa0]\n  9797: a4 = s1 + 0x1038\n  9801: a5 = a4 + 0x600\n  9805: u64 [a5 + 0x80] = a0\n  9809: a0 = u64 [s1 + 0xa8]\n  9813: u64 [a5 + 0x78] = a0\n  9816: a0 = u64 [s1 + 0xb0]\n  9820: u64 [a5 + 0x70] = a0\n  9823: a0 = u64 [0x20028]\n  9828: a1 = u64 [0x20030]\n  9833: a2 = u64 [0x20038]\n  9838: a3 = u64 [s1 + 0xb8]\n  9842: u64 [a5 + 0x68] = a3\n  9845: u64 [a5 + 0xa0] = a0\n  9849: u64 [a5 + 0x98] = a1\n  9853: u64 [a5 + 0x90] = a2\n  9857: a0 = u64 [0x20040]\n  9862: a1 = 0x20\n  9865: a2 = s1 + 0x16c0\n  9869: a3 = s1 + 0x16a0\n  9873: u64 [a5 + 0x88] = a0\n  9877: a0 = u64 [s1 + 0x98]\n  9881: ra = 300, jump @26\n      : @345 [@dyn 150] (gas: 5)\n  9887: a0 = 0\n  9889: a1 = u64 [s1 + 0x90]\n  9893: a2 = 0\n  9895: ecalli 11 // 'seal_return'\n  9897: jump @816\n      : @346 (gas: 10)\n  9900: u64 [a2 + 800] = 0\n  9904: u64 [a2 + 792] = 0\n  9908: u64 [a2 + 784] = 0\n  9912: u64 [a2 + 776] = 0\n  9916: a0 = s1 + 0x2000\n  9920: i32 a0 = a0 + 0xfffffffffffffb40\n  9924: ra = 0x12e\n  9928: ecalli 14 // 'value_transferred'\n  9930: t0 = 0x130\n  9934: jump @1237\n      : @347 [@dyn 151] (gas: 1)\n  9937: t0 = 304, jump @1237\n      : @348 [@dyn 152] (gas: 1)\n  9943: t0 = 306, jump @1221\n      : @349 [@dyn 153] (gas: 1)\n  9949: jump @351 if a0 == 0\n      : @350 (gas: 1)\n  9952: jump @702\n      : @351 (gas: 3)\n  9955: a0 = u64 [s1 + 0xb8]\n  9959: a0 = i32 [a0]\n  9961: jump @353 if a0 >u 67\n      : @352 (gas: 1)\n  9965: jump @703\n      : @353 (gas: 11)\n  9968: a0 = sp + 0xffffffffffffffe0\n  9971: a0 = a0 & 0xffffffffffffffe0\n  9974: u64 [s1 + 0xb8] = a0\n  9978: sp = a0\n  9980: a0 = s1 + 0x2000\n  9984: i32 a0 = a0 + 0xfffffffffffffb60\n  9988: a1 = 0x4\n  9991: ra = 0x134\n  9995: ecalli 2 // 'call_data_load'\n  9997: t0 = 0x136\n 10001: jump @1237\n      : @354 [@dyn 154] (gas: 1)\n 10004: t0 = 310, jump @1237\n      : @355 [@dyn 155] (gas: 18)\n 10010: a0 = u64 [a4 + 0x40]\n 10013: a1 = u64 [a4 + 0x38]\n 10016: a2 = u64 [a4 + 0x30]\n 10019: a3 = u64 [a4 + 0x28]\n 10022: u64 [s1 + 0x90] = a0\n 10026: a4 = u64 [s1 + 0xb8]\n 10030: u64 [a4 + 0x18] = a0\n 10033: u64 [s1 + 0x88] = a1\n 10037: u64 [a4 + 0x10] = a1\n 10040: u64 [s1 + 0x80] = a2\n 10044: u64 [a4 + 0x8] = a2\n 10047: u64 [s1 + 0x78] = a3\n 10050: u64 [a4] = a3\n 10052: a0 = s1 + 0x2000\n 10056: i32 a0 = a0 + 0xfffffffffffffb80\n 10060: a1 = 0x24\n 10063: ecalli 2 // 'call_data_load'\n 10065: fallthrough\n      : @356 (gas: 13)\n 10066: a2 = s1 + 0x1838\n 10070: a1 = u64 [a2 + 0x358]\n 10074: a3 = u64 [a2 + 0x360]\n 10078: a0 = 0x100000000\n 10088: a0 = a0 ^ a1\n 10091: a0 = a0 | a3\n 10094: u64 [s1 + 0xb0] = a1\n 10098: a1 = a1 >> 0x20\n 10101: a1 = a1 <u 0x1\n 10104: u64 [s1 + 0xa8] = a3\n 10108: a1 = 0 if a3 != 0\n 10110: a1 = 0 if a0 == 0\n 10112: jump @358 if a1 != 0\n      : @357 (gas: 1)\n 10115: jump @704\n      : @358 (gas: 5)\n 10118: a0 = u64 [a2 + 0x350]\n 10122: u64 [s1 + 0x98] = a0\n 10126: a0 = u64 [a2 + 0x348]\n 10130: u64 [s1 + 0xa0] = a0\n 10134: ra = 312, jump @1112\n      : @359 [@dyn 156] (gas: 8)\n 10140: a1 = s1 + 0x1838\n 10144: u64 [a1 + 896] = 0\n 10148: u64 [a1 + 888] = 0\n 10152: u64 [a1 + 880] = 0\n 10156: u64 [a1 + 872] = 0xa\n 10161: a0 = s1 + 0x1ba0\n 10165: a1 = u64 [s1 + 0xb8]\n 10169: ra = 314, jump @25\n      : @360 [@dyn 157] (gas: 9)\n 10175: a0 = s1 + 0x1838\n 10179: u64 [a0 + 928] = 0\n 10183: u64 [a0 + 920] = 0\n 10187: u64 [a0 + 912] = 0\n 10191: u64 [a0 + 904] = 0xb\n 10196: a0 = s1 + 0x7ff\n 10200: a0 = a0 + 0x241\n 10204: a1 = s1 + 0x1bc0\n 10208: ra = 316, jump @21\n      : @361 [@dyn 158] (gas: 24)\n 10214: a1 = s1 + 0x7ff\n 10218: a1 = a1 + 0x39\n 10221: a0 = u32 [a1 + 0x21c]\n 10225: a1 = u64 [a1 + 0x220]\n 10229: a0 = a0 << 0x20\n 10232: a2 = u64 [s1 + 0xb0]\n 10236: a0 = a0 | a2\n 10239: a2 = u64 [s1 + 0xa8]\n 10243: a1 = a1 | a2\n 10246: a2 = s1 + 0x1838\n 10250: u64 [a2 + 960] = 0\n 10254: u64 [a2 + 952] = 0\n 10258: u64 [a2 + 944] = 0\n 10262: a4 = a2 + 0x300\n 10266: u64 [a4 + 168] = 0xb\n 10271: a3 = u64 [s1 + 0x98]\n 10275: u64 [a4 + 0xd0] = a3\n 10279: a3 = u64 [s1 + 0xa0]\n 10283: u64 [a4 + 0xc8] = a3\n 10287: u64 [a4 + 0xe0] = a1\n 10291: u64 [a4 + 0xd8] = a0\n 10295: a0 = s1 + 0x1be0\n 10299: a1 = s1 + 0x1c00\n 10303: ra = 318, jump @25\n      : @362 [@dyn 159] (gas: 4)\n 10309: a0 = s1 + 0x7ff\n 10313: a0 = a0 + 0x221\n 10317: a1 = 0x40\n 10320: ra = 320, jump @17\n      : @363 [@dyn 160] (gas: 8)\n 10326: a3 = s1 + 0x7ff\n 10330: a3 = a3 + 0x39\n 10333: a0 = u64 [a3 + 0x200]\n 10337: a5 = a3 + 0x100\n 10341: a1 = u64 [a5 + 0xf8]\n 10345: a2 = u64 [a5 + 0xf0]\n 10349: a4 = u64 [a5 + 0xe8]\n 10353: t0 = 322, jump @1211\n      : @364 [@dyn 161] (gas: 1)\n 10359: jump @366 if a0 == 0\n      : @365 (gas: 1)\n 10362: jump @688\n      : @366 (gas: 14)\n 10365: a0 = u64 [s1 + 0x78]\n 10368: a2 = a3 + 0x100\n 10372: u64 [a2 + 0xc8] = a0\n 10376: a0 = u64 [s1 + 0x80]\n 10380: u64 [a2 + 0xd0] = a0\n 10384: a0 = u64 [s1 + 0x88]\n 10388: u64 [a2 + 0xd8] = a0\n 10392: a1 = s1 + 0x7ff\n 10396: a1 = a1 + 0x201\n 10400: a0 = u64 [s1 + 0x90]\n 10404: u64 [a2 + 0xe0] = a0\n 10408: a0 = a4\n 10410: u64 [s1 + 0xb8] = a4\n 10414: ra = 324, jump @19\n      : @367 [@dyn 162] (gas: 26)\n 10420: a0 = u64 [s1 + 0xa8]\n 10424: a4 = s1 + 0x7ff\n 10428: a4 = a4 + 0x39\n 10431: a5 = a4 + 0x100\n 10435: u64 [a5 + 0xa0] = a0\n 10439: a0 = u64 [s1 + 0xb0]\n 10443: u64 [a5 + 0x98] = a0\n 10447: a0 = u64 [s1 + 0x98]\n 10451: u64 [a5 + 0x90] = a0\n 10455: a0 = u64 [0x200b8]\n 10460: a1 = u64 [0x200c0]\n 10465: a2 = u64 [0x200c8]\n 10470: a3 = u64 [s1 + 0xa0]\n 10474: u64 [a5 + 0x88] = a3\n 10478: u64 [a5 + 0xc0] = a0\n 10482: u64 [a5 + 0xb8] = a1\n 10486: u64 [a5 + 0xb0] = a2\n 10490: a0 = u64 [0x200d0]\n 10495: a1 = 0x20\n 10498: a2 = s1 + 0x7ff\n 10502: a2 = a2 + 0x1e1\n 10506: a3 = s1 + 0x7ff\n 10510: a3 = a3 + 0x1c1\n 10514: u64 [a5 + 0xa8] = a0\n 10518: a0 = u64 [s1 + 0xb8]\n 10522: ra = 326, jump @26\n      : @368 [@dyn 163] (gas: 6)\n 10528: a1 = 0x20130\n 10533: i32 a1 = a1 + 0\n 10535: a0 = 0\n 10537: a2 = 0\n 10539: ecalli 11 // 'seal_return'\n 10541: jump @816\n      : @369 (gas: 8)\n 10544: u64 [a3 + 192] = 0\n 10548: u64 [a3 + 184] = 0\n 10552: u64 [a3 + 176] = 0\n 10556: u64 [a3 + 168] = 0\n 10560: a0 = s1 + 0x2000\n 10564: i32 a0 = a0 + 0xe0\n 10568: ecalli 14 // 'value_transferred'\n 10570: fallthrough\n      : @370 (gas: 9)\n 10571: a3 = s1 + 0x2038\n 10575: a0 = u64 [a3 + 0xb8]\n 10579: a1 = u64 [a3 + 0xc0]\n 10583: a2 = u64 [a3 + 0xb0]\n 10587: a3 = u64 [a3 + 0xa8]\n 10591: a1 = a1 | a2\n 10594: a0 = a0 | a3\n 10597: a0 = a0 | a1\n 10600: jump @372 if a0 == 0\n      : @371 (gas: 1)\n 10603: jump @705\n      : @372 (gas: 3)\n 10606: a0 = u64 [s1 + 0xb8]\n 10610: a0 = i32 [a0]\n 10612: jump @374 if a0 >u 35\n      : @373 (gas: 1)\n 10616: jump @706\n      : @374 (gas: 18)\n 10619: a0 = s1 + 0x2000\n 10623: i32 a0 = a0 + 0x100\n 10627: a1 = 0x4\n 10630: ecalli 2 // 'call_data_load'\n 10632: a3 = s1 + 0x2038\n 10636: a0 = u64 [a3 + 0xc8]\n 10640: a1 = u64 [a3 + 0xd0]\n 10644: a2 = u64 [a3 + 0xd8]\n 10648: a3 = u64 [a3 + 0xe0]\n 10652: a4 = s1 + 0x1038\n 10656: a5 = a4 + 0x500\n 10660: u64 [a5 + 0x80] = a3\n 10664: u64 [a5 + 0x78] = a2\n 10667: u64 [a5 + 0x70] = a1\n 10670: a1 = s1 + 0x15a0\n 10674: u64 [a5 + 0x68] = a0\n 10677: a0 = 0\n 10679: ra = 328, jump @19\n      : @375 [@dyn 164] (gas: 3)\n 10685: t0 = 0x14a\n 10689: a1 = s1 + 0x1038\n 10693: fallthrough\n      : @376 [@dyn 165] (gas: 8)\n 10694: u64 [a1 + 1376] = 0\n 10698: u64 [a1 + 1368] = 0\n 10702: u64 [a1 + 1352] = 0x7\n 10707: a2 = a1\n 10709: a0 = 0x20\n 10712: a1 = s1 + 0x1580\n 10716: u64 [a2 + 1360] = 0\n 10720: ra = 332, jump @19\n      : @377 [@dyn 166] (gas: 2)\n 10726: a1 = i32 [0x20124]\n 10731: jump @379 if a1 >u 63\n      : @378 (gas: 2)\n 10735: u32 [0x20124] = 0x40\n 10741: fallthrough\n      : @379 (gas: 13)\n 10742: a0 = sp + 0xffffffffffffffe0\n 10745: a2 = a0 & 0xffffffffffffffe0\n 10748: u64 [s1 + 0xb8] = a2\n 10752: sp = a2\n 10754: a0 = 0x20130\n 10759: i32 a0 = a0 + 0\n 10761: i32 a2 = a2 + 0\n 10763: a1 = 0x40\n 10766: ra = 0x14e\n 10770: ecalli 7 // 'hash_keccak_256'\n 10772: a3 = u64 [s1 + 0xb8]\n 10776: t0 = 0x150\n 10780: jump @1200\n      : @380 [@dyn 167] (gas: 2)\n 10783: a3 = u64 [s1 + 0xb8]\n 10787: t0 = 336, jump @1200\n      : @381 [@dyn 168] (gas: 7)\n 10793: u64 [a4 + 0x100] = a3\n 10797: u64 [a4 + 0xf8] = a2\n 10801: u64 [a4 + 0xf0] = a1\n 10805: u64 [a4 + 0xe8] = a0\n 10809: a0 = s1 + 0x1560\n 10813: a1 = s1 + 0x2120\n 10817: ra = 338, jump @21\n      : @382 [@dyn 169] (gas: 6)\n 10823: a0 = s1 + 0x1038\n 10827: a0 = u64 [a0 + 0x528]\n 10831: u64 [s1 + 0xb8] = a0\n 10835: a0 = s1 + 0x1540\n 10839: a1 = 0x40\n 10842: ra = 340, jump @17\n      : @383 [@dyn 170] (gas: 7)\n 10848: a3 = s1 + 0x1038\n 10852: a5 = a3 + 0x500\n 10856: a4 = u64 [a5 + 0x20]\n 10859: a1 = u64 [a5 + 0x18]\n 10862: a2 = u64 [a5 + 0x10]\n 10865: a0 = u64 [a5 + 0x8]\n 10868: t0 = 342, jump @1207\n      : @384 [@dyn 171] (gas: 1)\n 10874: jump @386 if a1 == 0\n      : @385 (gas: 1)\n 10877: jump @688\n      : @386 (gas: 10)\n 10880: a1 = u8 [s1 + 0xb8]\n 10884: a1 = a1 >u 0\n 10886: u64 [a3 + 1280] = 0\n 10890: u64 [a3 + 1272] = 0\n 10894: u64 [a3 + 0x4e8] = a1\n 10898: a1 = s1 + 0x1520\n 10902: u64 [a3 + 1264] = 0\n 10906: u64 [s1 + 0xb8] = a0\n 10910: ra = 0x1fe\n 10914: jump @19\n      : @387 (gas: 8)\n 10917: u64 [a2 + 320] = 0\n 10921: u64 [a2 + 312] = 0\n 10925: u64 [a2 + 304] = 0\n 10929: u64 [a2 + 296] = 0\n 10933: a0 = s1 + 0x2000\n 10937: i32 a0 = a0 + 0xfffffffffffff960\n 10941: ecalli 14 // 'value_transferred'\n 10943: fallthrough\n      : @388 (gas: 10)\n 10944: a3 = s1 + 0x1838\n 10948: a4 = a3 + 0x100\n 10952: a0 = u64 [a4 + 0x38]\n 10955: a1 = u64 [a4 + 0x40]\n 10958: a2 = u64 [a4 + 0x30]\n 10961: a3 = u64 [a4 + 0x28]\n 10964: a1 = a1 | a2\n 10967: a0 = a0 | a3\n 10970: a0 = a0 | a1\n 10973: jump @390 if a0 == 0\n      : @389 (gas: 1)\n 10976: jump @707\n      : @390 (gas: 3)\n 10979: a0 = u64 [s1 + 0xb8]\n 10983: a0 = i32 [a0]\n 10985: jump @392 if a0 >u 3\n      : @391 (gas: 1)\n 10989: jump @708\n      : @392 (gas: 3)\n 10992: a0 = s1 + 0x480\n 10996: a1 = 0x40\n 10999: ra = 344, jump @17\n      : @393 [@dyn 172] (gas: 16)\n 11005: a0 = u64 [s1 + 0x498]\n 11009: u64 [s1 + 0x18] = a0\n 11012: a0 = u64 [s1 + 0x490]\n 11016: u64 [s1 + 0x20] = a0\n 11019: a0 = u64 [s1 + 0x488]\n 11023: u64 [s1 + 0x28] = a0\n 11026: a0 = u64 [s1 + 0x480]\n 11030: u64 [s1 + 0x30] = a0\n 11033: a1 = s1 + 0x1838\n 11037: u64 [a1 + 352] = 0\n 11041: u64 [a1 + 344] = 0\n 11045: u64 [a1 + 336] = 0\n 11049: u64 [a1 + 328] = 0x1\n 11054: a0 = s1 + 0x460\n 11058: a1 = s1 + 0x1980\n 11062: ra = 346, jump @21\n      : @394 [@dyn 173] (gas: 16)\n 11068: a4 = s1 + 0x400\n 11072: a0 = u64 [a4 + 0x78]\n 11075: a1 = u64 [a4 + 0x70]\n 11078: a2 = u64 [a4 + 0x68]\n 11081: a3 = u64 [a4 + 0x60]\n 11084: u64 [s1 + 0xb0] = a0\n 11088: u64 [a4 + 0x38] = a0\n 11091: u64 [s1 + 0xa8] = a1\n 11095: u64 [a4 + 0x30] = a1\n 11098: u64 [s1 + 0xa0] = a2\n 11102: u64 [a4 + 0x28] = a2\n 11105: a0 = s1 + 0x440\n 11109: a1 = s1 + 0x420\n 11113: u64 [s1 + 0xb8] = a3\n 11117: u64 [a4 + 0x20] = a3\n 11120: ra = 348, jump @922\n      : @395 [@dyn 174] (gas: 1)\n 11126: t0 = 350, jump @1208\n      : @396 [@dyn 175] (gas: 1)\n 11132: jump @398 if a1 == 0\n      : @397 (gas: 1)\n 11135: jump @688\n      : @398 (gas: 15)\n 11138: a5 = s1 + 0x400\n 11142: a2 = u64 [a5 + 0x58]\n 11145: a3 = u64 [a5 + 0x50]\n 11148: a1 = u64 [a5 + 0x48]\n 11151: a4 = u64 [a5 + 0x40]\n 11154: u64 [s1 + 0x60] = a4\n 11157: u64 [a5] = a4\n 11159: u64 [s1 + 0x70] = a1\n 11162: u64 [a5 + 0x8] = a1\n 11165: u64 [s1 + 0x68] = a3\n 11168: u64 [a5 + 0x10] = a3\n 11171: a1 = s1 + 0x400\n 11175: u64 [s1 + 0x78] = a2\n 11178: u64 [a5 + 0x18] = a2\n 11181: ra = 352, jump @19\n      : @399 [@dyn 176] (gas: 3)\n 11187: a3 = u64 [s1 + 0xb8]\n 11191: a0 = a3 & 0x1\n 11194: jump @401 if a0 == 0\n      : @400 (gas: 1)\n 11197: jump @621\n      : @401 (gas: 1)\n 11200: t0 = 354, jump @1204\n      : @402 [@dyn 177] (gas: 1)\n 11206: jump @404 if a1 != 0\n      : @403 (gas: 1)\n 11209: jump @688\n      : @404 (gas: 12)\n 11212: a1 = a3 & 0xffffffffffffff00\n 11216: i32 a0 = a4 + 0x20\n 11219: a3 = u64 [s1 + 0xa0]\n 11223: a2 = s1 + 0x300\n 11227: u64 [a2 + 0x88] = a3\n 11231: u64 [a2 + 0x80] = a1\n 11235: a1 = u64 [s1 + 0xa8]\n 11239: u64 [a2 + 0x90] = a1\n 11243: a1 = s1 + 0x380\n 11247: a3 = u64 [s1 + 0xb0]\n 11251: u64 [a2 + 0x98] = a3\n 11255: ra = 356, jump @19\n      : @405 [@dyn 178] (gas: 1)\n 11261: t0 = 358, jump @1198\n      : @406 [@dyn 179] (gas: 1)\n 11267: jump @664\n      : @407 (gas: 8)\n 11270: u64 [a2 + 1216] = 0\n 11274: u64 [a2 + 1208] = 0\n 11278: u64 [a2 + 1200] = 0\n 11282: u64 [a2 + 1192] = 0\n 11286: a0 = s1 + 0x2000\n 11290: i32 a0 = a0 + 0xfffffffffffffce0\n 11294: ecalli 14 // 'value_transferred'\n 11296: fallthrough\n      : @408 (gas: 10)\n 11297: a3 = s1 + 0x1838\n 11301: a4 = a3 + 0x400\n 11305: a0 = u64 [a4 + 0xb8]\n 11309: a1 = u64 [a4 + 0xc0]\n 11313: a2 = u64 [a4 + 0xb0]\n 11317: a3 = u64 [a4 + 0xa8]\n 11321: a1 = a1 | a2\n 11324: a0 = a0 | a3\n 11327: a0 = a0 | a1\n 11330: jump @410 if a0 == 0\n      : @409 (gas: 1)\n 11333: jump @709\n      : @410 (gas: 3)\n 11336: a0 = u64 [s1 + 0xb8]\n 11340: a0 = i32 [a0]\n 11342: jump @412 if a0 >u 35\n      : @411 (gas: 1)\n 11346: jump @710\n      : @412 (gas: 24)\n 11349: a0 = s1 + 0x2000\n 11353: i32 a0 = a0 + 0xfffffffffffffd00\n 11357: a1 = 0x4\n 11360: ecalli 2 // 'call_data_load'\n 11362: a0 = s1 + 0x1838\n 11366: a1 = a0 + 0x400\n 11370: a2 = u64 [a1 + 0xc8]\n 11374: u64 [s1 + 0xb8] = a2\n 11378: a3 = u64 [a1 + 0xd0]\n 11382: u64 [s1 + 0xb0] = a3\n 11386: a4 = u64 [a1 + 0xd8]\n 11390: u64 [s1 + 0xa8] = a4\n 11394: a5 = u64 [a1 + 0xe0]\n 11398: u64 [s1 + 0xa0] = a5\n 11402: a1 = s1 + 0x7ff\n 11406: a1 = a1 + 0x39\n 11409: u64 [a1 + 0x400] = a5\n 11413: a5 = a1 + 0x300\n 11417: u64 [a5 + 0xf8] = a4\n 11421: u64 [a5 + 0xf0] = a3\n 11425: a0 = s1 + 0x7ff\n 11429: a0 = a0 + 0x421\n 11433: u64 [a5 + 0xe8] = a2\n 11437: ra = 360, jump @1099\n      : @413 [@dyn 180] (gas: 15)\n 11443: a0 = s1 + 0x7ff\n 11447: a0 = a0 + 0x39\n 11450: a1 = u64 [s1 + 0xa0]\n 11454: a3 = a0 + 0x300\n 11458: u64 [a3 + 0xe0] = a1\n 11462: a1 = u64 [s1 + 0xa8]\n 11466: u64 [a3 + 0xd8] = a1\n 11470: a1 = u64 [s1 + 0xb0]\n 11474: u64 [a3 + 0xd0] = a1\n 11478: a1 = s1 + 0x7ff\n 11482: a1 = a1 + 0x401\n 11486: a2 = u64 [s1 + 0xb8]\n 11490: u64 [a3 + 0xc8] = a2\n 11494: a0 = 0\n 11496: ra = 362, jump @19\n      : @414 [@dyn 181] (gas: 11)\n 11502: a1 = s1 + 0x7ff\n 11506: a1 = a1 + 0x39\n 11509: u64 [a1 + 960] = 0\n 11513: u64 [a1 + 952] = 0\n 11517: u64 [a1 + 936] = 0x8\n 11522: a2 = a1\n 11524: a0 = 0x20\n 11527: a1 = s1 + 0x7ff\n 11531: a1 = a1 + 0x3e1\n 11535: u64 [a2 + 944] = 0\n 11539: ra = 364, jump @19\n      : @415 [@dyn 182] (gas: 2)\n 11545: a1 = i32 [0x20124]\n 11550: jump @417 if a1 >u 63\n      : @416 (gas: 2)\n 11554: u32 [0x20124] = 0x40\n 11560: fallthrough\n      : @417 (gas: 12)\n 11561: a0 = sp + 0xffffffffffffffe0\n 11564: a2 = a0 & 0xffffffffffffffe0\n 11567: u64 [s1 + 0xb8] = a2\n 11571: sp = a2\n 11573: a0 = 0x20130\n 11578: i32 a0 = a0 + 0\n 11580: i32 a2 = a2 + 0\n 11582: a1 = 0x40\n 11585: ra = 0x16e\n 11589: ecalli 7 // 'hash_keccak_256'\n 11591: t0 = 0x170\n 11595: jump @1216\n      : @418 [@dyn 183] (gas: 1)\n 11598: t0 = 368, jump @1216\n      : @419 [@dyn 184] (gas: 9)\n 11604: u64 [a4 + 0x500] = a3\n 11608: a3 = a4 + 0x400\n 11612: u64 [a3 + 0xf8] = a2\n 11616: u64 [a3 + 0xf0] = a1\n 11620: u64 [a3 + 0xe8] = a0\n 11624: a0 = s1 + 0x7ff\n 11628: a0 = a0 + 0x3c1\n 11632: a1 = s1 + 0x1d20\n 11636: ra = 370, jump @21\n      : @420 [@dyn 185] (gas: 13)\n 11642: a1 = s1 + 0x7ff\n 11646: a1 = a1 + 0x39\n 11649: a2 = a1 + 0x300\n 11653: a0 = u64 [a2 + 0x98]\n 11657: u64 [s1 + 0xa8] = a0\n 11661: a0 = u64 [a2 + 0x90]\n 11665: u64 [s1 + 0xb8] = a0\n 11669: a0 = u64 [a2 + 0x88]\n 11673: u64 [s1 + 0xb0] = a0\n 11677: a0 = s1 + 0x7ff\n 11681: a0 = a0 + 0x3a1\n 11685: a1 = 0x40\n 11688: ra = 372, jump @17\n      : @421 [@dyn 186] (gas: 8)\n 11694: a3 = s1 + 0x7ff\n 11698: a3 = a3 + 0x39\n 11701: a5 = a3 + 0x300\n 11705: a4 = u64 [a5 + 0x80]\n 11709: a1 = u64 [a5 + 0x78]\n 11712: a2 = u64 [a5 + 0x70]\n 11715: a0 = u64 [a5 + 0x68]\n 11718: t0 = 374, jump @1207\n      : @422 [@dyn 187] (gas: 1)\n 11724: jump @424 if a1 == 0\n      : @423 (gas: 1)\n 11727: jump @688\n      : @424 (gas: 15)\n 11730: a1 = u64 [s1 + 0xa8]\n 11734: a1 = a1 << 0x20\n 11737: a2 = a1 >> 0x20\n 11740: u64 [a3 + 864] = 0\n 11744: a1 = u64 [s1 + 0xb0]\n 11748: a4 = a3 + 0x300\n 11752: u64 [a4 + 0x48] = a1\n 11755: a1 = u64 [s1 + 0xb8]\n 11759: u64 [a4 + 0x50] = a1\n 11762: a1 = s1 + 0x7ff\n 11766: a1 = a1 + 0x381\n 11770: u64 [a4 + 0x58] = a2\n 11773: u64 [s1 + 0xb8] = a0\n 11777: ra = 0x1fe\n 11781: jump @19\n      : @425 (gas: 8)\n 11784: u64 [a2 + 2016] = 0\n 11788: u64 [a2 + 2008] = 0\n 11792: u64 [a2 + 2000] = 0\n 11796: u64 [a2 + 1992] = 0\n 11800: a0 = s1 + 0x2000\n 11804: i32 a0 = a0 + 0\n 11806: ecalli 14 // 'value_transferred'\n 11808: fallthrough\n      : @426 (gas: 10)\n 11809: a3 = s1 + 0x1838\n 11813: a4 = a3 + 0x700\n 11817: a0 = u64 [a4 + 0xd8]\n 11821: a1 = u64 [a4 + 0xe0]\n 11825: a2 = u64 [a4 + 0xd0]\n 11829: a3 = u64 [a4 + 0xc8]\n 11833: a1 = a1 | a2\n 11836: a0 = a0 | a3\n 11839: a0 = a0 | a1\n 11842: jump @428 if a0 == 0\n      : @427 (gas: 1)\n 11845: jump @711\n      : @428 (gas: 3)\n 11848: a0 = u64 [s1 + 0xb8]\n 11852: a0 = i32 [a0]\n 11854: jump @430 if a0 >u 3\n      : @429 (gas: 1)\n 11858: jump @712\n      : @430 (gas: 3)\n 11861: a0 = s1 + 0x1200\n 11865: a1 = 0x40\n 11868: ra = 376, jump @17\n      : @431 [@dyn 188] (gas: 18)\n 11874: a1 = s1 + 0x1038\n 11878: a2 = a1 + 0x100\n 11882: a0 = u64 [a2 + 0xe0]\n 11886: u64 [s1 + 0x18] = a0\n 11889: a0 = u64 [a2 + 0xd8]\n 11893: u64 [s1 + 0x20] = a0\n 11896: a0 = u64 [a2 + 0xd0]\n 11900: u64 [s1 + 0x28] = a0\n 11903: a0 = u64 [a2 + 0xc8]\n 11907: u64 [s1 + 0x30] = a0\n 11910: a1 = s1 + 0x2038\n 11914: u64 [a1 + 0] = 0\n 11916: u64 [a1 + 4294967288] = 0\n 11919: u64 [a1 + 4294967280] = 0\n 11922: u64 [a1 + 4294967272] = 0x2\n 11926: a0 = s1 + 0x11e0\n 11930: a1 = s1 + 0x2020\n 11934: ra = 378, jump @21\n      : @432 [@dyn 189] (gas: 17)\n 11940: a4 = s1 + 0x1038\n 11944: a5 = a4 + 0x100\n 11948: a0 = u64 [a5 + 0xc0]\n 11952: a1 = u64 [a5 + 0xb8]\n 11956: a2 = u64 [a5 + 0xb0]\n 11960: a3 = u64 [a5 + 0xa8]\n 11964: u64 [s1 + 0xb0] = a0\n 11968: u64 [a5 + 0x80] = a0\n 11972: u64 [s1 + 0xa8] = a1\n 11976: u64 [a5 + 0x78] = a1\n 11979: u64 [s1 + 0xa0] = a2\n 11983: u64 [a5 + 0x70] = a2\n 11986: a0 = s1 + 0x11c0\n 11990: a1 = s1 + 0x11a0\n 11994: u64 [s1 + 0xb8] = a3\n 11998: u64 [a5 + 0x68] = a3\n 12001: ra = 380, jump @922\n      : @433 [@dyn 190] (gas: 1)\n 12007: t0 = 382, jump @1208\n      : @434 [@dyn 191] (gas: 1)\n 12013: jump @436 if a1 == 0\n      : @435 (gas: 1)\n 12016: jump @688\n      : @436 (gas: 16)\n 12019: a5 = s1 + 0x1038\n 12023: a2 = u64 [a5 + 0x1a0]\n 12027: a3 = u64 [a5 + 0x198]\n 12031: a1 = u64 [a5 + 0x190]\n 12035: a4 = u64 [a5 + 0x188]\n 12039: u64 [s1 + 0x60] = a4\n 12042: u64 [a5 + 0x148] = a4\n 12046: u64 [s1 + 0x70] = a1\n 12049: a4 = a5 + 0x100\n 12053: u64 [a4 + 0x50] = a1\n 12056: u64 [s1 + 0x68] = a3\n 12059: u64 [a4 + 0x58] = a3\n 12062: a1 = s1 + 0x1180\n 12066: u64 [s1 + 0x78] = a2\n 12069: u64 [a4 + 0x60] = a2\n 12072: ra = 384, jump @19\n      : @437 [@dyn 192] (gas: 3)\n 12078: a3 = u64 [s1 + 0xb8]\n 12082: a0 = a3 & 0x1\n 12085: jump @439 if a0 == 0\n      : @438 (gas: 1)\n 12088: jump @636\n      : @439 (gas: 1)\n 12091: t0 = 386, jump @1204\n      : @440 [@dyn 193] (gas: 1)\n 12097: jump @442 if a1 != 0\n      : @441 (gas: 1)\n 12100: jump @688\n      : @442 (gas: 12)\n 12103: a1 = a3 & 0xffffffffffffff00\n 12107: i32 a0 = a4 + 0x20\n 12110: a2 = s1 + 0x1038\n 12114: a3 = u64 [s1 + 0xa0]\n 12118: u64 [a2 + 0xd0] = a3\n 12122: u64 [a2 + 0xc8] = a1\n 12126: a1 = u64 [s1 + 0xa8]\n 12130: u64 [a2 + 0xd8] = a1\n 12134: a1 = s1 + 0x1100\n 12138: a3 = u64 [s1 + 0xb0]\n 12142: u64 [a2 + 0xe0] = a3\n 12146: ra = 388, jump @19\n      : @443 [@dyn 194] (gas: 1)\n 12152: t0 = 390, jump @1198\n      : @444 [@dyn 195] (gas: 1)\n 12158: jump @672\n      : @445 (gas: 8)\n 12161: u64 [a2 + 1152] = 0\n 12165: u64 [a2 + 1144] = 0\n 12169: u64 [a2 + 1136] = 0\n 12173: u64 [a2 + 1128] = 0\n 12177: a0 = s1 + 0x2000\n 12181: i32 a0 = a0 + 0xfffffffffffffca0\n 12185: ecalli 14 // 'value_transferred'\n 12187: fallthrough\n      : @446 (gas: 11)\n 12188: a3 = s1 + 0x1838\n 12192: a5 = a3 + 0x400\n 12196: a0 = u64 [a5 + 0x78]\n 12199: a1 = u64 [a5 + 0x80]\n 12203: a2 = u64 [a5 + 0x70]\n 12206: a4 = a3\n 12208: a3 = u64 [a5 + 0x68]\n 12211: a1 = a1 | a2\n 12214: a0 = a0 | a3\n 12217: a0 = a0 | a1\n 12220: jump @448 if a0 == 0\n      : @447 (gas: 1)\n 12223: jump @713\n      : @448 (gas: 3)\n 12226: a0 = u64 [s1 + 0xb8]\n 12230: a0 = i32 [a0]\n 12232: jump @450 if a0 >u 3\n      : @449 (gas: 1)\n 12236: jump @714\n      : @450 (gas: 8)\n 12239: u64 [a4 + 1184] = 0\n 12243: u64 [a4 + 1176] = 0\n 12247: u64 [a4 + 1168] = 0\n 12251: u64 [a4 + 1160] = 0x4\n 12256: a0 = s1 + 0x7ff\n 12260: a0 = a0 + 0x361\n 12264: a1 = s1 + 0x1cc0\n 12268: ra = 392, jump @21\n      : @451 [@dyn 196] (gas: 15)\n 12274: a1 = s1 + 0x7ff\n 12278: a1 = a1 + 0x39\n 12281: a2 = a1 + 0x300\n 12285: a0 = u64 [a2 + 0x40]\n 12288: u64 [s1 + 0xb8] = a0\n 12292: a0 = u64 [a2 + 0x38]\n 12295: u64 [s1 + 0xb0] = a0\n 12299: a0 = u64 [a2 + 0x30]\n 12302: u64 [s1 + 0xa8] = a0\n 12306: a0 = u64 [a2 + 0x28]\n 12309: u64 [s1 + 0xa0] = a0\n 12313: a0 = s1 + 0x7ff\n 12317: a0 = a0 + 0x341\n 12321: a1 = 0x40\n 12324: ra = 394, jump @17\n      : @452 [@dyn 197] (gas: 8)\n 12330: a3 = s1 + 0x7ff\n 12334: a3 = a3 + 0x39\n 12337: a5 = a3 + 0x300\n 12341: a0 = u64 [a5 + 0x20]\n 12344: a1 = u64 [a5 + 0x18]\n 12347: a2 = u64 [a5 + 0x10]\n 12350: a4 = u64 [a5 + 0x8]\n 12353: t0 = 396, jump @1211\n      : @453 [@dyn 198] (gas: 1)\n 12359: jump @455 if a0 == 0\n      : @454 (gas: 1)\n 12362: jump @688\n      : @455 (gas: 15)\n 12365: a0 = u64 [s1 + 0xa0]\n 12369: a1 = a3 + 0x200\n 12373: u64 [a1 + 0xe8] = a0\n 12377: a0 = u64 [s1 + 0xa8]\n 12381: u64 [a1 + 0xf0] = a0\n 12385: a0 = u64 [s1 + 0xb0]\n 12389: u64 [a1 + 0xf8] = a0\n 12393: a1 = s1 + 0x7ff\n 12397: a1 = a1 + 0x321\n 12401: a0 = u64 [s1 + 0xb8]\n 12405: u64 [a3 + 0x300] = a0\n 12409: a0 = a4\n 12411: u64 [s1 + 0xb8] = a4\n 12415: ra = 0x1fe\n 12419: jump @19\n      : @456 (gas: 8)\n 12422: u64 [a2 + 448] = 0\n 12426: u64 [a2 + 440] = 0\n 12430: u64 [a2 + 432] = 0\n 12434: u64 [a2 + 424] = 0\n 12438: a0 = s1 + 0x2000\n 12442: i32 a0 = a0 + 0xfffffffffffff9e0\n 12446: ecalli 14 // 'value_transferred'\n 12448: fallthrough\n      : @457 (gas: 10)\n 12449: a3 = s1 + 0x1838\n 12453: a4 = a3 + 0x100\n 12457: a0 = u64 [a4 + 0xb8]\n 12461: a1 = u64 [a4 + 0xc0]\n 12465: a2 = u64 [a4 + 0xb0]\n 12469: a3 = u64 [a4 + 0xa8]\n 12473: a1 = a1 | a2\n 12476: a0 = a0 | a3\n 12479: a0 = a0 | a1\n 12482: jump @459 if a0 == 0\n      : @458 (gas: 1)\n 12485: jump @715\n      : @459 (gas: 3)\n 12488: a0 = u64 [s1 + 0xb8]\n 12492: a0 = i32 [a0]\n 12494: jump @461 if a0 >u 35\n      : @460 (gas: 1)\n 12498: jump @716\n      : @461 (gas: 20)\n 12501: a0 = s1 + 0x2000\n 12505: i32 a0 = a0 + 0xfffffffffffffa00\n 12509: a1 = 0x4\n 12512: ecalli 2 // 'call_data_load'\n 12514: a0 = s1 + 0x1838\n 12518: a4 = a0 + 0x100\n 12522: a1 = u64 [a4 + 0xc8]\n 12526: u64 [s1 + 0xb8] = a1\n 12530: a2 = u64 [a4 + 0xd0]\n 12534: u64 [s1 + 0xb0] = a2\n 12538: a3 = u64 [a4 + 0xd8]\n 12542: u64 [s1 + 0xa8] = a3\n 12546: a0 = u64 [a4 + 0xe0]\n 12550: u64 [s1 + 0xa0] = a0\n 12554: u64 [s1 + 0x738] = a0\n 12558: u64 [s1 + 0x730] = a3\n 12562: u64 [s1 + 0x728] = a2\n 12566: a0 = s1 + 0x720\n 12570: u64 [s1 + 0x720] = a1\n 12574: ra = 398, jump @1099\n      : @462 [@dyn 199] (gas: 12)\n 12580: a0 = u64 [s1 + 0xa0]\n 12584: a2 = s1 + 0x700\n 12588: u64 [a2 + 0x18] = a0\n 12591: a0 = u64 [s1 + 0xa8]\n 12595: u64 [a2 + 0x10] = a0\n 12598: a0 = u64 [s1 + 0xb0]\n 12602: u64 [a2 + 0x8] = a0\n 12605: a1 = s1 + 0x700\n 12609: a0 = u64 [s1 + 0xb8]\n 12613: u64 [a2] = a0\n 12615: a0 = 0\n 12617: ra = 400, jump @19\n      : @463 [@dyn 200] (gas: 7)\n 12623: u64 [s1 + 1784] = 0\n 12627: u64 [s1 + 1776] = 0\n 12631: u64 [s1 + 1760] = 0x5\n 12636: a0 = 0x20\n 12639: a1 = s1 + 0x6e0\n 12643: u64 [s1 + 1768] = 0\n 12647: ra = 402, jump @19\n      : @464 [@dyn 201] (gas: 7)\n 12653: a0 = sp + 0xffffffffffffffe0\n 12656: a0 = a0 & 0xffffffffffffffe0\n 12659: u64 [s1 + 0xb8] = a0\n 12663: sp = a0\n 12665: a2 = 0x20124\n 12670: a0 = i32 [0x20124]\n 12675: jump @466 if a0 >u 63\n      : @465 (gas: 2)\n 12679: u32 [0x20124] = 0x40\n 12685: fallthrough\n      : @466 (gas: 32)\n 12686: u64 [s1 + 0xa8] = a2\n 12690: a0 = sp + 0xffffffffffffffe0\n 12693: a2 = a0 & 0xffffffffffffffe0\n 12696: u64 [s1 + 0xb0] = a2\n 12700: sp = a2\n 12702: a0 = 0x20130\n 12707: i32 a0 = a0 + 0\n 12709: i32 a2 = a2 + 0\n 12711: a1 = 0x40\n 12714: u64 [s1 + 0xa0] = a0\n 12718: ecalli 7 // 'hash_keccak_256'\n 12720: a3 = u64 [s1 + 0xb0]\n 12724: a0 = u64 [a3 + 0x18]\n 12727: a1 = u64 [a3 + 0x10]\n 12730: a2 = u64 [a3 + 0x8]\n 12733: a3 = u64 [a3]\n 12735: a4 = reverse a0\n 12737: a1 = reverse a1\n 12739: a2 = reverse a2\n 12741: a0 = reverse a3\n 12743: u64 [s1 + 0xb0] = a0\n 12747: a3 = u64 [s1 + 0xb8]\n 12751: u64 [a3 + 0x18] = a0\n 12754: u64 [s1 + 0x88] = a2\n 12758: u64 [a3 + 0x10] = a2\n 12761: u64 [s1 + 0x90] = a1\n 12765: u64 [a3 + 0x8] = a1\n 12768: u64 [s1 + 0x98] = a4\n 12772: u64 [a3] = a4\n 12774: a0 = s1 + 0x6c0\n 12778: a1 = 0x40\n 12781: ra = 404, jump @17\n      : @467 [@dyn 202] (gas: 11)\n 12787: a0 = u64 [s1 + 0x6d8]\n 12791: u64 [s1 + 0x18] = a0\n 12794: a0 = u64 [s1 + 0x6d0]\n 12798: u64 [s1 + 0x20] = a0\n 12801: a0 = u64 [s1 + 0x6c8]\n 12805: u64 [s1 + 0x28] = a0\n 12808: a0 = u64 [s1 + 0x6c0]\n 12812: u64 [s1 + 0x30] = a0\n 12815: a0 = s1 + 0x6a0\n 12819: a1 = u64 [s1 + 0xb8]\n 12823: ra = 406, jump @21\n      : @468 [@dyn 203] (gas: 16)\n 12829: a4 = s1 + 0x600\n 12833: a0 = u64 [a4 + 0xb8]\n 12837: a1 = u64 [a4 + 0xb0]\n 12841: a2 = u64 [a4 + 0xa8]\n 12845: a3 = u64 [a4 + 0xa0]\n 12849: u64 [s1 + 0x80] = a0\n 12853: u64 [a4 + 0x78] = a0\n 12856: u64 [s1 + 0x58] = a1\n 12859: u64 [a4 + 0x70] = a1\n 12862: u64 [s1 + 0x50] = a2\n 12865: u64 [a4 + 0x68] = a2\n 12868: a0 = s1 + 0x680\n 12872: a1 = s1 + 0x660\n 12876: u64 [s1 + 0xb8] = a3\n 12880: u64 [a4 + 0x60] = a3\n 12883: ra = 408, jump @922\n      : @469 [@dyn 204] (gas: 1)\n 12889: t0 = 410, jump @1208\n      : @470 [@dyn 205] (gas: 1)\n 12895: jump @472 if a1 == 0\n      : @471 (gas: 1)\n 12898: jump @688\n      : @472 (gas: 15)\n 12901: a5 = s1 + 0x600\n 12905: a2 = u64 [a5 + 0x98]\n 12909: a3 = u64 [a5 + 0x90]\n 12913: a1 = u64 [a5 + 0x88]\n 12917: a4 = u64 [a5 + 0x80]\n 12921: u64 [s1 + 0x60] = a4\n 12924: u64 [a5 + 0x40] = a4\n 12927: u64 [s1 + 0x70] = a1\n 12930: u64 [a5 + 0x48] = a1\n 12933: u64 [s1 + 0x68] = a3\n 12936: u64 [a5 + 0x50] = a3\n 12939: a1 = s1 + 0x640\n 12943: u64 [s1 + 0x78] = a2\n 12946: u64 [a5 + 0x58] = a2\n 12949: ra = 412, jump @19\n      : @473 [@dyn 206] (gas: 3)\n 12955: a3 = u64 [s1 + 0xb8]\n 12959: a0 = a3 & 0x1\n 12962: jump @475 if a0 == 0\n      : @474 (gas: 1)\n 12965: jump @650\n      : @475 (gas: 1)\n 12968: t0 = 414, jump @1204\n      : @476 [@dyn 207] (gas: 1)\n 12974: jump @478 if a1 != 0\n      : @477 (gas: 1)\n 12977: jump @688\n      : @478 (gas: 12)\n 12980: a1 = a3 & 0xffffffffffffff00\n 12984: i32 a0 = a4 + 0x20\n 12987: a3 = u64 [s1 + 0x50]\n 12990: a2 = s1 + 0x500\n 12994: u64 [a2 + 0xc8] = a3\n 12998: u64 [a2 + 0xc0] = a1\n 13002: a1 = u64 [s1 + 0x58]\n 13005: u64 [a2 + 0xd0] = a1\n 13009: a1 = s1 + 0x5c0\n 13013: a3 = u64 [s1 + 0x80]\n 13017: u64 [a2 + 0xd8] = a3\n 13021: ra = 416, jump @19\n      : @479 [@dyn 208] (gas: 1)\n 13027: t0 = 418, jump @1198\n      : @480 [@dyn 209] (gas: 1)\n 13033: jump @680\n      : @481 (gas: 1)\n 13036: jump @483 if a0 == 1985678390\n      : @482 (gas: 1)\n 13043: jump @717\n      : @483 (gas: 8)\n 13046: u64 [a2 + 1696] = 0\n 13050: u64 [a2 + 1688] = 0\n 13054: u64 [a2 + 1680] = 0\n 13058: u64 [a2 + 1672] = 0\n 13062: a0 = s1 + 0x2000\n 13066: i32 a0 = a0 + 0xfffffffffffffec0\n 13070: ecalli 14 // 'value_transferred'\n 13072: fallthrough\n      : @484 (gas: 11)\n 13073: a3 = s1 + 0x1838\n 13077: a5 = a3 + 0x600\n 13081: a0 = u64 [a5 + 0x98]\n 13085: a1 = u64 [a5 + 0xa0]\n 13089: a2 = u64 [a5 + 0x90]\n 13093: a4 = a3\n 13095: a3 = u64 [a5 + 0x88]\n 13099: a1 = a1 | a2\n 13102: a0 = a0 | a3\n 13105: a0 = a0 | a1\n 13108: jump @486 if a0 == 0\n      : @485 (gas: 1)\n 13111: jump @722\n      : @486 (gas: 3)\n 13114: a0 = u64 [s1 + 0xb8]\n 13118: a0 = i32 [a0]\n 13120: jump @488 if a0 >u 3\n      : @487 (gas: 1)\n 13124: jump @723\n      : @488 (gas: 8)\n 13127: u64 [a4 + 1728] = 0\n 13131: u64 [a4 + 1720] = 0\n 13135: u64 [a4 + 1712] = 0\n 13139: u64 [a4 + 1704] = 0xb\n 13144: a0 = s1 + 0x7ff\n 13148: a0 = a0 + 0x6a1\n 13152: a1 = s1 + 0x1ee0\n 13156: ra = 420, jump @21\n      : @489 [@dyn 210] (gas: 13)\n 13162: a1 = s1 + 0x7ff\n 13166: a1 = a1 + 0x39\n 13169: a2 = a1 + 0x600\n 13173: a0 = u64 [a2 + 0x78]\n 13176: u64 [s1 + 0xa8] = a0\n 13180: a0 = u64 [a2 + 0x70]\n 13183: u64 [s1 + 0xb8] = a0\n 13187: a0 = u64 [a2 + 0x68]\n 13190: u64 [s1 + 0xb0] = a0\n 13194: a0 = s1 + 0x7ff\n 13198: a0 = a0 + 0x681\n 13202: a1 = 0x40\n 13205: ra = 422, jump @17\n      : @490 [@dyn 211] (gas: 8)\n 13211: a3 = s1 + 0x7ff\n 13215: a3 = a3 + 0x39\n 13218: a5 = a3 + 0x600\n 13222: a4 = u64 [a5 + 0x60]\n 13225: a1 = u64 [a5 + 0x58]\n 13228: a2 = u64 [a5 + 0x50]\n 13231: a0 = u64 [a5 + 0x48]\n 13234: t0 = 424, jump @1207\n      : @491 [@dyn 212] (gas: 1)\n 13240: jump @493 if a1 == 0\n      : @492 (gas: 1)\n 13243: jump @688\n      : @493 (gas: 15)\n 13246: a1 = u64 [s1 + 0xa8]\n 13250: a1 = a1 << 0x20\n 13253: a2 = a1 >> 0x20\n 13256: u64 [a3 + 1600] = 0\n 13260: a1 = u64 [s1 + 0xb0]\n 13264: a4 = a3 + 0x600\n 13268: u64 [a4 + 0x28] = a1\n 13271: a1 = u64 [s1 + 0xb8]\n 13275: u64 [a4 + 0x30] = a1\n 13278: a1 = s1 + 0x7ff\n 13282: a1 = a1 + 0x661\n 13286: u64 [a4 + 0x38] = a2\n 13289: u64 [s1 + 0xb8] = a0\n 13293: ra = 0x1fe\n 13297: jump @19\n      : @494 (gas: 8)\n 13300: u64 [a2 + 1760] = 0\n 13304: u64 [a2 + 1752] = 0\n 13308: u64 [a2 + 1744] = 0\n 13312: u64 [a2 + 1736] = 0\n 13316: a0 = s1 + 0x2000\n 13320: i32 a0 = a0 + 0xffffffffffffff00\n 13324: ecalli 14 // 'value_transferred'\n 13326: fallthrough\n      : @495 (gas: 11)\n 13327: a3 = s1 + 0x1838\n 13331: a5 = a3 + 0x600\n 13335: a0 = u64 [a5 + 0xd8]\n 13339: a1 = u64 [a5 + 0xe0]\n 13343: a2 = u64 [a5 + 0xd0]\n 13347: a4 = a3\n 13349: a3 = u64 [a5 + 0xc8]\n 13353: a1 = a1 | a2\n 13356: a0 = a0 | a3\n 13359: a0 = a0 | a1\n 13362: jump @497 if a0 == 0\n      : @496 (gas: 1)\n 13365: jump @724\n      : @497 (gas: 3)\n 13368: a0 = u64 [s1 + 0xb8]\n 13372: a1 = i32 [a0]\n 13374: jump @499 if a1 >u 3\n      : @498 (gas: 1)\n 13378: jump @725\n      : @499 (gas: 8)\n 13381: u64 [a4 + 1792] = 0\n 13385: u64 [a4 + 1784] = 0\n 13389: u64 [a4 + 1776] = 0\n 13393: u64 [a4 + 1768] = 0x3\n 13398: a0 = s1 + 0x7ff\n 13402: a0 = a0 + 0x701\n 13406: a1 = s1 + 0x1f20\n 13410: ra = 426, jump @21\n      : @500 [@dyn 213] (gas: 13)\n 13416: a1 = s1 + 0x7ff\n 13420: a1 = a1 + 0x39\n 13423: a2 = a1 + 0x600\n 13427: a0 = u64 [a2 + 0xd8]\n 13431: u64 [s1 + 0xa8] = a0\n 13435: a0 = u64 [a2 + 0xd0]\n 13439: u64 [s1 + 0xb8] = a0\n 13443: a0 = u64 [a2 + 0xc8]\n 13447: u64 [s1 + 0xb0] = a0\n 13451: a0 = s1 + 0x7ff\n 13455: a0 = a0 + 0x6e1\n 13459: a1 = 0x40\n 13462: ra = 428, jump @17\n      : @501 [@dyn 214] (gas: 8)\n 13468: a3 = s1 + 0x7ff\n 13472: a3 = a3 + 0x39\n 13475: a5 = a3 + 0x600\n 13479: a4 = u64 [a5 + 0xc0]\n 13483: a1 = u64 [a5 + 0xb8]\n 13487: a2 = u64 [a5 + 0xb0]\n 13491: a0 = u64 [a5 + 0xa8]\n 13495: t0 = 430, jump @1207\n      : @502 [@dyn 215] (gas: 1)\n 13501: jump @504 if a1 == 0\n      : @503 (gas: 1)\n 13504: jump @688\n      : @504 (gas: 15)\n 13507: a1 = u64 [s1 + 0xa8]\n 13511: a1 = a1 << 0x20\n 13514: a2 = a1 >> 0x20\n 13517: u64 [a3 + 1696] = 0\n 13521: a1 = u64 [s1 + 0xb0]\n 13525: a4 = a3 + 0x600\n 13529: u64 [a4 + 0x88] = a1\n 13533: a1 = u64 [s1 + 0xb8]\n 13537: u64 [a4 + 0x90] = a1\n 13541: a1 = s1 + 0x7ff\n 13545: a1 = a1 + 0x6c1\n 13549: u64 [a4 + 0x98] = a2\n 13553: u64 [s1 + 0xb8] = a0\n 13557: ra = 0x1fe\n 13561: jump @19\n      : @505 (gas: 8)\n 13564: u64 [a2 + 576] = 0\n 13568: u64 [a2 + 568] = 0\n 13572: u64 [a2 + 560] = 0\n 13576: u64 [a2 + 552] = 0\n 13580: a0 = s1 + 0x2000\n 13584: i32 a0 = a0 + 0xfffffffffffffa60\n 13588: ecalli 14 // 'value_transferred'\n 13590: fallthrough\n      : @506 (gas: 10)\n 13591: a3 = s1 + 0x1838\n 13595: a4 = a3 + 0x200\n 13599: a0 = u64 [a4 + 0x38]\n 13602: a1 = u64 [a4 + 0x40]\n 13605: a2 = u64 [a4 + 0x30]\n 13608: a3 = u64 [a4 + 0x28]\n 13611: a1 = a1 | a2\n 13614: a0 = a0 | a3\n 13617: a0 = a0 | a1\n 13620: jump @508 if a0 == 0\n      : @507 (gas: 1)\n 13623: jump @726\n      : @508 (gas: 3)\n 13626: a0 = u64 [s1 + 0xb8]\n 13630: a0 = i32 [a0]\n 13632: jump @510 if a0 >u 67\n      : @509 (gas: 1)\n 13636: jump @727\n      : @510 (gas: 3)\n 13639: a0 = s1 + 0x7ff\n 13643: a0 = a0 + 0x1a1\n 13647: ra = 432, jump @907\n      : @511 [@dyn 216] (gas: 31)\n 13653: a1 = s1 + 0x7ff\n 13657: a1 = a1 + 0x39\n 13660: a2 = a1 + 0x100\n 13664: a0 = u64 [a2 + 0x78]\n 13667: u64 [s1 + 0xa8] = a0\n 13671: a0 = u64 [a2 + 0x70]\n 13674: u64 [s1 + 0xb0] = a0\n 13678: a0 = u64 [a2 + 0x68]\n 13681: u64 [s1 + 0xb8] = a0\n 13685: a0 = s1 + 0x2000\n 13689: i32 a0 = a0 + 0xfffffffffffffa80\n 13693: a1 = 0x24\n 13696: ecalli 2 // 'call_data_load'\n 13698: a1 = s1 + 0x1838\n 13702: a2 = a1 + 0x200\n 13706: a0 = u64 [a2 + 0x60]\n 13709: u64 [s1 + 0x68] = a0\n 13712: a0 = u64 [a2 + 0x58]\n 13715: u64 [s1 + 0x70] = a0\n 13718: a0 = u64 [a2 + 0x50]\n 13721: u64 [s1 + 0x78] = a0\n 13724: a0 = u64 [a2 + 0x48]\n 13727: u64 [s1 + 0x80] = a0\n 13731: u64 [a1 + 640] = 0\n 13735: u64 [a1 + 632] = 0\n 13739: u64 [a1 + 624] = 0\n 13743: u64 [a2 + 104] = 0x3\n 13747: a0 = s1 + 0x7ff\n 13751: a0 = a0 + 0x181\n 13755: a1 = s1 + 0x1aa0\n 13759: ra = 434, jump @21\n      : @512 [@dyn 217] (gas: 14)\n 13765: a1 = s1 + 0x7ff\n 13769: a1 = a1 + 0x39\n 13772: a0 = u64 [a1 + 0x150]\n 13776: u64 [s1 + 0xa0] = a0\n 13780: a0 = u64 [a1 + 0x148]\n 13784: u64 [s1 + 0x98] = a0\n 13788: a0 = u32 [a1 + 0x158]\n 13792: u64 [s1 + 0x90] = a0\n 13796: a0 = 0x30130\n 13801: u64 [s1 + 0x88] = a0\n 13805: i32 a0 = a0 + 0\n 13807: ra = 0x1b4\n 13811: ecalli 4 // 'caller'\n 13813: fallthrough\n      : @513 [@dyn 218] (gas: 5)\n 13814: a2 = u64 [s1 + 0x88]\n 13818: a0 = u64 [a2 + 0x8]\n 13821: a1 = u64 [a2]\n 13823: a2 = i32 [a2 + 0x10]\n 13826: t0 = 438, jump @1194\n      : @514 [@dyn 219] (gas: 9)\n 13832: a2 = u64 [s1 + 0x90]\n 13836: a1 = a1 ^ a2\n 13839: a2 = u64 [s1 + 0x98]\n 13843: a0 = a0 ^ a2\n 13846: a0 = a0 | a1\n 13849: a1 = u64 [s1 + 0xa0]\n 13853: a1 = a1 ^ a3\n 13856: a0 = a0 | a1\n 13859: jump @516 if a0 == 0\n      : @515 (gas: 1)\n 13862: jump @728\n      : @516 (gas: 8)\n 13865: a0 = u64 [s1 + 0xa8]\n 13869: a0 = a0 << 0x20\n 13872: a3 = a0 >> 0x20\n 13875: a0 = u64 [s1 + 0xb0]\n 13879: a1 = u64 [s1 + 0xb8]\n 13883: a0 = a0 | a1\n 13886: a0 = a0 | a3\n 13889: jump @518 if a0 == 0\n      : @517 (gas: 1)\n 13892: jump @732\n      : @518 (gas: 4)\n 13895: a0 = s1 + 0x7ff\n 13899: a0 = a0 + 0x21\n 13902: a1 = 0x40\n 13905: ra = 440, jump @17\n      : @519 [@dyn 220] (gas: 16)\n 13911: a0 = s1 + 0x7ff\n 13915: a0 = a0 + 0x39\n 13918: a4 = u64 [a0]\n 13920: a5 = u64 [a0 + 0xfffffffffffffff8]\n 13923: a0 = s1 + 0x1000\n 13927: a3 = u64 [a0 + 0xfffffffffffff828]\n 13931: a0 = s1 + 0x1000\n 13935: a0 = u64 [a0 + 0xfffffffffffff820]\n 13939: a2 = a3 | a4\n 13942: a1 = a0 | a5\n 13945: a1 = a1 | a2\n 13948: a1 = a1 >> 0x20\n 13951: a2 = a2 | a5\n 13954: a2 = a2 << 0x20\n 13957: a1 = a1 | a2\n 13960: jump @521 if a1 == 0\n      : @520 (gas: 1)\n 13963: jump @688\n      : @521 (gas: 16)\n 13966: a1 = s1 + 0x1000\n 13970: u64 [a1 + 4294965264] = 0\n 13974: a1 = s1 + 0x1000\n 13978: u64 [a1 + 4294965256] = 0\n 13982: a1 = s1 + 0x1000\n 13986: u64 [a1 + 4294965248] = 0\n 13990: a2 = 0x8c379a000000000\n 14000: a1 = s1 + 0x7ff\n 14004: a1 = a1 + 0x1\n 14007: t0 = s1 + 0x1000\n 14011: u64 [t0 + 0xfffffffffffff818] = a2\n 14015: u64 [s1 + 0xb8] = a0\n 14019: u64 [s1 + 0xb0] = a3\n 14023: u64 [s1 + 0xa8] = a4\n 14027: u64 [s1 + 0xa0] = a5\n 14031: ra = 442, jump @19\n      : @522 [@dyn 221] (gas: 5)\n 14037: a1 = u64 [s1 + 0xb8]\n 14041: a0 = u64 [s1 + 0xa8]\n 14045: a3 = u64 [s1 + 0xa0]\n 14049: a3 = a3 | a0\n 14052: t0 = 444, jump @1199\n      : @523 [@dyn 222] (gas: 1)\n 14058: jump @525 if a0 != 0\n      : @524 (gas: 1)\n 14061: jump @688\n      : @525 (gas: 9)\n 14064: i32 a0 = a1 + 0x4\n 14067: u64 [s1 + 2040] = 0\n 14071: u64 [s1 + 2032] = 0\n 14075: u64 [s1 + 2016] = 0x20\n 14080: a1 = s1 + 0x7e0\n 14084: u64 [s1 + 2024] = 0\n 14088: u64 [s1 + 0xa8] = a3\n 14092: u64 [s1 + 0xa0] = a4\n 14096: ra = 446, jump @19\n      : @526 [@dyn 223] (gas: 1)\n 14102: t0 = 448, jump @1210\n      : @527 [@dyn 224] (gas: 1)\n 14108: jump @529 if a0 != 0\n      : @528 (gas: 1)\n 14111: jump @688\n      : @529 (gas: 7)\n 14114: i32 a0 = a1 + 0x24\n 14117: u64 [s1 + 2008] = 0\n 14121: u64 [s1 + 2000] = 0\n 14125: u64 [s1 + 1984] = 0x4\n 14130: a1 = s1 + 0x7c0\n 14134: u64 [s1 + 1992] = 0\n 14138: ra = 450, jump @19\n      : @530 [@dyn 225] (gas: 1)\n 14144: t0 = 452, jump @1197\n      : @531 [@dyn 226] (gas: 1)\n 14150: jump @533 if a0 != 0\n      : @532 (gas: 1)\n 14153: jump @688\n      : @533 (gas: 9)\n 14156: i32 a0 = a2 + 0x44\n 14159: u64 [s1 + 1968] = 0\n 14163: u64 [s1 + 1960] = 0\n 14167: a1 = 0x746f3d3000000000\n 14177: u64 [s1 + 0x7b8] = a1\n 14181: a1 = s1 + 0x7a0\n 14185: u64 [s1 + 1952] = 0\n 14189: ra = 0x20e\n 14193: jump @19\n      : @534 (gas: 3)\n 14196: a0 = u64 [s1 + 0xb8]\n 14200: a0 = i32 [a0]\n 14202: jump @536 if a0 >u 35\n      : @535 (gas: 1)\n 14206: jump @757\n      : @536 (gas: 5)\n 14209: a0 = s1 + 0x2000\n 14213: i32 a0 = a0 + 0xa0\n 14217: a1 = 0x4\n 14220: ecalli 2 // 'call_data_load'\n 14222: fallthrough\n      : @537 (gas: 8)\n 14223: a5 = s1 + 0x2038\n 14227: a0 = u64 [a5 + 0x80]\n 14231: a1 = u64 [a5 + 0x78]\n 14234: a2 = u64 [a5 + 0x70]\n 14237: a3 = a1 | a0\n 14240: a4 = a2 <u 0x1\n 14243: a4 = 0 if a3 != 0\n 14245: jump @539 if a4 != 0\n      : @538 (gas: 1)\n 14248: jump @758\n      : @539 (gas: 26)\n 14251: a3 = u64 [a5 + 0x68]\n 14254: a4 = u64 [s1 + 0xb8]\n 14258: t0 = u32 [a4]\n 14260: a5 = a3 + 0x4\n 14263: a3 = a5 <u a3\n 14266: a4 = a2 + a3\n 14269: a2 = a4 <u a2\n 14272: a2 = a3 if a3 == 0\n 14275: a2 = a2 + a1\n 14278: a1 = a2 <u a1\n 14281: a3 = a0 + a1\n 14284: a0 = s1 + 0x1038\n 14288: u64 [a0 + 1152] = 0\n 14292: u64 [a0 + 1144] = 0\n 14296: u64 [a0 + 1136] = 0\n 14300: u64 [a0 + 0x468] = t0\n 14304: a1 = a0 + 0x400\n 14308: u64 [a1 + 0x88] = a5\n 14312: u64 [a1 + 0x90] = a4\n 14316: u64 [a1 + 0x98] = a2\n 14320: a4 = a0\n 14322: a0 = s1 + 0x14e0\n 14326: a1 = s1 + 0x14c0\n 14330: a2 = s1 + 0x14a0\n 14334: u64 [a4 + 0x4a0] = a3\n 14338: ra = 454, jump @911\n      : @540 [@dyn 227] (gas: 26)\n 14344: a1 = s1 + 0x1038\n 14348: a2 = a1 + 0x400\n 14352: a0 = u64 [a2 + 0xe0]\n 14356: u64 [s1 + 0xb0] = a0\n 14360: a0 = u64 [a2 + 0xd8]\n 14364: u64 [s1 + 0xa8] = a0\n 14368: a0 = u64 [a2 + 0xd0]\n 14372: u64 [s1 + 0xa0] = a0\n 14376: a0 = u64 [a2 + 0xc8]\n 14380: u64 [s1 + 0x98] = a0\n 14384: a0 = u64 [a2 + 0xc0]\n 14388: u64 [s1 + 0x90] = a0\n 14392: a0 = u64 [a2 + 0xb8]\n 14396: u64 [s1 + 0x78] = a0\n 14399: a0 = u64 [a2 + 0xb0]\n 14403: u64 [s1 + 0x80] = a0\n 14407: a0 = u64 [a2 + 0xa8]\n 14411: u64 [s1 + 0x88] = a0\n 14415: a1 = s1 + 0x2038\n 14419: u64 [a1 + 136] = 0x3\n 14424: u64 [a1 + 160] = 0\n 14428: u64 [a1 + 152] = 0\n 14432: u64 [a1 + 144] = 0\n 14436: a0 = s1 + 0x1480\n 14440: a1 = s1 + 0x20c0\n 14444: ra = 456, jump @21\n      : @541 [@dyn 228] (gas: 7)\n 14450: a4 = s1 + 0x1038\n 14454: a0 = u32 [a4 + 0x458]\n 14458: a1 = u64 [a4 + 0x448]\n 14462: a2 = u64 [a4 + 0x450]\n 14466: a0 = a0 | a1\n 14469: a0 = a0 | a2\n 14472: jump @597 if a0 != 0\n      : @542 (gas: 3)\n 14476: a0 = s1 + 0x1340\n 14480: a1 = 0x40\n 14483: ra = 458, jump @17\n      : @543 [@dyn 229] (gas: 14)\n 14489: a2 = s1 + 0x1038\n 14493: t0 = u64 [a2 + 0x320]\n 14497: a1 = a2 + 0x300\n 14501: a5 = u64 [a1 + 0x18]\n 14504: a4 = u64 [a1 + 0x10]\n 14507: a0 = u64 [a1 + 0x8]\n 14510: a3 = a4 | t0\n 14513: a1 = a0 | a5\n 14516: a1 = a1 | a3\n 14519: a1 = a1 >> 0x20\n 14522: a3 = a3 | a5\n 14525: a3 = a3 << 0x20\n 14528: a1 = a1 | a3\n 14531: jump @545 if a1 == 0\n      : @544 (gas: 1)\n 14534: jump @688\n      : @545 (gas: 11)\n 14537: u64 [a2 + 760] = 0\n 14541: u64 [a2 + 752] = 0\n 14545: u64 [a2 + 744] = 0\n 14549: a3 = 0x8c379a000000000\n 14559: a1 = s1 + 0x1320\n 14563: u64 [a2 + 0x300] = a3\n 14567: u64 [s1 + 0xb8] = a0\n 14571: u64 [s1 + 0xb0] = a4\n 14575: u64 [s1 + 0xa0] = t0\n 14579: u64 [s1 + 0xa8] = a5\n 14583: ra = 460, jump @19\n      : @546 [@dyn 230] (gas: 5)\n 14589: a1 = u64 [s1 + 0xb8]\n 14593: a0 = u64 [s1 + 0xa8]\n 14597: a3 = u64 [s1 + 0xa0]\n 14601: a3 = a3 | a0\n 14604: t0 = 462, jump @1199\n      : @547 [@dyn 231] (gas: 1)\n 14610: jump @549 if a0 != 0\n      : @548 (gas: 1)\n 14613: jump @688\n      : @549 (gas: 10)\n 14616: i32 a0 = a1 + 0x4\n 14619: a2 = s1 + 0x1038\n 14623: u64 [a2 + 736] = 0\n 14627: u64 [a2 + 728] = 0\n 14631: u64 [a2 + 712] = 0x20\n 14636: a1 = s1 + 0x1300\n 14640: u64 [a2 + 720] = 0\n 14644: u64 [s1 + 0xa8] = a3\n 14648: u64 [s1 + 0xa0] = a4\n 14652: ra = 464, jump @19\n      : @550 [@dyn 232] (gas: 1)\n 14658: t0 = 466, jump @1210\n      : @551 [@dyn 233] (gas: 1)\n 14664: jump @553 if a0 != 0\n      : @552 (gas: 1)\n 14667: jump @688\n      : @553 (gas: 8)\n 14670: i32 a0 = a1 + 0x24\n 14673: a3 = s1 + 0x1038\n 14677: u64 [a3 + 704] = 0\n 14681: u64 [a3 + 696] = 0\n 14685: u64 [a3 + 680] = 0xc\n 14690: a1 = s1 + 0x12e0\n 14694: u64 [a3 + 688] = 0\n 14698: ra = 468, jump @19\n      : @554 [@dyn 234] (gas: 1)\n 14704: t0 = 470, jump @1197\n      : @555 [@dyn 235] (gas: 1)\n 14710: jump @557 if a0 != 0\n      : @556 (gas: 1)\n 14713: jump @688\n      : @557 (gas: 11)\n 14716: i32 a0 = a2 + 0x44\n 14719: a1 = u64 [0x20068]\n 14724: a3 = s1 + 0x1038\n 14728: u64 [a3 + 656] = 0\n 14732: u64 [a3 + 0x2a0] = a1\n 14736: a1 = 0x6e73657400000000\n 14746: u64 [a3 + 0x298] = a1\n 14750: a1 = s1 + 0x12c0\n 14754: u64 [a3 + 648] = 0\n 14758: ra = 0x20e\n 14762: jump @19\n      : @558 (gas: 8)\n 14765: u64 [a2 + 512] = 0\n 14769: u64 [a2 + 504] = 0\n 14773: u64 [a2 + 496] = 0\n 14777: u64 [a2 + 488] = 0\n 14781: a0 = s1 + 0x2000\n 14785: i32 a0 = a0 + 0xfffffffffffffa20\n 14789: ecalli 14 // 'value_transferred'\n 14791: fallthrough\n      : @559 (gas: 11)\n 14792: a3 = s1 + 0x1838\n 14796: a5 = a3 + 0x100\n 14800: a0 = u64 [a5 + 0xf8]\n 14804: a1 = u64 [a3 + 0x200]\n 14808: a2 = u64 [a5 + 0xf0]\n 14812: a4 = a3\n 14814: a3 = u64 [a5 + 0xe8]\n 14818: a1 = a1 | a2\n 14821: a0 = a0 | a3\n 14824: a0 = a0 | a1\n 14827: jump @561 if a0 == 0\n      : @560 (gas: 1)\n 14830: jump @759\n      : @561 (gas: 3)\n 14833: a0 = u64 [s1 + 0xb8]\n 14837: a0 = i32 [a0]\n 14839: jump @563 if a0 >u 3\n      : @562 (gas: 1)\n 14843: jump @760\n      : @563 (gas: 7)\n 14846: u64 [a4 + 544] = 0\n 14850: u64 [a4 + 536] = 0\n 14854: u64 [a4 + 528] = 0\n 14858: u64 [a4 + 520] = 0x9\n 14863: a0 = s1 + 0x780\n 14867: a1 = s1 + 0x1a40\n 14871: ra = 472, jump @21\n      : @564 [@dyn 236] (gas: 9)\n 14877: a0 = u64 [s1 + 0x790]\n 14881: u64 [s1 + 0xa8] = a0\n 14885: a0 = u64 [s1 + 0x788]\n 14889: u64 [s1 + 0xb8] = a0\n 14893: a0 = u64 [s1 + 0x780]\n 14897: u64 [s1 + 0xb0] = a0\n 14901: a0 = s1 + 0x760\n 14905: a1 = 0x40\n 14908: ra = 474, jump @17\n      : @565 [@dyn 237] (gas: 13)\n 14914: a4 = s1 + 0x700\n 14918: a3 = u64 [a4 + 0x78]\n 14921: a1 = u64 [a4 + 0x70]\n 14924: a2 = u64 [a4 + 0x68]\n 14927: a0 = u64 [a4 + 0x60]\n 14930: a3 = a3 | a2\n 14933: a2 = a0 | a1\n 14936: a2 = a2 | a3\n 14939: a2 = a2 >> 0x20\n 14942: a1 = a1 | a3\n 14945: a1 = a1 << 0x20\n 14948: a1 = a1 | a2\n 14951: jump @567 if a1 == 0\n      : @566 (gas: 1)\n 14954: jump @688\n      : @567 (gas: 14)\n 14957: a1 = u64 [s1 + 0xa8]\n 14961: a1 = a1 << 0x20\n 14964: a2 = a1 >> 0x20\n 14967: u64 [s1 + 1880] = 0\n 14971: a1 = u64 [s1 + 0xb0]\n 14975: a3 = s1 + 0x700\n 14979: u64 [a3 + 0x40] = a1\n 14982: a1 = u64 [s1 + 0xb8]\n 14986: u64 [a3 + 0x48] = a1\n 14989: a1 = s1 + 0x740\n 14993: u64 [a3 + 0x50] = a2\n 14996: u64 [s1 + 0xb8] = a0\n 15000: ra = 0x1fe\n 15004: jump @19\n      : @568 (gas: 8)\n 15007: u64 [a2 + 224] = 0\n 15011: u64 [a2 + 216] = 0\n 15015: u64 [a2 + 208] = 0\n 15019: u64 [a2 + 200] = 0\n 15023: a0 = s1 + 0x2000\n 15027: i32 a0 = a0 + 0xfffffffffffff900\n 15031: ecalli 14 // 'value_transferred'\n 15033: fallthrough\n      : @569 (gas: 9)\n 15034: a3 = s1 + 0x1838\n 15038: a0 = u64 [a3 + 0xd8]\n 15042: a1 = u64 [a3 + 0xe0]\n 15046: a2 = u64 [a3 + 0xd0]\n 15050: a3 = u64 [a3 + 0xc8]\n 15054: a1 = a1 | a2\n 15057: a0 = a0 | a3\n 15060: a0 = a0 | a1\n 15063: jump @571 if a0 == 0\n      : @570 (gas: 1)\n 15066: jump @761\n      : @571 (gas: 3)\n 15069: a0 = u64 [s1 + 0xb8]\n 15073: a0 = i32 [a0]\n 15075: jump @573 if a0 >u 67\n      : @572 (gas: 1)\n 15079: jump @762\n      : @573 (gas: 2)\n 15082: a0 = s1 + 0x2a0\n 15086: ra = 476, jump @907\n      : @574 [@dyn 238] (gas: 14)\n 15092: a1 = s1 + 0x200\n 15096: a0 = u64 [a1 + 0xb8]\n 15100: u64 [s1 + 0x98] = a0\n 15104: a0 = u64 [a1 + 0xb0]\n 15108: u64 [s1 + 0xa0] = a0\n 15112: a0 = u64 [a1 + 0xa8]\n 15116: u64 [s1 + 0xa8] = a0\n 15120: a0 = u64 [a1 + 0xa0]\n 15124: u64 [s1 + 0xb0] = a0\n 15128: a0 = s1 + 0x2000\n 15132: i32 a0 = a0 + 0xfffffffffffff920\n 15136: a1 = 0x24\n 15139: ecalli 2 // 'call_data_load'\n 15141: fallthrough\n      : @575 (gas: 8)\n 15142: a5 = s1 + 0x1838\n 15146: a0 = u64 [a5 + 0x100]\n 15150: a1 = u64 [a5 + 0xf8]\n 15154: a2 = u64 [a5 + 0xf0]\n 15158: a3 = a1 | a0\n 15161: a4 = a2 <u 0x1\n 15164: a4 = 0 if a3 != 0\n 15166: jump @577 if a4 != 0\n      : @576 (gas: 1)\n 15169: jump @763\n      : @577 (gas: 23)\n 15172: a3 = u64 [a5 + 0xe8]\n 15176: a4 = u64 [s1 + 0xb8]\n 15180: t0 = u32 [a4]\n 15182: a5 = a3 + 0x4\n 15185: a3 = a5 <u a3\n 15188: a4 = a2 + a3\n 15191: a2 = a4 <u a2\n 15194: a2 = a3 if a3 == 0\n 15197: a2 = a2 + a1\n 15200: a1 = a2 <u a1\n 15203: a3 = a0 + a1\n 15206: u64 [s1 + 568] = 0\n 15210: u64 [s1 + 560] = 0\n 15214: u64 [s1 + 552] = 0\n 15218: u64 [s1 + 0x220] = t0\n 15222: u64 [s1 + 0x240] = a5\n 15226: u64 [s1 + 0x248] = a4\n 15230: u64 [s1 + 0x250] = a2\n 15234: a0 = s1 + 0x260\n 15238: a1 = s1 + 0x240\n 15242: a2 = s1 + 0x220\n 15246: u64 [s1 + 0x258] = a3\n 15250: ra = 478, jump @911\n      : @578 [@dyn 239] (gas: 25)\n 15256: a0 = u64 [s1 + 0x298]\n 15260: u64 [s1 + 0x90] = a0\n 15264: a0 = u64 [s1 + 0x290]\n 15268: u64 [s1 + 0x88] = a0\n 15272: a0 = u64 [s1 + 0x288]\n 15276: u64 [s1 + 0x80] = a0\n 15280: a0 = u64 [s1 + 0x280]\n 15284: u64 [s1 + 0x78] = a0\n 15287: a0 = u64 [s1 + 0x278]\n 15291: u64 [s1 + 0x70] = a0\n 15294: a0 = u64 [s1 + 0x270]\n 15298: u64 [s1 + 0x58] = a0\n 15301: a0 = u64 [s1 + 0x268]\n 15305: u64 [s1 + 0x60] = a0\n 15308: a0 = u64 [s1 + 0x260]\n 15312: u64 [s1 + 0x68] = a0\n 15315: a0 = s1 + 0x1838\n 15319: u64 [a0 + 288] = 0\n 15323: u64 [a0 + 280] = 0\n 15327: u64 [a0 + 272] = 0\n 15331: a1 = a0\n 15333: u64 [a1 + 264] = 0x3\n 15338: a0 = s1 + 0x200\n 15342: a1 = s1 + 0x1940\n 15346: ra = 480, jump @21\n      : @579 [@dyn 240] (gas: 12)\n 15352: a0 = u64 [s1 + 0x208]\n 15356: u64 [s1 + 0x50] = a0\n 15359: a0 = u64 [s1 + 0x200]\n 15363: u64 [s1 + 0x48] = a0\n 15366: a0 = u32 [s1 + 0x210]\n 15370: u64 [s1 + 0x40] = a0\n 15373: a0 = 0x30130\n 15378: u64 [s1 + 0x38] = a0\n 15381: i32 a0 = a0 + 0\n 15383: ra = 0x1e2\n 15387: ecalli 4 // 'caller'\n 15389: fallthrough\n      : @580 [@dyn 241] (gas: 5)\n 15390: a2 = u64 [s1 + 0x38]\n 15393: a0 = u64 [a2 + 0x8]\n 15396: a1 = u64 [a2]\n 15398: a2 = i32 [a2 + 0x10]\n 15401: t0 = 484, jump @1194\n      : @581 [@dyn 242] (gas: 9)\n 15407: a2 = u64 [s1 + 0x40]\n 15410: a1 = a1 ^ a2\n 15413: a2 = u64 [s1 + 0x48]\n 15416: a0 = a0 ^ a2\n 15419: a0 = a0 | a1\n 15422: a1 = u64 [s1 + 0x50]\n 15425: a1 = a1 ^ a3\n 15428: a0 = a0 | a1\n 15431: jump @583 if a0 == 0\n      : @582 (gas: 1)\n 15434: jump @764\n      : @583 (gas: 27)\n 15437: a0 = u64 [s1 + 0xb8]\n 15441: a0 = u32 [a0]\n 15443: u64 [s1 + 376] = 0\n 15447: u64 [s1 + 368] = 0\n 15451: u64 [s1 + 360] = 0\n 15455: u64 [s1 + 0x160] = a0\n 15459: a0 = u64 [s1 + 0x58]\n 15462: u64 [s1 + 0x1b0] = a0\n 15466: a0 = u64 [s1 + 0x60]\n 15469: u64 [s1 + 0x1a8] = a0\n 15473: a0 = u64 [s1 + 0x68]\n 15476: u64 [s1 + 0x1a0] = a0\n 15480: a0 = u64 [s1 + 0x70]\n 15483: u64 [s1 + 0x1b8] = a0\n 15487: a0 = u64 [s1 + 0x78]\n 15490: u64 [s1 + 0x180] = a0\n 15494: a0 = u64 [s1 + 0x80]\n 15498: u64 [s1 + 0x188] = a0\n 15502: a0 = u64 [s1 + 0x88]\n 15506: u64 [s1 + 0x190] = a0\n 15510: a0 = s1 + 0x1c0\n 15514: a1 = s1 + 0x1a0\n 15518: a2 = s1 + 0x180\n 15522: a3 = s1 + 0x160\n 15526: a4 = u64 [s1 + 0x90]\n 15530: u64 [s1 + 0x198] = a4\n 15534: ra = 486, jump @965\n      : @584 [@dyn 243] (gas: 20)\n 15540: a0 = u64 [s1 + 0x1c0]\n 15544: a1 = u64 [s1 + 0x1c8]\n 15548: a2 = u64 [s1 + 0x1d0]\n 15552: a3 = u64 [s1 + 0x1d8]\n 15556: u64 [s1 + 0x118] = a3\n 15560: u64 [s1 + 0x110] = a2\n 15564: u64 [s1 + 0x108] = a1\n 15568: u64 [s1 + 0x100] = a0\n 15572: a0 = u64 [s1 + 0x98]\n 15576: u64 [s1 + 0x138] = a0\n 15580: a0 = u64 [s1 + 0xa0]\n 15584: u64 [s1 + 0x130] = a0\n 15588: a0 = u64 [s1 + 0xa8]\n 15592: u64 [s1 + 0x128] = a0\n 15596: a0 = s1 + 0x140\n 15600: a1 = s1 + 0x120\n 15604: a2 = s1 + 0x100\n 15608: a3 = u64 [s1 + 0xb0]\n 15612: u64 [s1 + 0x120] = a3\n 15616: ra = 488, jump @981\n      : @585 [@dyn 244] (gas: 12)\n 15622: a1 = s1 + 0x100\n 15626: a0 = u64 [a1 + 0x58]\n 15629: u64 [s1 + 0xb8] = a0\n 15633: a0 = u64 [a1 + 0x50]\n 15636: u64 [s1 + 0xb0] = a0\n 15640: a0 = u64 [a1 + 0x48]\n 15643: u64 [s1 + 0xa8] = a0\n 15647: a0 = u64 [a1 + 0x40]\n 15650: u64 [s1 + 0xa0] = a0\n 15654: a0 = s1 + 0xe0\n 15658: a1 = 0x40\n 15661: ra = 490, jump @17\n      : @586 [@dyn 245] (gas: 12)\n 15667: a0 = u64 [s1 + 0xf8]\n 15671: a1 = u64 [s1 + 0xf0]\n 15675: a2 = u64 [s1 + 0xe8]\n 15679: a3 = u64 [s1 + 0xe0]\n 15683: a0 = a0 | a2\n 15686: a2 = a3 | a1\n 15689: a2 = a2 | a0\n 15692: a2 = a2 >> 0x20\n 15695: a0 = a0 | a1\n 15698: a0 = a0 << 0x20\n 15701: a0 = a0 | a2\n 15704: jump @688 if a0 != 0\n      : @587 (gas: 13)\n 15708: a0 = u64 [s1 + 0xa0]\n 15712: u64 [s1 + 0xc0] = a0\n 15716: a0 = u64 [s1 + 0xa8]\n 15720: u64 [s1 + 0xc8] = a0\n 15724: a0 = u64 [s1 + 0xb0]\n 15728: u64 [s1 + 0xd0] = a0\n 15732: a1 = s1 + 0xc0\n 15736: a0 = u64 [s1 + 0xb8]\n 15740: u64 [s1 + 0xd8] = a0\n 15744: a0 = a3\n 15746: u64 [s1 + 0xb8] = a3\n 15750: ra = 0x1fe\n 15754: jump @19\n      : @588 (gas: 8)\n 15757: u64 [a2 + 384] = 0\n 15761: u64 [a2 + 376] = 0\n 15765: u64 [a2 + 368] = 0\n 15769: u64 [a2 + 360] = 0\n 15773: a0 = s1 + 0x2000\n 15777: i32 a0 = a0 + 0xfffffffffffff9a0\n 15781: ecalli 14 // 'value_transferred'\n 15783: fallthrough\n      : @589 (gas: 11)\n 15784: a3 = s1 + 0x1838\n 15788: a5 = a3 + 0x100\n 15792: a0 = u64 [a5 + 0x78]\n 15795: a1 = u64 [a5 + 0x80]\n 15799: a2 = u64 [a5 + 0x70]\n 15802: a4 = a3\n 15804: a3 = u64 [a5 + 0x68]\n 15807: a1 = a1 | a2\n 15810: a0 = a0 | a3\n 15813: a0 = a0 | a1\n 15816: jump @591 if a0 == 0\n      : @590 (gas: 1)\n 15819: jump @769\n      : @591 (gas: 3)\n 15822: a0 = u64 [s1 + 0xb8]\n 15826: a0 = i32 [a0]\n 15828: jump @593 if a0 >u 3\n      : @592 (gas: 1)\n 15832: jump @770\n      : @593 (gas: 7)\n 15835: u64 [a4 + 416] = 0\n 15839: u64 [a4 + 408] = 0\n 15843: u64 [a4 + 400] = 0\n 15847: u64 [a4 + 392] = 0xa\n 15852: a0 = s1 + 0x4e0\n 15856: a1 = s1 + 0x19c0\n 15860: ra = 492, jump @21\n      : @594 [@dyn 246] (gas: 11)\n 15866: a0 = u64 [s1 + 0x4f8]\n 15870: u64 [s1 + 0xb8] = a0\n 15874: a0 = u64 [s1 + 0x4f0]\n 15878: u64 [s1 + 0xb0] = a0\n 15882: a0 = u64 [s1 + 0x4e8]\n 15886: u64 [s1 + 0xa8] = a0\n 15890: a0 = u64 [s1 + 0x4e0]\n 15894: u64 [s1 + 0xa0] = a0\n 15898: a0 = s1 + 0x4c0\n 15902: a1 = 0x40\n 15905: ra = 494, jump @17\n      : @595 [@dyn 247] (gas: 13)\n 15911: a4 = s1 + 0x400\n 15915: a0 = u64 [a4 + 0xd8]\n 15919: a1 = u64 [a4 + 0xd0]\n 15923: a2 = u64 [a4 + 0xc8]\n 15927: a3 = u64 [a4 + 0xc0]\n 15931: a0 = a0 | a2\n 15934: a2 = a3 | a1\n 15937: a2 = a2 | a0\n 15940: a2 = a2 >> 0x20\n 15943: a0 = a0 | a1\n 15946: a0 = a0 << 0x20\n 15949: a0 = a0 | a2\n 15952: jump @688 if a0 != 0\n      : @596 (gas: 14)\n 15956: a0 = u64 [s1 + 0xa0]\n 15960: a2 = s1 + 0x400\n 15964: u64 [a2 + 0xa0] = a0\n 15968: a0 = u64 [s1 + 0xa8]\n 15972: u64 [a2 + 0xa8] = a0\n 15976: a0 = u64 [s1 + 0xb0]\n 15980: u64 [a2 + 0xb0] = a0\n 15984: a1 = s1 + 0x4a0\n 15988: a0 = u64 [s1 + 0xb8]\n 15992: u64 [a2 + 0xb8] = a0\n 15996: a0 = a3\n 15998: u64 [s1 + 0xb8] = a3\n 16002: ra = 0x1fe\n 16006: jump @19\n      : @597 (gas: 28)\n 16009: a0 = u64 [s1 + 0xb8]\n 16013: a0 = u32 [a0]\n 16015: u64 [a4 + 992] = 0\n 16019: u64 [a4 + 984] = 0\n 16023: u64 [a4 + 976] = 0\n 16027: a1 = a4 + 0x300\n 16031: u64 [a1 + 0xc8] = a0\n 16035: a0 = u64 [s1 + 0x78]\n 16038: u64 [a4 + 0x418] = a0\n 16042: a0 = u64 [s1 + 0x80]\n 16046: u64 [a4 + 0x410] = a0\n 16050: a0 = u64 [s1 + 0x88]\n 16054: u64 [a4 + 0x408] = a0\n 16058: a0 = u64 [s1 + 0x90]\n 16062: u64 [a4 + 0x420] = a0\n 16066: a0 = u64 [s1 + 0x98]\n 16070: u64 [a1 + 0xe8] = a0\n 16074: a0 = u64 [s1 + 0xa0]\n 16078: u64 [a1 + 0xf0] = a0\n 16082: a0 = u64 [s1 + 0xa8]\n 16086: u64 [a1 + 0xf8] = a0\n 16090: a0 = s1 + 0x1460\n 16094: a1 = s1 + 0x1440\n 16098: a2 = s1 + 0x1420\n 16102: a3 = s1 + 0x1400\n 16106: a5 = u64 [s1 + 0xb0]\n 16110: u64 [a4 + 0x400] = a5\n 16114: ra = 496, jump @965\n      : @598 [@dyn 248] (gas: 18)\n 16120: a0 = s1 + 0x1038\n 16124: a0 = u64 [a0 + 0x428]\n 16128: u64 [s1 + 0xb8] = a0\n 16132: a0 = s1 + 0x1038\n 16136: a0 = u64 [a0 + 0x430]\n 16140: u64 [s1 + 0xb0] = a0\n 16144: a0 = s1 + 0x1038\n 16148: a0 = u64 [a0 + 0x438]\n 16152: u64 [s1 + 0xa8] = a0\n 16156: a0 = s1 + 0x1038\n 16160: a0 = u64 [a0 + 0x440]\n 16164: u64 [s1 + 0xa0] = a0\n 16168: a0 = 0x30130\n 16173: u64 [s1 + 0x98] = a0\n 16177: i32 a0 = a0 + 0\n 16179: ra = 0x1f2\n 16183: ecalli 4 // 'caller'\n 16185: fallthrough\n      : @599 [@dyn 249] (gas: 5)\n 16186: a2 = u64 [s1 + 0x98]\n 16190: a0 = u64 [a2 + 0x8]\n 16193: a1 = i32 [a2 + 0x10]\n 16196: a2 = u64 [a2]\n 16198: t0 = 500, jump @1223\n      : @600 [@dyn 250] (gas: 24)\n 16204: a2 = s1 + 0x1038\n 16208: a4 = u64 [s1 + 0xa0]\n 16212: u64 [a2 + 0x380] = a4\n 16216: a2 = s1 + 0x1038\n 16220: a4 = u64 [s1 + 0xa8]\n 16224: u64 [a2 + 0x378] = a4\n 16228: a2 = s1 + 0x1038\n 16232: a4 = u64 [s1 + 0xb0]\n 16236: u64 [a2 + 0x370] = a4\n 16240: a2 = s1 + 0x1038\n 16244: a4 = u64 [s1 + 0xb8]\n 16248: u64 [a2 + 0x368] = a4\n 16252: a2 = s1 + 0x1038\n 16256: u64 [a2 + 928] = 0\n 16260: a2 = s1 + 0x1038\n 16264: u64 [a2 + 0x398] = a1\n 16268: a1 = s1 + 0x1038\n 16272: u64 [a1 + 0x390] = a0\n 16276: a0 = s1 + 0x13e0\n 16280: a1 = s1 + 0x13c0\n 16284: a2 = s1 + 0x13a0\n 16288: a4 = s1 + 0x1038\n 16292: u64 [a4 + 0x388] = a3\n 16296: ra = 502, jump @981\n      : @601 [@dyn 251] (gas: 13)\n 16302: a0 = s1 + 0x1038\n 16306: a0 = u64 [a0 + 0x3c0]\n 16310: u64 [s1 + 0xb8] = a0\n 16314: a0 = s1 + 0x1038\n 16318: a0 = u64 [a0 + 0x3b8]\n 16322: u64 [s1 + 0xb0] = a0\n 16326: a0 = s1 + 0x1038\n 16330: a0 = u64 [a0 + 0x3b0]\n 16334: u64 [s1 + 0xa8] = a0\n 16338: a0 = s1 + 0x1038\n 16342: a0 = u64 [a0 + 0x3a8]\n 16346: u64 [s1 + 0xa0] = a0\n 16350: ra = 504, jump @1124\n      : @602 [@dyn 252] (gas: 3)\n 16356: a0 = s1 + 0x1380\n 16360: a1 = 0x40\n 16363: ra = 506, jump @17\n      : @603 [@dyn 253] (gas: 7)\n 16369: a3 = s1 + 0x1038\n 16373: a5 = a3 + 0x300\n 16377: a0 = u64 [a5 + 0x60]\n 16380: a1 = u64 [a5 + 0x58]\n 16383: a2 = u64 [a5 + 0x50]\n 16386: a4 = u64 [a5 + 0x48]\n 16389: t0 = 508, jump @1211\n      : @604 [@dyn 254] (gas: 1)\n 16395: jump @688 if a0 != 0\n      : @605 (gas: 13)\n 16399: a0 = u64 [s1 + 0xa0]\n 16403: a2 = a3 + 0x300\n 16407: u64 [a2 + 0x28] = a0\n 16410: a0 = u64 [s1 + 0xa8]\n 16414: u64 [a2 + 0x30] = a0\n 16417: a0 = u64 [s1 + 0xb0]\n 16421: u64 [a2 + 0x38] = a0\n 16424: a1 = s1 + 0x1360\n 16428: a0 = u64 [s1 + 0xb8]\n 16432: u64 [a2 + 0x40] = a0\n 16435: a0 = a4\n 16437: u64 [s1 + 0xb8] = a4\n 16441: ra = 510, jump @19\n      : @606 [@dyn 255] (gas: 3)\n 16447: a1 = 0x20\n 16450: a0 = u64 [s1 + 0xb8]\n 16454: ra = 512, jump @31\n      : @607 [@dyn 256] (gas: 5)\n 16460: i32 a1 = a0 + 0\n 16462: a2 = 0x20\n 16465: a0 = 0\n 16467: ecalli 11 // 'seal_return'\n 16469: fallthrough\n      : @608 (gas: 3)\n 16470: a0 = s1 + 0x1840\n 16474: a1 = 0x40\n 16477: ra = 514, jump @17\n      : @609 [@dyn 257] (gas: 13)\n 16483: a2 = s1 + 0x1838\n 16487: t0 = u64 [a2 + 0x20]\n 16490: a5 = u64 [a2 + 0x18]\n 16493: a4 = u64 [a2 + 0x10]\n 16496: a3 = u64 [a2 + 0x8]\n 16499: a0 = a4 | t0\n 16502: a1 = a3 | a5\n 16505: a1 = a1 | a0\n 16508: a1 = a1 >> 0x20\n 16511: a0 = a0 | a5\n 16514: a0 = a0 << 0x20\n 16517: a0 = a0 | a1\n 16520: jump @688 if a0 != 0\n      : @610 (gas: 13)\n 16524: a0 = s1 + 0x1038\n 16528: u64 [a0 + 2040] = 0\n 16532: u64 [a0 + 2032] = 0\n 16536: u64 [a0 + 2024] = 0\n 16540: a0 = 0x8c379a000000000\n 16550: a1 = s1 + 0x1820\n 16554: u64 [a2] = a0\n 16556: a0 = a3\n 16558: u64 [s1 + 0xb8] = a3\n 16562: u64 [s1 + 0xb0] = a4\n 16566: u64 [s1 + 0xa8] = t0\n 16570: u64 [s1 + 0xa0] = a5\n 16574: ra = 516, jump @19\n      : @611 [@dyn 258] (gas: 5)\n 16580: a1 = u64 [s1 + 0xb8]\n 16584: a0 = u64 [s1 + 0xa8]\n 16588: a3 = u64 [s1 + 0xa0]\n 16592: a3 = a3 | a0\n 16595: t0 = 518, jump @1199\n      : @612 [@dyn 259] (gas: 1)\n 16601: jump @688 if a0 == 0\n      : @613 (gas: 10)\n 16605: i32 a0 = a1 + 0x4\n 16608: a2 = s1 + 0x1038\n 16612: u64 [a2 + 2016] = 0\n 16616: u64 [a2 + 2008] = 0\n 16620: u64 [a2 + 1992] = 0x20\n 16625: a1 = s1 + 0x1800\n 16629: u64 [a2 + 2000] = 0\n 16633: u64 [s1 + 0xa8] = a3\n 16637: u64 [s1 + 0xa0] = a4\n 16641: ra = 520, jump @19\n      : @614 [@dyn 260] (gas: 9)\n 16647: a4 = u64 [s1 + 0xa8]\n 16651: a3 = u64 [s1 + 0xb0]\n 16655: a1 = u64 [s1 + 0xb8]\n 16659: a0 = u64 [s1 + 0xa0]\n 16663: a0 = a0 + 0xffffffffffffffdc\n 16666: a0 = a1 <u a0\n 16669: a0 = 0 if a3 != 0\n 16671: a0 = 0 if a4 != 0\n 16673: jump @688 if a0 == 0\n      : @615 (gas: 8)\n 16677: i32 a0 = a1 + 0x24\n 16680: a2 = s1 + 0x1038\n 16684: u64 [a2 + 1984] = 0\n 16688: u64 [a2 + 1976] = 0\n 16692: u64 [a2 + 1960] = 0xa\n 16697: a1 = s1 + 0x17e0\n 16701: u64 [a2 + 1968] = 0\n 16705: ra = 522, jump @19\n      : @616 [@dyn 261] (gas: 1)\n 16711: t0 = 524, jump @1197\n      : @617 [@dyn 262] (gas: 1)\n 16717: jump @688 if a0 == 0\n      : @618 (gas: 10)\n 16721: i32 a0 = a2 + 0x44\n 16724: a1 = u64 [0x20020]\n 16729: a3 = s1 + 0x1038\n 16733: u64 [a3 + 1936] = 0\n 16737: u64 [a3 + 0x7a0] = a1\n 16741: a1 = 0x6572000000000000\n 16751: u64 [a3 + 0x798] = a1\n 16755: a1 = s1 + 0x17c0\n 16759: u64 [a3 + 1928] = 0\n 16763: ra = 526, jump @19\n      : @619 [@dyn 263] (gas: 3)\n 16769: a1 = 0x64\n 16772: a0 = u64 [s1 + 0xb8]\n 16776: ra = 528, jump @31\n      : @620 [@dyn 264] (gas: 7)\n 16782: i32 a1 = a0 + 0\n 16784: a0 = 0x1\n 16787: a2 = 0x64\n 16790: ra = 0x212\n 16794: ecalli 11 // 'seal_return'\n 16796: t0 = 0x214\n 16800: jump @1225\n      : @621 [@dyn 265] (gas: 1)\n 16803: t0 = 532, jump @1225\n      : @622 [@dyn 266] (gas: 1)\n 16809: ra = 534, jump @19\n      : @623 [@dyn 267] (gas: 6)\n 16815: a0 = sp + 0xffffffffffffffe0\n 16818: a0 = a0 & 0xffffffffffffffe0\n 16821: u64 [s1 + 0x58] = a0\n 16824: sp = a0\n 16826: a1 = i32 [0x20124]\n 16831: jump @625 if a1 >u 31\n      : @624 (gas: 4)\n 16835: a1 = 0x20\n 16838: u32 [0x20124] = a1\n 16843: t0 = 0x218\n 16847: jump @1240\n      : @625 (gas: 1)\n 16850: t0 = 536, jump @1240\n      : @626 [@dyn 268] (gas: 6)\n 16856: a0 = 0x20130\n 16861: i32 a0 = a0 + 0\n 16863: i32 a2 = a2 + 0\n 16865: a1 = 0x20\n 16868: ecalli 7 // 'hash_keccak_256'\n 16870: t0 = 538, jump @1193\n      : @627 [@dyn 269] (gas: 18)\n 16876: t0 = u64 [s1 + 0x58]\n 16879: a3 = a2\n 16881: a5 = t0\n 16883: u64 [a5 + 0x18] = a2\n 16886: u64 [s1 + 0x80] = ra\n 16890: u64 [t0 + 0x10] = ra\n 16893: ra = a1\n 16895: u64 [a5 + 0x8] = a1\n 16898: a2 = a0\n 16900: u64 [a5] = a0\n 16902: a0 = u64 [s1 + 0x20]\n 16905: a4 = a4 + a0\n 16908: u64 [s1 + 0x40] = a4\n 16911: a0 = a4 <u a0\n 16914: a1 = u64 [s1 + 0x18]\n 16917: a0 = a0 + a1\n 16920: u64 [s1 + 0x38] = a0\n 16923: fallthrough\n      : @628 (gas: 21)\n 16924: u64 [s1 + 0x88] = a3\n 16928: u64 [s1 + 0x90] = ra\n 16932: u64 [s1 + 0x98] = a2\n 16936: a0 = u64 [s1 + 0x60]\n 16939: a1 = u64 [s1 + 0xb8]\n 16943: a0 = a1 <u a0\n 16946: a2 = u64 [s1 + 0x70]\n 16949: a1 = t2 ^ a2\n 16952: a2 = t2 <u a2\n 16955: a2 = a0 if a1 == 0\n 16958: a4 = u64 [s1 + 0x68]\n 16961: a0 = t1 <u a4\n 16964: a3 = u64 [s1 + 0x78]\n 16967: a1 = u64 [s1 + 0xb0]\n 16971: a5 = a1 ^ a3\n 16974: a3 = a1 <u a3\n 16977: a3 = a0 if a5 == 0\n 16980: a0 = t1 ^ a4\n 16983: a0 = a0 | a5\n 16986: a3 = a2 if a0 == 0\n 16989: jump @663 if a3 == 0\n      : @629 (gas: 5)\n 16993: a0 = s1 + 0x3c0\n 16997: a1 = t0\n 16999: u64 [s1 + 0xa8] = t1\n 17003: u64 [s1 + 0xa0] = t2\n 17007: ra = 540, jump @21\n      : @630 [@dyn 270] (gas: 1)\n 17013: t0 = 542, jump @1195\n      : @631 [@dyn 271] (gas: 6)\n 17019: t0 = a1 <u a5\n 17022: a5 = u64 [s1 + 0xb0]\n 17026: a3 = u64 [s1 + 0x38]\n 17029: a5 = a5 + a3\n 17032: a5 = a5 + t0\n 17035: t0 = 544, jump @1206\n      : @632 [@dyn 272] (gas: 1)\n 17041: jump @688 if a1 != 0\n      : @633 (gas: 12)\n 17045: a3 = s1 + 0x300\n 17049: a2 = u64 [a3 + 0xd8]\n 17053: a1 = u64 [a3 + 0xd0]\n 17057: a5 = u64 [a3 + 0xc8]\n 17061: a4 = u64 [a3 + 0xc0]\n 17065: u64 [a3 + 0xa0] = a4\n 17069: u64 [a3 + 0xa8] = a5\n 17073: u64 [a3 + 0xb0] = a1\n 17077: a1 = s1 + 0x3a0\n 17081: u64 [a3 + 0xb8] = a2\n 17085: u64 [s1 + 0xb8] = t2\n 17089: ra = 546, jump @19\n      : @634 [@dyn 273] (gas: 31)\n 17095: t0 = u64 [s1 + 0x98]\n 17099: t0 = t0 + 0x1\n 17102: a0 = t0 <u 0x1\n 17105: a3 = u64 [s1 + 0x90]\n 17109: a3 = a3 + a0\n 17112: a0 = t0 | a3\n 17115: a0 = a0 <u 0x1\n 17118: a1 = u64 [s1 + 0x80]\n 17122: t2 = a1 + a0\n 17125: a1 = t2 <u a1\n 17128: a0 = u64 [s1 + 0x88]\n 17132: a0 = a0 + a1\n 17135: a1 = u64 [s1 + 0xb8]\n 17139: t1 = a1 + 0x20\n 17142: a2 = t1 <u a1\n 17145: a4 = u64 [s1 + 0xa0]\n 17149: a1 = a4 + a2\n 17152: a4 = a1 <u a4\n 17155: a4 = a2 if a2 == 0\n 17158: a2 = u64 [s1 + 0xa8]\n 17162: a4 = a4 + a2\n 17165: a2 = a4 <u a2\n 17168: a5 = u64 [s1 + 0xb0]\n 17172: a5 = a5 + a2\n 17175: u64 [s1 + 0xb0] = a5\n 17179: ra = a3\n 17181: a5 = u64 [s1 + 0x58]\n 17184: u64 [a5 + 0x8] = a3\n 17187: a2 = t0\n 17189: u64 [a5] = t0\n 17191: t0 = 548, jump @1218\n      : @635 [@dyn 274] (gas: 2)\n 17197: t0 = a5\n 17199: jump @628\n      : @636 (gas: 8)\n 17202: a2 = s1 + 0x1038\n 17206: u64 [a2 + 320] = 0\n 17210: u64 [a2 + 312] = 0\n 17214: u64 [a2 + 304] = 0\n 17218: a1 = s1 + 0x1160\n 17222: u64 [a2 + 296] = 0x2\n 17227: a0 = 0\n 17229: ra = 550, jump @19\n      : @637 [@dyn 275] (gas: 6)\n 17235: a0 = sp + 0xffffffffffffffe0\n 17238: a0 = a0 & 0xffffffffffffffe0\n 17241: u64 [s1 + 0x58] = a0\n 17244: sp = a0\n 17246: a1 = i32 [0x20124]\n 17251: jump @639 if a1 >u 31\n      : @638 (gas: 4)\n 17255: a1 = 0x20\n 17258: u32 [0x20124] = a1\n 17263: t0 = 0x228\n 17267: jump @1240\n      : @639 (gas: 1)\n 17270: t0 = 552, jump @1240\n      : @640 [@dyn 276] (gas: 6)\n 17276: a0 = 0x20130\n 17281: i32 a0 = a0 + 0\n 17283: i32 a2 = a2 + 0\n 17285: a1 = 0x20\n 17288: ecalli 7 // 'hash_keccak_256'\n 17290: t0 = 554, jump @1193\n      : @641 [@dyn 277] (gas: 18)\n 17296: t0 = u64 [s1 + 0x58]\n 17299: a3 = a2\n 17301: a5 = t0\n 17303: u64 [a5 + 0x18] = a2\n 17306: u64 [s1 + 0x80] = ra\n 17310: u64 [t0 + 0x10] = ra\n 17313: ra = a1\n 17315: u64 [a5 + 0x8] = a1\n 17318: a2 = a0\n 17320: u64 [a5] = a0\n 17322: a0 = u64 [s1 + 0x20]\n 17325: a4 = a4 + a0\n 17328: u64 [s1 + 0x40] = a4\n 17331: a0 = a4 <u a0\n 17334: a1 = u64 [s1 + 0x18]\n 17337: a0 = a0 + a1\n 17340: u64 [s1 + 0x38] = a0\n 17343: fallthrough\n      : @642 (gas: 21)\n 17344: u64 [s1 + 0x88] = a3\n 17348: u64 [s1 + 0x90] = ra\n 17352: u64 [s1 + 0x98] = a2\n 17356: a0 = u64 [s1 + 0x60]\n 17359: a1 = u64 [s1 + 0xb8]\n 17363: a0 = a1 <u a0\n 17366: a2 = u64 [s1 + 0x70]\n 17369: a1 = t2 ^ a2\n 17372: a2 = t2 <u a2\n 17375: a2 = a0 if a1 == 0\n 17378: a4 = u64 [s1 + 0x68]\n 17381: a0 = t1 <u a4\n 17384: a3 = u64 [s1 + 0x78]\n 17387: a1 = u64 [s1 + 0xb0]\n 17391: a5 = a1 ^ a3\n 17394: a3 = a1 <u a3\n 17397: a3 = a0 if a5 == 0\n 17400: a0 = t1 ^ a4\n 17403: a0 = a0 | a5\n 17406: a3 = a2 if a0 == 0\n 17409: jump @671 if a3 == 0\n      : @643 (gas: 5)\n 17413: a0 = s1 + 0x1140\n 17417: a1 = t0\n 17419: u64 [s1 + 0xa8] = t1\n 17423: u64 [s1 + 0xa0] = t2\n 17427: ra = 556, jump @21\n      : @644 [@dyn 278] (gas: 1)\n 17433: t0 = 558, jump @1195\n      : @645 [@dyn 279] (gas: 6)\n 17439: t0 = a1 <u a5\n 17442: a5 = u64 [s1 + 0xb0]\n 17446: a3 = u64 [s1 + 0x38]\n 17449: a5 = a5 + a3\n 17452: a5 = a5 + t0\n 17455: t0 = 560, jump @1206\n      : @646 [@dyn 280] (gas: 1)\n 17461: jump @688 if a1 != 0\n      : @647 (gas: 13)\n 17465: a5 = s1 + 0x1038\n 17469: t0 = u64 [a5 + 0x120]\n 17473: a3 = a5 + 0x100\n 17477: a1 = u64 [a3 + 0x18]\n 17480: a2 = u64 [a3 + 0x10]\n 17483: a4 = u64 [a3 + 0x8]\n 17486: u64 [a5 + 0xe8] = a4\n 17490: u64 [a5 + 0xf0] = a2\n 17494: u64 [a5 + 0xf8] = a1\n 17498: a1 = s1 + 0x1120\n 17502: u64 [a5 + 0x100] = t0\n 17506: u64 [s1 + 0xb8] = t2\n 17510: ra = 562, jump @19\n      : @648 [@dyn 281] (gas: 31)\n 17516: t0 = u64 [s1 + 0x98]\n 17520: t0 = t0 + 0x1\n 17523: a0 = t0 <u 0x1\n 17526: a3 = u64 [s1 + 0x90]\n 17530: a3 = a3 + a0\n 17533: a0 = t0 | a3\n 17536: a0 = a0 <u 0x1\n 17539: a1 = u64 [s1 + 0x80]\n 17543: t2 = a1 + a0\n 17546: a1 = t2 <u a1\n 17549: a0 = u64 [s1 + 0x88]\n 17553: a0 = a0 + a1\n 17556: a1 = u64 [s1 + 0xb8]\n 17560: t1 = a1 + 0x20\n 17563: a2 = t1 <u a1\n 17566: a4 = u64 [s1 + 0xa0]\n 17570: a1 = a4 + a2\n 17573: a4 = a1 <u a4\n 17576: a4 = a2 if a2 == 0\n 17579: a2 = u64 [s1 + 0xa8]\n 17583: a4 = a4 + a2\n 17586: a2 = a4 <u a2\n 17589: a5 = u64 [s1 + 0xb0]\n 17593: a5 = a5 + a2\n 17596: u64 [s1 + 0xb0] = a5\n 17600: ra = a3\n 17602: a5 = u64 [s1 + 0x58]\n 17605: u64 [a5 + 0x8] = a3\n 17608: a2 = t0\n 17610: u64 [a5] = t0\n 17612: t0 = 564, jump @1218\n      : @649 [@dyn 282] (gas: 2)\n 17618: t0 = a5\n 17620: jump @642\n      : @650 (gas: 12)\n 17623: a0 = u64 [s1 + 0x98]\n 17627: a2 = s1 + 0x600\n 17631: u64 [a2 + 0x20] = a0\n 17634: a0 = u64 [s1 + 0x90]\n 17638: u64 [a2 + 0x28] = a0\n 17641: a0 = u64 [s1 + 0x88]\n 17645: u64 [a2 + 0x30] = a0\n 17648: a1 = s1 + 0x620\n 17652: a0 = u64 [s1 + 0xb0]\n 17656: u64 [a2 + 0x38] = a0\n 17659: a0 = 0\n 17661: ra = 566, jump @19\n      : @651 [@dyn 283] (gas: 7)\n 17667: a0 = sp + 0xffffffffffffffe0\n 17670: a0 = a0 & 0xffffffffffffffe0\n 17673: u64 [s1 + 0x58] = a0\n 17676: sp = a0\n 17678: a2 = u64 [s1 + 0xa8]\n 17682: a0 = i32 [a2]\n 17684: jump @653 if a0 >u 31\n      : @652 (gas: 2)\n 17688: u32 [a2 + 0] = 0x20\n 17691: fallthrough\n      : @653 (gas: 9)\n 17692: a0 = sp + 0xffffffffffffffe0\n 17695: a0 = a0 & 0xffffffffffffffe0\n 17698: u64 [s1 + 0xa8] = a0\n 17702: sp = a0\n 17704: i32 a2 = a0 + 0\n 17706: a1 = 0x20\n 17709: a0 = u64 [s1 + 0xa0]\n 17713: ecalli 7 // 'hash_keccak_256'\n 17715: t0 = 568, jump @1193\n      : @654 [@dyn 284] (gas: 18)\n 17721: t0 = u64 [s1 + 0x58]\n 17724: a3 = a2\n 17726: a5 = t0\n 17728: u64 [a5 + 0x18] = a2\n 17731: u64 [s1 + 0x80] = ra\n 17735: u64 [t0 + 0x10] = ra\n 17738: ra = a1\n 17740: u64 [a5 + 0x8] = a1\n 17743: a2 = a0\n 17745: u64 [a5] = a0\n 17747: a0 = u64 [s1 + 0x20]\n 17750: a4 = a4 + a0\n 17753: u64 [s1 + 0x40] = a4\n 17756: a0 = a4 <u a0\n 17759: a1 = u64 [s1 + 0x18]\n 17762: a0 = a0 + a1\n 17765: u64 [s1 + 0x38] = a0\n 17768: fallthrough\n      : @655 (gas: 21)\n 17769: u64 [s1 + 0x88] = a3\n 17773: u64 [s1 + 0x90] = ra\n 17777: u64 [s1 + 0x98] = a2\n 17781: a0 = u64 [s1 + 0x60]\n 17784: a1 = u64 [s1 + 0xb8]\n 17788: a0 = a1 <u a0\n 17791: a2 = u64 [s1 + 0x70]\n 17794: a1 = t2 ^ a2\n 17797: a2 = t2 <u a2\n 17800: a2 = a0 if a1 == 0\n 17803: a4 = u64 [s1 + 0x68]\n 17806: a0 = t1 <u a4\n 17809: a3 = u64 [s1 + 0x78]\n 17812: a1 = u64 [s1 + 0xb0]\n 17816: a5 = a1 ^ a3\n 17819: a3 = a1 <u a3\n 17822: a3 = a0 if a5 == 0\n 17825: a0 = t1 ^ a4\n 17828: a0 = a0 | a5\n 17831: a3 = a2 if a0 == 0\n 17834: jump @679 if a3 == 0\n      : @656 (gas: 5)\n 17838: a0 = s1 + 0x600\n 17842: a1 = t0\n 17844: u64 [s1 + 0xa8] = t1\n 17848: u64 [s1 + 0xa0] = t2\n 17852: ra = 570, jump @21\n      : @657 [@dyn 285] (gas: 1)\n 17858: t0 = 572, jump @1195\n      : @658 [@dyn 286] (gas: 6)\n 17864: t0 = a1 <u a5\n 17867: a5 = u64 [s1 + 0xb0]\n 17871: a3 = u64 [s1 + 0x38]\n 17874: a5 = a5 + a3\n 17877: a5 = a5 + t0\n 17880: t0 = 574, jump @1206\n      : @659 [@dyn 287] (gas: 1)\n 17886: jump @688 if a1 != 0\n      : @660 (gas: 13)\n 17890: a3 = s1 + 0x600\n 17894: a2 = u64 [a3 + 0x18]\n 17897: a1 = u64 [a3 + 0x10]\n 17900: a5 = u64 [a3 + 0x8]\n 17903: a4 = u64 [a3]\n 17905: a3 = s1 + 0x500\n 17909: u64 [a3 + 0xe0] = a4\n 17913: u64 [a3 + 0xe8] = a5\n 17917: u64 [a3 + 0xf0] = a1\n 17921: a1 = s1 + 0x5e0\n 17925: u64 [a3 + 0xf8] = a2\n 17929: u64 [s1 + 0xb8] = t2\n 17933: ra = 576, jump @19\n      : @661 [@dyn 288] (gas: 31)\n 17939: t0 = u64 [s1 + 0x98]\n 17943: t0 = t0 + 0x1\n 17946: a0 = t0 <u 0x1\n 17949: a3 = u64 [s1 + 0x90]\n 17953: a3 = a3 + a0\n 17956: a0 = t0 | a3\n 17959: a0 = a0 <u 0x1\n 17962: a1 = u64 [s1 + 0x80]\n 17966: t2 = a1 + a0\n 17969: a1 = t2 <u a1\n 17972: a0 = u64 [s1 + 0x88]\n 17976: a0 = a0 + a1\n 17979: a1 = u64 [s1 + 0xb8]\n 17983: t1 = a1 + 0x20\n 17986: a2 = t1 <u a1\n 17989: a4 = u64 [s1 + 0xa0]\n 17993: a1 = a4 + a2\n 17996: a4 = a1 <u a4\n 17999: a4 = a2 if a2 == 0\n 18002: a2 = u64 [s1 + 0xa8]\n 18006: a4 = a4 + a2\n 18009: a2 = a4 <u a2\n 18012: a5 = u64 [s1 + 0xb0]\n 18016: a5 = a5 + a2\n 18019: u64 [s1 + 0xb0] = a5\n 18023: ra = a3\n 18025: a5 = u64 [s1 + 0x58]\n 18028: u64 [a5 + 0x8] = a3\n 18031: a2 = t0\n 18033: u64 [a5] = t0\n 18035: t0 = 578, jump @1218\n      : @662 [@dyn 289] (gas: 2)\n 18041: t0 = a5\n 18043: jump @655\n      : @663 (gas: 3)\n 18046: a5 = u64 [s1 + 0x30]\n 18049: t0 = 0x244\n 18053: jump @1201\n      : @664 (gas: 1)\n 18056: t0 = 580, jump @1201\n      : @665 [@dyn 290] (gas: 14)\n 18062: u64 [s1 + 0x360] = a5\n 18066: u64 [s1 + 0x340] = a0\n 18070: a0 = u64 [s1 + 0x28]\n 18073: u64 [s1 + 0x368] = a0\n 18077: a0 = u64 [s1 + 0x20]\n 18080: u64 [s1 + 0x370] = a0\n 18084: u64 [s1 + 0x348] = a2\n 18088: a0 = u64 [s1 + 0x18]\n 18091: u64 [s1 + 0x378] = a0\n 18095: u64 [s1 + 0x350] = a3\n 18099: a0 = s1 + 0x360\n 18103: a1 = s1 + 0x340\n 18107: u64 [s1 + 0x358] = a4\n 18111: ra = 582, jump @931\n      : @666 [@dyn 291] (gas: 3)\n 18117: a0 = s1 + 0x320\n 18121: a1 = 0x40\n 18124: ra = 584, jump @17\n      : @667 [@dyn 292] (gas: 26)\n 18130: a0 = s1 + 0x300\n 18134: a2 = u64 [a0 + 0x38]\n 18137: u64 [s1 + 0xb8] = a2\n 18141: a1 = u64 [a0 + 0x30]\n 18144: u64 [s1 + 0xb0] = a1\n 18148: a3 = u64 [a0 + 0x28]\n 18151: u64 [s1 + 0xa8] = a3\n 18155: a4 = u64 [a0 + 0x20]\n 18158: u64 [s1 + 0xa0] = a4\n 18162: a0 = u64 [s1 + 0x18]\n 18165: a5 = s1 + 0x200\n 18169: u64 [a5 + 0xd8] = a0\n 18173: a0 = u64 [s1 + 0x20]\n 18176: u64 [a5 + 0xd0] = a0\n 18180: a0 = u64 [s1 + 0x28]\n 18183: u64 [a5 + 0xc8] = a0\n 18187: a0 = u64 [s1 + 0x30]\n 18190: u64 [a5 + 0xc0] = a0\n 18194: u64 [a5 + 0xf8] = a2\n 18198: u64 [a5 + 0xf0] = a1\n 18202: u64 [a5 + 0xe8] = a3\n 18206: a0 = s1 + 0x300\n 18210: a1 = s1 + 0x2e0\n 18214: a2 = s1 + 0x2c0\n 18218: u64 [a5 + 0xe0] = a4\n 18222: ra = 586, jump @941\n      : @668 [@dyn 293] (gas: 1)\n 18228: t0 = 588, jump @1212\n      : @669 [@dyn 294] (gas: 1)\n 18234: jump @688 if a0 != 0\n      : @670 (gas: 8)\n 18238: t0 = a3\n 18240: a5 = s1 + 0x300\n 18244: a0 = u64 [a5 + 0x8]\n 18247: a1 = u64 [a5 + 0x18]\n 18250: u64 [s1 + 0x98] = a1\n 18254: t1 = u64 [s1 + 0x300]\n 18258: a3 = u64 [a5 + 0x10]\n 18261: jump @687\n      : @671 (gas: 3)\n 18264: a5 = u64 [s1 + 0x30]\n 18267: t0 = 0x24e\n 18271: jump @1201\n      : @672 (gas: 1)\n 18274: t0 = 590, jump @1201\n      : @673 [@dyn 295] (gas: 16)\n 18280: a1 = s1 + 0x1038\n 18284: u64 [a1 + 0xa8] = a5\n 18288: u64 [a1 + 0x88] = a0\n 18292: a0 = u64 [s1 + 0x28]\n 18295: u64 [a1 + 0xb0] = a0\n 18299: a0 = u64 [s1 + 0x20]\n 18302: u64 [a1 + 0xb8] = a0\n 18306: u64 [a1 + 0x90] = a2\n 18310: a0 = u64 [s1 + 0x18]\n 18313: u64 [a1 + 0xc0] = a0\n 18317: u64 [a1 + 0x98] = a3\n 18321: a2 = a1\n 18323: a0 = s1 + 0x10e0\n 18327: a1 = s1 + 0x10c0\n 18331: u64 [a2 + 0xa0] = a4\n 18335: ra = 592, jump @931\n      : @674 [@dyn 296] (gas: 3)\n 18341: a0 = s1 + 0x10a0\n 18345: a1 = 0x40\n 18348: ra = 594, jump @17\n      : @675 [@dyn 297] (gas: 26)\n 18354: a0 = s1 + 0x1038\n 18358: a3 = u64 [a0 + 0x80]\n 18362: u64 [s1 + 0xb8] = a3\n 18366: a2 = u64 [a0 + 0x78]\n 18369: u64 [s1 + 0xb0] = a2\n 18373: a4 = u64 [a0 + 0x70]\n 18376: u64 [s1 + 0xa8] = a4\n 18380: a5 = u64 [a0 + 0x68]\n 18383: u64 [s1 + 0xa0] = a5\n 18387: a1 = u64 [s1 + 0x18]\n 18390: u64 [a0 + 0x20] = a1\n 18393: a1 = u64 [s1 + 0x20]\n 18396: u64 [a0 + 0x18] = a1\n 18399: a1 = u64 [s1 + 0x28]\n 18402: u64 [a0 + 0x10] = a1\n 18405: a1 = u64 [s1 + 0x30]\n 18408: u64 [a0 + 0x8] = a1\n 18411: u64 [a0 + 0x40] = a3\n 18414: u64 [a0 + 0x38] = a2\n 18417: u64 [a0 + 0x30] = a4\n 18420: a3 = a0\n 18422: a0 = s1 + 0x1080\n 18426: a1 = s1 + 0x1060\n 18430: a2 = s1 + 0x1040\n 18434: u64 [a3 + 0x28] = a5\n 18437: ra = 596, jump @941\n      : @676 [@dyn 298] (gas: 1)\n 18443: t0 = 598, jump @1212\n      : @677 [@dyn 299] (gas: 1)\n 18449: jump @688 if a0 != 0\n      : @678 (gas: 8)\n 18453: t0 = a3\n 18455: a1 = s1 + 0x1038\n 18459: a0 = u64 [a1 + 0x50]\n 18462: a3 = u64 [a1 + 0x60]\n 18465: u64 [s1 + 0x98] = a3\n 18469: t1 = u64 [a1 + 0x48]\n 18472: a3 = u64 [a1 + 0x58]\n 18475: jump @687\n      : @679 (gas: 3)\n 18478: a5 = u64 [s1 + 0x30]\n 18481: t0 = 0x258\n 18485: jump @1201\n      : @680 (gas: 1)\n 18488: t0 = 600, jump @1201\n      : @681 [@dyn 300] (gas: 14)\n 18494: u64 [s1 + 0x5a0] = a5\n 18498: u64 [s1 + 0x580] = a0\n 18502: a0 = u64 [s1 + 0x28]\n 18505: u64 [s1 + 0x5a8] = a0\n 18509: a0 = u64 [s1 + 0x20]\n 18512: u64 [s1 + 0x5b0] = a0\n 18516: u64 [s1 + 0x588] = a2\n 18520: a0 = u64 [s1 + 0x18]\n 18523: u64 [s1 + 0x5b8] = a0\n 18527: u64 [s1 + 0x590] = a3\n 18531: a0 = s1 + 0x5a0\n 18535: a1 = s1 + 0x580\n 18539: u64 [s1 + 0x598] = a4\n 18543: ra = 602, jump @931\n      : @682 [@dyn 301] (gas: 3)\n 18549: a0 = s1 + 0x560\n 18553: a1 = 0x40\n 18556: ra = 604, jump @17\n      : @683 [@dyn 302] (gas: 25)\n 18562: a5 = s1 + 0x500\n 18566: a2 = u64 [a5 + 0x78]\n 18569: u64 [s1 + 0xb8] = a2\n 18573: a1 = u64 [a5 + 0x70]\n 18576: u64 [s1 + 0xb0] = a1\n 18580: a3 = u64 [a5 + 0x68]\n 18583: u64 [s1 + 0xa8] = a3\n 18587: a4 = u64 [a5 + 0x60]\n 18590: u64 [s1 + 0xa0] = a4\n 18594: a0 = u64 [s1 + 0x18]\n 18597: u64 [a5 + 0x18] = a0\n 18600: a0 = u64 [s1 + 0x20]\n 18603: u64 [a5 + 0x10] = a0\n 18606: a0 = u64 [s1 + 0x28]\n 18609: u64 [a5 + 0x8] = a0\n 18612: a0 = u64 [s1 + 0x30]\n 18615: u64 [a5] = a0\n 18617: u64 [a5 + 0x38] = a2\n 18620: u64 [a5 + 0x30] = a1\n 18623: u64 [a5 + 0x28] = a3\n 18626: a0 = s1 + 0x540\n 18630: a1 = s1 + 0x520\n 18634: a2 = s1 + 0x500\n 18638: u64 [a5 + 0x20] = a4\n 18641: ra = 606, jump @941\n      : @684 [@dyn 303] (gas: 1)\n 18647: t0 = 608, jump @1212\n      : @685 [@dyn 304] (gas: 1)\n 18653: jump @688 if a0 != 0\n      : @686 (gas: 8)\n 18656: t0 = a3\n 18658: a5 = s1 + 0x500\n 18662: a0 = u64 [a5 + 0x48]\n 18665: a1 = u64 [a5 + 0x58]\n 18668: u64 [s1 + 0x98] = a1\n 18672: t1 = u64 [s1 + 0x540]\n 18676: a3 = u64 [a5 + 0x50]\n 18679: fallthrough\n      : @687 (gas: 26)\n 18680: t2 = a0 ^ a4\n 18683: a5 = a0 <u a4\n 18686: ra = t1 <u a2\n 18689: a5 = ra if t2 == 0\n 18692: a1 = a3 - t0\n 18695: t2 = a1 - a5\n 18698: a1 = a1 <u a5\n 18701: u64 [s1 + 0x90] = a1\n 18705: a3 = a3 <u t0\n 18708: a5 = u64 [s1 + 0xb8]\n 18712: a1 = u64 [s1 + 0x98]\n 18716: a5 = a1 - a5\n 18719: a5 = a5 - a3\n 18722: a1 = u64 [s1 + 0x90]\n 18726: a5 = a5 - a1\n 18729: a0 = a0 - a4\n 18732: a0 = a0 - ra\n 18735: a1 = t1 - a2\n 18738: a0 = a0 | a5\n 18741: a3 = a1 | t2\n 18744: a3 = a3 | a0\n 18747: a0 = a0 | t2\n 18750: a3 = a3 >> 0x20\n 18753: a0 = a0 << 0x20\n 18756: a0 = a0 | a3\n 18759: jump @777 if a0 == 0\n      : @688 (gas: 1)\n 18763: trap\n      : @689 (gas: 6)\n 18764: a1 = 0x20130\n 18769: i32 a1 = a1 + 0\n 18771: a0 = 0x1\n 18774: a2 = 0\n 18776: ecalli 11 // 'seal_return'\n 18778: jump @816\n      : @690 (gas: 6)\n 18781: a1 = 0x20130\n 18786: i32 a1 = a1 + 0\n 18788: a0 = 0x1\n 18791: a2 = 0\n 18793: ecalli 11 // 'seal_return'\n 18795: jump @816\n      : @691 (gas: 9)\n 18798: a1 = s1 + 0x1838\n 18802: u64 [a1 + 1472] = 0\n 18806: u64 [a1 + 1464] = 0\n 18810: u64 [a1 + 1456] = 0\n 18814: u64 [a1 + 1448] = 0x3\n 18819: a0 = s1 + 0x7ff\n 18823: a0 = a0 + 0x5a1\n 18827: a1 = s1 + 0x1de0\n 18831: ra = 610, jump @21\n      : @692 [@dyn 305] (gas: 22)\n 18837: a1 = s1 + 0x7ff\n 18841: a1 = a1 + 0x39\n 18844: a0 = u32 [a1 + 0x57c]\n 18848: a0 = a0 << 0x20\n 18851: a1 = u64 [a1 + 0x580]\n 18855: a2 = u64 [s1 + 0xa8]\n 18859: a0 = a0 | a2\n 18862: a2 = s1 + 0x1838\n 18866: u64 [a2 + 1504] = 0\n 18870: u64 [a2 + 1496] = 0\n 18874: u64 [a2 + 1488] = 0\n 18878: a4 = a2 + 0x500\n 18882: u64 [a4 + 200] = 0x3\n 18887: a3 = u64 [s1 + 0xb0]\n 18891: u64 [a4 + 0xf0] = a3\n 18895: a3 = u64 [s1 + 0xb8]\n 18899: u64 [a4 + 0xe8] = a3\n 18903: u64 [a2 + 0x600] = a1\n 18907: u64 [a4 + 0xf8] = a0\n 18911: a0 = s1 + 0x1e00\n 18915: a1 = s1 + 0x1e20\n 18919: ra = 612, jump @25\n      : @693 [@dyn 306] (gas: 26)\n 18925: a2 = s1 + 0x7ff\n 18929: a2 = a2 + 0x39\n 18932: u64 [a2 + 1344] = 0\n 18936: a0 = u64 [s1 + 0xa8]\n 18940: a3 = a2 + 0x500\n 18944: u64 [a3 + 0x38] = a0\n 18947: a0 = u64 [s1 + 0xb0]\n 18951: u64 [a3 + 0x30] = a0\n 18954: a0 = u64 [0x20070]\n 18959: a1 = u64 [s1 + 0xb8]\n 18963: u64 [a3 + 0x28] = a1\n 18966: a1 = u64 [0x20078]\n 18971: u64 [a3 + 0x60] = a0\n 18974: a0 = u64 [0x20080]\n 18979: u64 [a3 + 0x58] = a1\n 18982: a1 = u64 [0x20088]\n 18987: u64 [a3 + 0x50] = a0\n 18990: a0 = a2\n 18992: a2 = s1 + 0x7ff\n 18996: a2 = a2 + 0x581\n 19000: a3 = s1 + 0x7ff\n 19004: a3 = a3 + 0x561\n 19008: u64 [a0 + 0x548] = a1\n 19012: a0 = 0\n 19014: a1 = 0\n 19016: ra = 614, jump @26\n      : @694 [@dyn 307] (gas: 6)\n 19022: a1 = 0x20130\n 19027: i32 a1 = a1 + 0\n 19029: a0 = 0\n 19031: a2 = 0\n 19033: ecalli 11 // 'seal_return'\n 19035: jump @816\n      : @695 (gas: 5)\n 19038: i32 a1 = a1 + 0\n 19040: a0 = 0\n 19042: a2 = 0\n 19044: ecalli 11 // 'seal_return'\n 19046: jump @816\n      : @696 (gas: 6)\n 19049: a1 = 0x20130\n 19054: i32 a1 = a1 + 0\n 19056: a0 = 0x1\n 19059: a2 = 0\n 19061: ecalli 11 // 'seal_return'\n 19063: jump @816\n      : @697 (gas: 6)\n 19066: a1 = 0x20130\n 19071: i32 a1 = a1 + 0\n 19073: a0 = 0x1\n 19076: a2 = 0\n 19078: ecalli 11 // 'seal_return'\n 19080: jump @816\n      : @698 (gas: 6)\n 19083: a1 = 0x20130\n 19088: i32 a1 = a1 + 0\n 19090: a0 = 0x1\n 19093: a2 = 0\n 19095: ecalli 11 // 'seal_return'\n 19097: jump @816\n      : @699 (gas: 6)\n 19100: a1 = 0x20130\n 19105: i32 a1 = a1 + 0\n 19107: a0 = 0x1\n 19110: a2 = 0\n 19112: ecalli 11 // 'seal_return'\n 19114: jump @816\n      : @700 (gas: 6)\n 19117: a1 = 0x20130\n 19122: i32 a1 = a1 + 0\n 19124: a0 = 0x1\n 19127: a2 = 0\n 19129: ecalli 11 // 'seal_return'\n 19131: jump @816\n      : @701 (gas: 6)\n 19134: a1 = 0x20130\n 19139: i32 a1 = a1 + 0\n 19141: a0 = 0x1\n 19144: a2 = 0\n 19146: ecalli 11 // 'seal_return'\n 19148: jump @816\n      : @702 (gas: 6)\n 19151: a1 = 0x20130\n 19156: i32 a1 = a1 + 0\n 19158: a0 = 0x1\n 19161: a2 = 0\n 19163: ecalli 11 // 'seal_return'\n 19165: jump @816\n      : @703 (gas: 6)\n 19168: a1 = 0x20130\n 19173: i32 a1 = a1 + 0\n 19175: a0 = 0x1\n 19178: a2 = 0\n 19180: ecalli 11 // 'seal_return'\n 19182: jump @816\n      : @704 (gas: 6)\n 19185: a1 = 0x20130\n 19190: i32 a1 = a1 + 0\n 19192: a0 = 0x1\n 19195: a2 = 0\n 19197: ecalli 11 // 'seal_return'\n 19199: jump @816\n      : @705 (gas: 6)\n 19202: a1 = 0x20130\n 19207: i32 a1 = a1 + 0\n 19209: a0 = 0x1\n 19212: a2 = 0\n 19214: ecalli 11 // 'seal_return'\n 19216: jump @816\n      : @706 (gas: 6)\n 19219: a1 = 0x20130\n 19224: i32 a1 = a1 + 0\n 19226: a0 = 0x1\n 19229: a2 = 0\n 19231: ecalli 11 // 'seal_return'\n 19233: jump @816\n      : @707 (gas: 6)\n 19236: a1 = 0x20130\n 19241: i32 a1 = a1 + 0\n 19243: a0 = 0x1\n 19246: a2 = 0\n 19248: ecalli 11 // 'seal_return'\n 19250: jump @816\n      : @708 (gas: 6)\n 19253: a1 = 0x20130\n 19258: i32 a1 = a1 + 0\n 19260: a0 = 0x1\n 19263: a2 = 0\n 19265: ecalli 11 // 'seal_return'\n 19267: jump @816\n      : @709 (gas: 6)\n 19270: a1 = 0x20130\n 19275: i32 a1 = a1 + 0\n 19277: a0 = 0x1\n 19280: a2 = 0\n 19282: ecalli 11 // 'seal_return'\n 19284: jump @816\n      : @710 (gas: 6)\n 19287: a1 = 0x20130\n 19292: i32 a1 = a1 + 0\n 19294: a0 = 0x1\n 19297: a2 = 0\n 19299: ecalli 11 // 'seal_return'\n 19301: jump @816\n      : @711 (gas: 6)\n 19304: a1 = 0x20130\n 19309: i32 a1 = a1 + 0\n 19311: a0 = 0x1\n 19314: a2 = 0\n 19316: ecalli 11 // 'seal_return'\n 19318: jump @816\n      : @712 (gas: 6)\n 19321: a1 = 0x20130\n 19326: i32 a1 = a1 + 0\n 19328: a0 = 0x1\n 19331: a2 = 0\n 19333: ecalli 11 // 'seal_return'\n 19335: jump @816\n      : @713 (gas: 6)\n 19338: a1 = 0x20130\n 19343: i32 a1 = a1 + 0\n 19345: a0 = 0x1\n 19348: a2 = 0\n 19350: ecalli 11 // 'seal_return'\n 19352: jump @816\n      : @714 (gas: 6)\n 19355: a1 = 0x20130\n 19360: i32 a1 = a1 + 0\n 19362: a0 = 0x1\n 19365: a2 = 0\n 19367: ecalli 11 // 'seal_return'\n 19369: jump @816\n      : @715 (gas: 6)\n 19372: a1 = 0x20130\n 19377: i32 a1 = a1 + 0\n 19379: a0 = 0x1\n 19382: a2 = 0\n 19384: ecalli 11 // 'seal_return'\n 19386: jump @816\n      : @716 (gas: 6)\n 19389: a1 = 0x20130\n 19394: i32 a1 = a1 + 0\n 19396: a0 = 0x1\n 19399: a2 = 0\n 19401: ecalli 11 // 'seal_return'\n 19403: jump @816\n      : @717 (gas: 1)\n 19406: jump @771 if a0 != 2259777049\n      : @718 (gas: 10)\n 19414: a0 = s1 + 0x1838\n 19418: u64 [a0 + 1824] = 0\n 19422: u64 [a0 + 1816] = 0\n 19426: u64 [a0 + 1808] = 0\n 19430: u64 [a0 + 1800] = 0\n 19434: a0 = s1 + 0x2000\n 19438: i32 a0 = a0 + 0xffffffffffffff40\n 19442: ra = 0x268\n 19446: ecalli 14 // 'value_transferred'\n 19448: fallthrough\n      : @719 [@dyn 308] (gas: 3)\n 19449: a3 = s1 + 0x1838\n 19453: a4 = a3 + 0x700\n 19457: t0 = 618, jump @1221\n      : @720 [@dyn 309] (gas: 1)\n 19463: jump @784 if a0 == 0\n      : @721 (gas: 6)\n 19467: a1 = 0x20130\n 19472: i32 a1 = a1 + 0\n 19474: a0 = 0x1\n 19477: a2 = 0\n 19479: ecalli 11 // 'seal_return'\n 19481: jump @816\n      : @722 (gas: 6)\n 19484: a1 = 0x20130\n 19489: i32 a1 = a1 + 0\n 19491: a0 = 0x1\n 19494: a2 = 0\n 19496: ecalli 11 // 'seal_return'\n 19498: jump @816\n      : @723 (gas: 6)\n 19501: a1 = 0x20130\n 19506: i32 a1 = a1 + 0\n 19508: a0 = 0x1\n 19511: a2 = 0\n 19513: ecalli 11 // 'seal_return'\n 19515: jump @816\n      : @724 (gas: 6)\n 19518: a1 = 0x20130\n 19523: i32 a1 = a1 + 0\n 19525: a0 = 0x1\n 19528: a2 = 0\n 19530: ecalli 11 // 'seal_return'\n 19532: jump @816\n      : @725 (gas: 6)\n 19535: a1 = 0x20130\n 19540: i32 a1 = a1 + 0\n 19542: a0 = 0x1\n 19545: a2 = 0\n 19547: ecalli 11 // 'seal_return'\n 19549: jump @816\n      : @726 (gas: 6)\n 19552: a1 = 0x20130\n 19557: i32 a1 = a1 + 0\n 19559: a0 = 0x1\n 19562: a2 = 0\n 19564: ecalli 11 // 'seal_return'\n 19566: jump @816\n      : @727 (gas: 6)\n 19569: a1 = 0x20130\n 19574: i32 a1 = a1 + 0\n 19576: a0 = 0x1\n 19579: a2 = 0\n 19581: ecalli 11 // 'seal_return'\n 19583: jump @816\n      : @728 (gas: 11)\n 19586: a2 = s1 + 0x7ff\n 19590: a2 = a2 + 0x39\n 19593: u64 [a2 + 312] = 0\n 19597: u64 [a2 + 304] = 0\n 19601: a0 = 0xc4bbea6900000000\n 19611: u64 [a2 + 0x140] = a0\n 19615: a1 = s1 + 0x7ff\n 19619: a1 = a1 + 0x161\n 19623: u64 [a2 + 296] = 0\n 19627: a0 = 0\n 19629: ra = 620, jump @19\n      : @729 [@dyn 310] (gas: 2)\n 19635: a1 = i32 [0x20124]\n 19640: jump @731 if a1 >u 31\n      : @730 (gas: 3)\n 19644: u32 [0x20124] = 0x20\n 19650: a1 = 0x20130\n 19655: jump @768\n      : @731 (gas: 2)\n 19658: a1 = 0x20130\n 19663: jump @768\n      : @732 (gas: 15)\n 19666: u64 [s1 + 0x90] = a3\n 19670: a1 = s1 + 0x7ff\n 19674: a1 = a1 + 0x39\n 19677: a0 = u64 [s1 + 0x80]\n 19681: a3 = a1 + 0x100\n 19685: u64 [a3 + 0x8] = a0\n 19688: a0 = u64 [s1 + 0x78]\n 19691: u64 [a3 + 0x10] = a0\n 19694: a0 = u64 [s1 + 0x70]\n 19697: u64 [a3 + 0x18] = a0\n 19700: a0 = s1 + 0x7ff\n 19704: a0 = a0 + 0x141\n 19708: a2 = u64 [s1 + 0x68]\n 19711: u64 [a3 + 0x20] = a2\n 19714: ra = 622, jump @1099\n      : @733 [@dyn 311] (gas: 14)\n 19720: a0 = s1 + 0x7ff\n 19724: a0 = a0 + 0x39\n 19727: a1 = u64 [s1 + 0x68]\n 19730: u64 [a0 + 0x100] = a1\n 19734: a1 = u64 [s1 + 0x70]\n 19737: u64 [a0 + 0xf8] = a1\n 19741: a1 = u64 [s1 + 0x78]\n 19744: u64 [a0 + 0xf0] = a1\n 19748: a1 = s1 + 0x7ff\n 19752: a1 = a1 + 0x121\n 19756: a2 = u64 [s1 + 0x80]\n 19760: u64 [a0 + 0xe8] = a2\n 19764: a0 = 0\n 19766: ra = 624, jump @19\n      : @734 [@dyn 312] (gas: 11)\n 19772: a1 = s1 + 0x7ff\n 19776: a1 = a1 + 0x39\n 19779: u64 [a1 + 224] = 0\n 19783: u64 [a1 + 216] = 0\n 19787: u64 [a1 + 200] = 0x8\n 19792: a2 = a1\n 19794: a0 = 0x20\n 19797: a1 = s1 + 0x7ff\n 19801: a1 = a1 + 0x101\n 19805: u64 [a2 + 208] = 0\n 19809: ra = 626, jump @19\n      : @735 [@dyn 313] (gas: 8)\n 19815: a0 = sp + 0xffffffffffffffe0\n 19818: a0 = a0 & 0xffffffffffffffe0\n 19821: u64 [s1 + 0x98] = a0\n 19825: sp = a0\n 19827: a0 = 0x20124\n 19832: u64 [s1 + 0xa8] = a0\n 19836: a0 = i32 [0x20124]\n 19841: jump @737 if a0 >u 63\n      : @736 (gas: 3)\n 19845: a1 = u64 [s1 + 0xa8]\n 19849: u32 [a1 + 0] = 0x40\n 19852: fallthrough\n      : @737 (gas: 13)\n 19853: a0 = sp + 0xffffffffffffffe0\n 19856: a2 = a0 & 0xffffffffffffffe0\n 19859: u64 [s1 + 0x88] = a2\n 19863: sp = a2\n 19865: a0 = 0x20130\n 19870: i32 a0 = a0 + 0\n 19872: i32 a2 = a2 + 0\n 19874: a1 = 0x40\n 19877: u64 [s1 + 0xa0] = a0\n 19881: ra = 0x274\n 19885: ecalli 7 // 'hash_keccak_256'\n 19887: t0 = 0x276\n 19891: jump @1215\n      : @738 [@dyn 314] (gas: 1)\n 19894: t0 = 630, jump @1215\n      : @739 [@dyn 315] (gas: 3)\n 19900: a0 = s1 + 0x7ff\n 19904: a0 = a0 + 0xe1\n 19908: ra = 632, jump @21\n      : @740 [@dyn 316] (gas: 18)\n 19914: a1 = s1 + 0x7ff\n 19918: a1 = a1 + 0x39\n 19921: a0 = u32 [a1 + 0xbc]\n 19925: a0 = a0 << 0x20\n 19928: a1 = u64 [a1 + 0xc0]\n 19932: a2 = u64 [s1 + 0x90]\n 19936: a0 = a0 | a2\n 19939: a2 = s1 + 0x1838\n 19943: a3 = u64 [s1 + 0xb0]\n 19947: a4 = a2 + 0x200\n 19951: u64 [a4 + 0x90] = a3\n 19955: a3 = u64 [s1 + 0xb8]\n 19959: u64 [a4 + 0x88] = a3\n 19963: u64 [a4 + 0xa0] = a1\n 19967: u64 [a4 + 0x98] = a0\n 19971: a1 = s1 + 0x1ac0\n 19975: a0 = u64 [s1 + 0x98]\n 19979: ra = 634, jump @25\n      : @741 [@dyn 317] (gas: 14)\n 19985: a0 = u64 [s1 + 0x68]\n 19988: a2 = s1 + 0x7ff\n 19992: a2 = a2 + 0x39\n 19995: u64 [a2 + 0xa0] = a0\n 19999: a0 = u64 [s1 + 0x70]\n 20002: u64 [a2 + 0x98] = a0\n 20006: a0 = u64 [s1 + 0x78]\n 20009: u64 [a2 + 0x90] = a0\n 20013: a1 = s1 + 0x7ff\n 20017: a1 = a1 + 0xc1\n 20021: a0 = u64 [s1 + 0x80]\n 20025: u64 [a2 + 0x88] = a0\n 20029: a0 = 0\n 20031: ra = 636, jump @19\n      : @742 [@dyn 318] (gas: 11)\n 20037: a1 = s1 + 0x7ff\n 20041: a1 = a1 + 0x39\n 20044: u64 [a1 + 128] = 0\n 20048: u64 [a1 + 120] = 0\n 20051: u64 [a1 + 104] = 0x6\n 20055: a2 = a1\n 20057: a0 = 0x20\n 20060: a1 = s1 + 0x7ff\n 20064: a1 = a1 + 0xa1\n 20068: u64 [a2 + 112] = 0\n 20071: ra = 638, jump @19\n      : @743 [@dyn 319] (gas: 3)\n 20077: a0 = u64 [s1 + 0xa8]\n 20081: a0 = i32 [a0]\n 20083: jump @745 if a0 >u 63\n      : @744 (gas: 3)\n 20087: a0 = u64 [s1 + 0xa8]\n 20091: u32 [a0 + 0] = 0x40\n 20094: fallthrough\n      : @745 (gas: 11)\n 20095: a0 = sp + 0xffffffffffffffe0\n 20098: a0 = a0 & 0xffffffffffffffe0\n 20101: u64 [s1 + 0xb8] = a0\n 20105: sp = a0\n 20107: i32 a2 = a0 + 0\n 20109: a1 = 0x40\n 20112: a0 = u64 [s1 + 0xa0]\n 20116: ra = 0x280\n 20120: ecalli 7 // 'hash_keccak_256'\n 20122: t0 = 0x282\n 20126: jump @1216\n      : @746 [@dyn 320] (gas: 1)\n 20129: t0 = 642, jump @1216\n      : @747 [@dyn 321] (gas: 12)\n 20135: a5 = a4 + 0x200\n 20139: u64 [a5 + 0xc0] = a3\n 20143: u64 [a5 + 0xb8] = a2\n 20147: u64 [a5 + 0xb0] = a1\n 20151: u64 [a5 + 0xa8] = a0\n 20155: u64 [a4 + 736] = 0\n 20159: u64 [a4 + 728] = 0\n 20163: u64 [a4 + 720] = 0\n 20167: u64 [a4 + 712] = 0\n 20171: a0 = s1 + 0x1ae0\n 20175: a1 = s1 + 0x1b00\n 20179: ra = 644, jump @25\n      : @748 [@dyn 322] (gas: 14)\n 20185: a2 = s1 + 0x7ff\n 20189: a2 = a2 + 0x39\n 20192: a0 = u64 [s1 + 0x68]\n 20195: u64 [a2 + 0x60] = a0\n 20198: a0 = u64 [s1 + 0x70]\n 20201: u64 [a2 + 0x58] = a0\n 20204: a0 = u64 [s1 + 0x78]\n 20207: u64 [a2 + 0x50] = a0\n 20210: a1 = s1 + 0x7ff\n 20214: a1 = a1 + 0x81\n 20218: a0 = u64 [s1 + 0x80]\n 20222: u64 [a2 + 0x48] = a0\n 20225: a0 = 0\n 20227: ra = 646, jump @19\n      : @749 [@dyn 323] (gas: 11)\n 20233: a1 = s1 + 0x7ff\n 20237: a1 = a1 + 0x39\n 20240: u64 [a1 + 64] = 0\n 20243: u64 [a1 + 56] = 0\n 20246: u64 [a1 + 40] = 0x7\n 20250: a2 = a1\n 20252: a0 = 0x20\n 20255: a1 = s1 + 0x7ff\n 20259: a1 = a1 + 0x61\n 20262: u64 [a2 + 48] = 0\n 20265: ra = 648, jump @19\n      : @750 [@dyn 324] (gas: 7)\n 20271: a0 = sp + 0xffffffffffffffe0\n 20274: a0 = a0 & 0xffffffffffffffe0\n 20277: u64 [s1 + 0xb8] = a0\n 20281: sp = a0\n 20283: a0 = u64 [s1 + 0xa8]\n 20287: a0 = i32 [a0]\n 20289: jump @752 if a0 >=u 64\n      : @751 (gas: 3)\n 20293: a0 = u64 [s1 + 0xa8]\n 20297: u32 [a0 + 0] = 0x40\n 20300: fallthrough\n      : @752 (gas: 12)\n 20301: a0 = sp + 0xffffffffffffffe0\n 20304: a0 = a0 & 0xffffffffffffffe0\n 20307: u64 [s1 + 0xb0] = a0\n 20311: sp = a0\n 20313: i32 a2 = a0 + 0\n 20315: a1 = 0x40\n 20318: a0 = u64 [s1 + 0xa0]\n 20322: ra = 0x28a\n 20326: ecalli 7 // 'hash_keccak_256'\n 20328: a3 = u64 [s1 + 0xb0]\n 20332: t0 = 0x28c\n 20336: jump @1196\n      : @753 [@dyn 325] (gas: 2)\n 20339: a3 = u64 [s1 + 0xb0]\n 20343: t0 = 652, jump @1196\n      : @754 [@dyn 326] (gas: 2)\n 20349: a0 = a0 + 0x41\n 20352: ra = 654, jump @21\n      : @755 [@dyn 327] (gas: 16)\n 20358: a3 = s1 + 0x7ff\n 20362: a3 = a3 + 0x39\n 20365: a0 = u64 [a3 + 0x8]\n 20368: a1 = u64 [a3 + 0x20]\n 20371: a2 = u64 [a3 + 0x18]\n 20374: a3 = u64 [a3 + 0x10]\n 20377: a0 = a0 & 0xffffffffffffff00\n 20381: a4 = s1 + 0x1838\n 20385: u64 [a4 + 0x300] = a1\n 20389: a1 = a4 + 0x200\n 20393: u64 [a1 + 0xf8] = a2\n 20397: u64 [a1 + 0xf0] = a3\n 20401: u64 [a1 + 0xe8] = a0\n 20405: a1 = s1 + 0x1b20\n 20409: a0 = u64 [s1 + 0xb8]\n 20413: ra = 656, jump @25\n      : @756 [@dyn 328] (gas: 5)\n 20419: a0 = 0\n 20421: a1 = u64 [s1 + 0xa0]\n 20425: a2 = 0\n 20427: ecalli 11 // 'seal_return'\n 20429: jump @816\n      : @757 (gas: 6)\n 20432: a1 = 0x20130\n 20437: i32 a1 = a1 + 0\n 20439: a0 = 0x1\n 20442: a2 = 0\n 20444: ecalli 11 // 'seal_return'\n 20446: jump @816\n      : @758 (gas: 6)\n 20449: a1 = 0x20130\n 20454: i32 a1 = a1 + 0\n 20456: a0 = 0x1\n 20459: a2 = 0\n 20461: ecalli 11 // 'seal_return'\n 20463: jump @816\n      : @759 (gas: 6)\n 20466: a1 = 0x20130\n 20471: i32 a1 = a1 + 0\n 20473: a0 = 0x1\n 20476: a2 = 0\n 20478: ecalli 11 // 'seal_return'\n 20480: jump @816\n      : @760 (gas: 6)\n 20483: a1 = 0x20130\n 20488: i32 a1 = a1 + 0\n 20490: a0 = 0x1\n 20493: a2 = 0\n 20495: ecalli 11 // 'seal_return'\n 20497: jump @816\n      : @761 (gas: 6)\n 20500: a1 = 0x20130\n 20505: i32 a1 = a1 + 0\n 20507: a0 = 0x1\n 20510: a2 = 0\n 20512: ecalli 11 // 'seal_return'\n 20514: jump @816\n      : @762 (gas: 6)\n 20517: a1 = 0x20130\n 20522: i32 a1 = a1 + 0\n 20524: a0 = 0x1\n 20527: a2 = 0\n 20529: ecalli 11 // 'seal_return'\n 20531: jump @816\n      : @763 (gas: 6)\n 20534: a1 = 0x20130\n 20539: i32 a1 = a1 + 0\n 20541: a0 = 0x1\n 20544: a2 = 0\n 20546: ecalli 11 // 'seal_return'\n 20548: jump @816\n      : @764 (gas: 8)\n 20551: u64 [s1 + 496] = 0\n 20555: u64 [s1 + 488] = 0\n 20559: u64 [s1 + 480] = 0\n 20563: a0 = 0xc4bbea6900000000\n 20573: a1 = s1 + 0x1e0\n 20577: u64 [s1 + 0x1f8] = a0\n 20581: a0 = 0\n 20583: ra = 658, jump @19\n      : @765 [@dyn 329] (gas: 2)\n 20589: a1 = i32 [0x20124]\n 20594: jump @767 if a1 >u 31\n      : @766 (gas: 3)\n 20598: u32 [0x20124] = 0x20\n 20604: a1 = 0x20130\n 20609: jump @768\n      : @767 (gas: 2)\n 20611: a1 = 0x20130\n 20616: fallthrough\n      : @768 (gas: 5)\n 20617: i32 a1 = a1 + 0\n 20619: a0 = 0x1\n 20622: a2 = 0x4\n 20625: ecalli 11 // 'seal_return'\n 20627: fallthrough\n      : @769 (gas: 6)\n 20628: a1 = 0x20130\n 20633: i32 a1 = a1 + 0\n 20635: a0 = 0x1\n 20638: a2 = 0\n 20640: ecalli 11 // 'seal_return'\n 20642: jump @816\n      : @770 (gas: 6)\n 20645: a1 = 0x20130\n 20650: i32 a1 = a1 + 0\n 20652: a0 = 0x1\n 20655: a2 = 0\n 20657: ecalli 11 // 'seal_return'\n 20659: jump @816\n      : @771 (gas: 1)\n 20662: jump @779 if a0 != 4076725131\n      : @772 (gas: 11)\n 20669: a0 = s1 + 0x2038\n 20673: u64 [a0 + 288] = 0\n 20677: u64 [a0 + 280] = 0\n 20681: u64 [a0 + 272] = 0\n 20685: u64 [a0 + 264] = 0\n 20689: a0 = s1 + 0x2000\n 20693: i32 a0 = a0 + 0x140\n 20697: ra = 0x294\n 20701: ecalli 14 // 'value_transferred'\n 20703: t0 = 0x296\n 20707: jump @1238\n      : @773 [@dyn 330] (gas: 1)\n 20710: t0 = 662, jump @1238\n      : @774 [@dyn 331] (gas: 1)\n 20716: t0 = 664, jump @1221\n      : @775 [@dyn 332] (gas: 1)\n 20722: jump @791 if a0 == 0\n      : @776 (gas: 6)\n 20726: a1 = 0x20130\n 20731: i32 a1 = a1 + 0\n 20733: a0 = 0x1\n 20736: a2 = 0\n 20738: ecalli 11 // 'seal_return'\n 20740: jump @816\n      : @777 (gas: 3)\n 20743: a0 = a2\n 20745: u64 [s1 + 0xb8] = a1\n 20749: ra = 666, jump @31\n      : @778 [@dyn 333] (gas: 5)\n 20755: i32 a1 = a0 + 0\n 20757: a2 = i32 [s1 + 0xb8]\n 20761: a0 = 0\n 20763: ecalli 11 // 'seal_return'\n 20765: jump @608\n      : @779 (gas: 1)\n 20768: jump @786 if a0 != 1520805000\n      : @780 (gas: 11)\n 20775: a0 = s1 + 0x1838\n 20779: u64 [a0 + 1024] = 0\n 20783: u64 [a0 + 1016] = 0\n 20787: u64 [a0 + 1008] = 0\n 20791: u64 [a0 + 1000] = 0\n 20795: a0 = s1 + 0x2000\n 20799: i32 a0 = a0 + 0xfffffffffffffc20\n 20803: ra = 0x29c\n 20807: ecalli 14 // 'value_transferred'\n 20809: t0 = 0x29e\n 20813: jump @1237\n      : @781 [@dyn 334] (gas: 1)\n 20816: t0 = 670, jump @1237\n      : @782 [@dyn 335] (gas: 8)\n 20822: a0 = u64 [a4 + 0xf8]\n 20826: a1 = u64 [a3 + 0x400]\n 20830: a2 = u64 [a4 + 0xf0]\n 20834: a3 = u64 [a4 + 0xe8]\n 20838: a1 = a1 | a2\n 20841: a0 = a0 | a3\n 20844: a0 = a0 | a1\n 20847: jump @816 if a0 == 0\n      : @783 (gas: 6)\n 20851: a1 = 0x20130\n 20856: i32 a1 = a1 + 0\n 20858: a0 = 0x1\n 20861: a2 = 0\n 20863: ecalli 11 // 'seal_return'\n 20865: jump @816\n      : @784 (gas: 3)\n 20868: a0 = u64 [s1 + 0xb8]\n 20872: a0 = i32 [a0]\n 20874: jump @793 if a0 >u 35\n      : @785 (gas: 6)\n 20878: a1 = 0x20130\n 20883: i32 a1 = a1 + 0\n 20885: a0 = 0x1\n 20888: a2 = 0\n 20890: ecalli 11 // 'seal_return'\n 20892: jump @816\n      : @786 (gas: 1)\n 20895: jump @809 if a0 != 1668881980\n      : @787 (gas: 10)\n 20903: a0 = s1 + 0x1838\n 20907: u64 [a0 + 1312] = 0\n 20911: u64 [a0 + 1304] = 0\n 20915: u64 [a0 + 1296] = 0\n 20919: u64 [a0 + 1288] = 0\n 20923: a0 = s1 + 0x2000\n 20927: i32 a0 = a0 + 0xfffffffffffffd40\n 20931: ra = 0x2a0\n 20935: ecalli 14 // 'value_transferred'\n 20937: fallthrough\n      : @788 [@dyn 336] (gas: 3)\n 20938: a3 = s1 + 0x1838\n 20942: a4 = a3 + 0x500\n 20946: t0 = 674, jump @1221\n      : @789 [@dyn 337] (gas: 1)\n 20952: jump @829 if a0 == 0\n      : @790 (gas: 6)\n 20956: a1 = 0x20130\n 20961: i32 a1 = a1 + 0\n 20963: a0 = 0x1\n 20966: a2 = 0\n 20968: ecalli 11 // 'seal_return'\n 20970: jump @816\n      : @791 (gas: 3)\n 20973: a0 = u64 [s1 + 0xb8]\n 20977: a0 = i32 [a0]\n 20979: jump @818 if a0 >u 35\n      : @792 (gas: 6)\n 20984: a1 = 0x20130\n 20989: i32 a1 = a1 + 0\n 20991: a0 = 0x1\n 20994: a2 = 0\n 20996: ecalli 11 // 'seal_return'\n 20998: jump @816\n      : @793 (gas: 22)\n 21001: a0 = s1 + 0x2000\n 21005: i32 a0 = a0 + 0xffffffffffffff60\n 21009: a1 = 0x4\n 21012: ecalli 2 // 'call_data_load'\n 21014: a1 = s1 + 0x1838\n 21018: a2 = a1 + 0x700\n 21022: a0 = u64 [a2 + 0x40]\n 21025: u64 [s1 + 0x80] = a0\n 21029: a0 = u64 [a2 + 0x38]\n 21032: u64 [s1 + 0x88] = a0\n 21036: a0 = u64 [a2 + 0x30]\n 21039: u64 [s1 + 0x90] = a0\n 21043: a0 = u64 [a2 + 0x28]\n 21046: u64 [s1 + 0x98] = a0\n 21050: u64 [a1 + 1888] = 0\n 21054: u64 [a1 + 1880] = 0\n 21058: u64 [a1 + 1872] = 0\n 21062: u64 [a2 + 72] = 0x3\n 21066: a0 = s1 + 0x7ff\n 21070: a0 = a0 + 0x7c1\n 21074: a1 = s1 + 0x1f80\n 21078: ra = 676, jump @21\n      : @794 [@dyn 338] (gas: 14)\n 21084: a0 = s1 + 0x7ff\n 21088: a0 = a0 + 0x39\n 21091: a1 = u64 [a0 + 0x790]\n 21095: u64 [s1 + 0xb8] = a1\n 21099: a1 = u64 [a0 + 0x788]\n 21103: u64 [s1 + 0xb0] = a1\n 21107: a0 = u32 [a0 + 0x798]\n 21111: u64 [s1 + 0xa8] = a0\n 21115: a0 = 0x30130\n 21120: u64 [s1 + 0xa0] = a0\n 21124: i32 a0 = a0 + 0\n 21126: ra = 0x2a6\n 21130: ecalli 4 // 'caller'\n 21132: fallthrough\n      : @795 [@dyn 339] (gas: 5)\n 21133: a2 = u64 [s1 + 0xa0]\n 21137: a0 = u64 [a2 + 0x8]\n 21140: a1 = u64 [a2]\n 21142: a2 = i32 [a2 + 0x10]\n 21145: t0 = 680, jump @1194\n      : @796 [@dyn 340] (gas: 9)\n 21151: a2 = u64 [s1 + 0xa8]\n 21155: a1 = a1 ^ a2\n 21158: a2 = u64 [s1 + 0xb0]\n 21162: a0 = a0 ^ a2\n 21165: a0 = a0 | a1\n 21168: a1 = u64 [s1 + 0xb8]\n 21172: a1 = a1 ^ a3\n 21175: a0 = a0 | a1\n 21178: jump @825 if a0 != 0\n      : @797 (gas: 14)\n 21182: a1 = s1 + 0x7ff\n 21186: a1 = a1 + 0x39\n 21189: a0 = u64 [s1 + 0x98]\n 21193: a3 = a1 + 0x700\n 21197: u64 [a3 + 0x48] = a0\n 21200: a0 = u64 [s1 + 0x90]\n 21204: u64 [a3 + 0x50] = a0\n 21207: a0 = u64 [s1 + 0x88]\n 21211: u64 [a3 + 0x58] = a0\n 21214: a0 = s1 + 0x7ff\n 21218: a0 = a0 + 0x781\n 21222: a2 = u64 [s1 + 0x80]\n 21226: u64 [a3 + 0x60] = a2\n 21229: ra = 682, jump @1099\n      : @798 [@dyn 341] (gas: 15)\n 21235: a0 = s1 + 0x7ff\n 21239: a0 = a0 + 0x39\n 21242: a1 = u64 [s1 + 0x80]\n 21246: a3 = a0 + 0x700\n 21250: u64 [a3 + 0x40] = a1\n 21253: a1 = u64 [s1 + 0x88]\n 21257: u64 [a3 + 0x38] = a1\n 21260: a1 = u64 [s1 + 0x90]\n 21264: u64 [a3 + 0x30] = a1\n 21267: a1 = s1 + 0x7ff\n 21271: a1 = a1 + 0x761\n 21275: a2 = u64 [s1 + 0x98]\n 21279: u64 [a3 + 0x28] = a2\n 21282: a0 = 0\n 21284: ra = 684, jump @19\n      : @799 [@dyn 342] (gas: 3)\n 21290: a1 = s1 + 0x7ff\n 21294: a1 = a1 + 0x39\n 21297: t0 = 686, jump @1239\n      : @800 [@dyn 343] (gas: 4)\n 21303: a1 = s1 + 0x7ff\n 21307: a1 = a1 + 0x741\n 21311: u64 [a2 + 1808] = 0\n 21315: ra = 688, jump @19\n      : @801 [@dyn 344] (gas: 6)\n 21321: a0 = sp + 0xffffffffffffffe0\n 21324: a0 = a0 & 0xffffffffffffffe0\n 21327: u64 [s1 + 0xb8] = a0\n 21331: sp = a0\n 21333: a1 = i32 [0x20124]\n 21338: jump @803 if a1 >u 63\n      : @802 (gas: 4)\n 21342: a1 = 0x40\n 21345: u32 [0x20124] = a1\n 21350: t0 = 0x2b2\n 21354: jump @1240\n      : @803 (gas: 1)\n 21357: t0 = 690, jump @1240\n      : @804 [@dyn 345] (gas: 10)\n 21363: a0 = 0x20130\n 21368: i32 a0 = a0 + 0\n 21370: u64 [s1 + 0xb0] = a0\n 21374: i32 a2 = a2 + 0\n 21376: a1 = 0x40\n 21379: ra = 0x2b4\n 21383: ecalli 7 // 'hash_keccak_256'\n 21385: a3 = u64 [s1 + 0xa8]\n 21389: t0 = 0x2b6\n 21393: jump @1196\n      : @805 [@dyn 346] (gas: 2)\n 21396: a3 = u64 [s1 + 0xa8]\n 21400: t0 = 694, jump @1196\n      : @806 [@dyn 347] (gas: 2)\n 21406: a0 = a0 + 0x721\n 21410: ra = 696, jump @21\n      : @807 [@dyn 348] (gas: 3)\n 21416: a3 = s1 + 0x7ff\n 21420: a3 = a3 + 0x39\n 21423: t0 = 698, jump @1231\n      : @808 [@dyn 349] (gas: 9)\n 21429: i32 a4 = a4 + 0xfffffffffffff838\n 21433: a4 = a4 + s1\n 21436: a5 = a4 + 0x700\n 21440: u64 [a5 + 0x80] = a2\n 21444: u64 [a5 + 0x78] = a3\n 21447: u64 [a5 + 0x70] = a1\n 21450: u64 [a5 + 0x68] = a0\n 21453: a0 = 0x1fa0\n 21457: jump @847\n      : @809 (gas: 2)\n 21460: a2 = s1 + 0x1838\n 21464: jump @814 if a0 != 1901074598\n      : @810 (gas: 9)\n 21471: u64 [a2 + 1568] = 0\n 21475: u64 [a2 + 1560] = 0\n 21479: u64 [a2 + 1552] = 0\n 21483: u64 [a2 + 1544] = 0\n 21487: a0 = s1 + 0x2000\n 21491: i32 a0 = a0 + 0xfffffffffffffe40\n 21495: ra = 0x2bc\n 21499: ecalli 14 // 'value_transferred'\n 21501: fallthrough\n      : @811 [@dyn 350] (gas: 3)\n 21502: a3 = s1 + 0x1838\n 21506: a4 = a3 + 0x600\n 21510: t0 = 702, jump @1221\n      : @812 [@dyn 351] (gas: 1)\n 21516: jump @831 if a0 == 0\n      : @813 (gas: 6)\n 21520: a1 = 0x20130\n 21525: i32 a1 = a1 + 0\n 21527: a0 = 0x1\n 21530: a2 = 0\n 21532: ecalli 11 // 'seal_return'\n 21534: jump @816\n      : @814 (gas: 6)\n 21536: a1 = 0x20130\n 21541: i32 a1 = a1 + 0\n 21543: a0 = 0x1\n 21546: a2 = 0\n 21548: ecalli 11 // 'seal_return'\n 21550: jump @816\n      : @815 (gas: 5)\n 21552: i32 a1 = a1 + 0\n 21554: a0 = 0x1\n 21557: a2 = 0\n 21559: ecalli 11 // 'seal_return'\n 21561: fallthrough\n      : @816 (gas: 3)\n 21562: a0 = u64 [s1 + 0xb8]\n 21566: a0 = i32 [a0]\n 21568: jump @833 if a0 >u 35\n      : @817 (gas: 2)\n 21573: a1 = 0x20130\n 21578: jump @815\n      : @818 (gas: 2)\n 21580: a0 = s1 + 0x1680\n 21584: ra = 704, jump @907\n      : @819 [@dyn 352] (gas: 8)\n 21590: a0 = s1 + 0x1038\n 21594: a1 = u64 [a0 + 0x650]\n 21598: u64 [s1 + 0xb0] = a1\n 21602: a1 = u64 [a0 + 0x648]\n 21606: u64 [s1 + 0xb8] = a1\n 21610: a0 = u32 [a0 + 0x658]\n 21614: u64 [s1 + 0xa8] = a0\n 21618: ra = 706, jump @1112\n      : @820 [@dyn 353] (gas: 6)\n 21624: a0 = u64 [s1 + 0xb8]\n 21628: a1 = u64 [s1 + 0xa8]\n 21632: a0 = a0 | a1\n 21635: a1 = u64 [s1 + 0xb0]\n 21639: a0 = a0 | a1\n 21642: jump @849 if a0 == 0\n      : @821 (gas: 10)\n 21646: a0 = 0xffffffff\n 21656: u64 [s1 + 0xa0] = a0\n 21660: a0 = s1 + 0x2038\n 21664: u64 [a0 + 320] = 0\n 21668: u64 [a0 + 312] = 0\n 21672: u64 [a0 + 304] = 0\n 21676: u64 [a0 + 296] = 0\n 21680: a0 = s1 + 0x1660\n 21684: a1 = s1 + 0x2160\n 21688: ra = 708, jump @21\n      : @822 [@dyn 354] (gas: 28)\n 21694: a1 = s1 + 0x1038\n 21698: a3 = a1 + 0x600\n 21702: a2 = u64 [a3 + 0x38]\n 21705: u64 [s1 + 0x88] = a2\n 21709: a0 = u64 [a3 + 0x30]\n 21712: u64 [s1 + 0x98] = a0\n 21716: a0 = u64 [a3 + 0x28]\n 21719: u64 [s1 + 0x90] = a0\n 21723: a0 = u64 [a3 + 0x40]\n 21726: a1 = a2 >> 0x20\n 21729: a1 = a1 << 0x20\n 21732: a2 = u64 [s1 + 0xa8]\n 21736: a1 = a1 | a2\n 21739: a2 = s1 + 0x2038\n 21743: u64 [a2 + 352] = 0\n 21747: u64 [a2 + 344] = 0\n 21751: u64 [a2 + 336] = 0\n 21755: u64 [a2 + 328] = 0\n 21759: a3 = u64 [s1 + 0xb0]\n 21763: a4 = a2 + 0x100\n 21767: u64 [a4 + 0x70] = a3\n 21770: a3 = u64 [s1 + 0xb8]\n 21774: u64 [a4 + 0x68] = a3\n 21777: u64 [a4 + 0x80] = a0\n 21781: u64 [a4 + 0x78] = a1\n 21784: a0 = s1 + 0x2180\n 21788: a1 = s1 + 0x21a0\n 21792: ra = 710, jump @25\n      : @823 [@dyn 355] (gas: 36)\n 21798: a0 = u64 [s1 + 0x90]\n 21802: a0 = a0 & 0xffffffffffffffff\n 21805: a2 = u64 [s1 + 0x98]\n 21809: a1 = a2 & 0xffffffffffffffff\n 21812: a2 = u64 [s1 + 0xa0]\n 21816: a3 = u64 [s1 + 0x88]\n 21820: a2 = a2 & a3\n 21823: a4 = s1 + 0x1038\n 21827: u64 [a4 + 1504] = 0\n 21831: a3 = u64 [s1 + 0xa8]\n 21835: a5 = a4 + 0x500\n 21839: u64 [a5 + 0xd8] = a3\n 21843: a3 = u64 [s1 + 0xb0]\n 21847: u64 [a5 + 0xd0] = a3\n 21851: a3 = u64 [s1 + 0xb8]\n 21855: u64 [a5 + 0xc8] = a3\n 21859: u64 [a4 + 1536] = 0\n 21863: u64 [a5 + 0xf8] = a2\n 21867: u64 [a5 + 0xf0] = a1\n 21871: a1 = u64 [0x20048]\n 21876: a2 = u64 [0x20050]\n 21881: a3 = u64 [0x20058]\n 21886: u64 [a5 + 0xe8] = a0\n 21890: a0 = a4 + 0x600\n 21894: u64 [a0 + 0x20] = a1\n 21897: u64 [a0 + 0x18] = a2\n 21900: u64 [a0 + 0x10] = a3\n 21903: a1 = a4\n 21905: a0 = u64 [0x20060]\n 21910: a2 = s1 + 0x1640\n 21914: a3 = s1 + 0x1620\n 21918: a4 = s1 + 0x1600\n 21922: u64 [a1 + 0x608] = a0\n 21926: a0 = 0\n 21928: a1 = 0\n 21930: ra = 712, jump @28\n      : @824 [@dyn 356] (gas: 2)\n 21936: a1 = 0x20130\n 21941: jump @695\n      : @825 (gas: 11)\n 21944: a2 = s1 + 0x7ff\n 21948: a2 = a2 + 0x39\n 21951: u64 [a2 + 1912] = 0\n 21955: u64 [a2 + 1904] = 0\n 21959: a0 = 0xc4bbea6900000000\n 21969: u64 [a2 + 0x780] = a0\n 21973: a1 = s1 + 0x7ff\n 21977: a1 = a1 + 0x7a1\n 21981: u64 [a2 + 1896] = 0\n 21985: a0 = 0\n 21987: ra = 714, jump @19\n      : @826 [@dyn 357] (gas: 2)\n 21993: a1 = i32 [0x20124]\n 21998: jump @828 if a1 >u 31\n      : @827 (gas: 3)\n 22002: u32 [0x20124] = 0x20\n 22008: a1 = 0x20130\n 22013: jump @768\n      : @828 (gas: 2)\n 22016: a1 = 0x20130\n 22021: jump @768\n      : @829 (gas: 3)\n 22024: a0 = u64 [s1 + 0xb8]\n 22028: a0 = i32 [a0]\n 22030: jump @854 if a0 >u 35\n      : @830 (gas: 2)\n 22035: a1 = 0x20130\n 22040: jump @815\n      : @831 (gas: 3)\n 22043: a0 = u64 [s1 + 0xb8]\n 22047: a0 = i32 [a0]\n 22049: jump @860 if a0 >u 3\n      : @832 (gas: 2)\n 22054: a1 = 0x20130\n 22059: jump @815\n      : @833 (gas: 22)\n 22062: a0 = s1 + 0x2000\n 22066: i32 a0 = a0 + 0xfffffffffffffc40\n 22070: a1 = 0x4\n 22073: ecalli 2 // 'call_data_load'\n 22075: a1 = s1 + 0x1838\n 22079: a2 = a1 + 0x400\n 22083: a0 = u64 [a2 + 0x20]\n 22086: u64 [s1 + 0xa0] = a0\n 22090: a0 = u64 [a2 + 0x18]\n 22093: u64 [s1 + 0xa8] = a0\n 22097: a0 = u64 [a2 + 0x10]\n 22100: u64 [s1 + 0xb0] = a0\n 22104: a0 = u64 [a2 + 0x8]\n 22107: u64 [s1 + 0xb8] = a0\n 22111: u64 [a1 + 1088] = 0\n 22115: u64 [a1 + 1080] = 0\n 22119: u64 [a1 + 1072] = 0\n 22123: u64 [a2 + 40] = 0x3\n 22127: a0 = s1 + 0x7ff\n 22131: a0 = a0 + 0x301\n 22135: a1 = s1 + 0x1c60\n 22139: ra = 716, jump @21\n      : @834 [@dyn 358] (gas: 14)\n 22145: a0 = s1 + 0x7ff\n 22149: a0 = a0 + 0x39\n 22152: a1 = u64 [a0 + 0x2d0]\n 22156: u64 [s1 + 0x98] = a1\n 22160: a1 = u64 [a0 + 0x2c8]\n 22164: u64 [s1 + 0x90] = a1\n 22168: a0 = u32 [a0 + 0x2d8]\n 22172: u64 [s1 + 0x88] = a0\n 22176: a0 = 0x30130\n 22181: u64 [s1 + 0x80] = a0\n 22185: i32 a0 = a0 + 0\n 22187: ra = 0x2ce\n 22191: ecalli 4 // 'caller'\n 22193: fallthrough\n      : @835 [@dyn 359] (gas: 5)\n 22194: a2 = u64 [s1 + 0x80]\n 22198: a0 = u64 [a2 + 0x8]\n 22201: a1 = u64 [a2]\n 22203: a2 = i32 [a2 + 0x10]\n 22206: t0 = 720, jump @1194\n      : @836 [@dyn 360] (gas: 9)\n 22212: a2 = u64 [s1 + 0x88]\n 22216: a1 = a1 ^ a2\n 22219: a2 = u64 [s1 + 0x90]\n 22223: a0 = a0 ^ a2\n 22226: a0 = a0 | a1\n 22229: a1 = u64 [s1 + 0x98]\n 22233: a1 = a1 ^ a3\n 22236: a0 = a0 | a1\n 22239: jump @865 if a0 != 0\n      : @837 (gas: 14)\n 22243: a1 = s1 + 0x7ff\n 22247: a1 = a1 + 0x39\n 22250: a0 = u64 [s1 + 0xb8]\n 22254: a3 = a1 + 0x200\n 22258: u64 [a3 + 0x88] = a0\n 22262: a0 = u64 [s1 + 0xb0]\n 22266: u64 [a3 + 0x90] = a0\n 22270: a0 = u64 [s1 + 0xa8]\n 22274: u64 [a3 + 0x98] = a0\n 22278: a0 = s1 + 0x7ff\n 22282: a0 = a0 + 0x2c1\n 22286: a2 = u64 [s1 + 0xa0]\n 22290: u64 [a3 + 0xa0] = a2\n 22294: ra = 722, jump @1099\n      : @838 [@dyn 361] (gas: 15)\n 22300: a0 = s1 + 0x7ff\n 22304: a0 = a0 + 0x39\n 22307: a1 = u64 [s1 + 0xa0]\n 22311: a3 = a0 + 0x200\n 22315: u64 [a3 + 0x80] = a1\n 22319: a1 = u64 [s1 + 0xa8]\n 22323: u64 [a3 + 0x78] = a1\n 22326: a1 = u64 [s1 + 0xb0]\n 22330: u64 [a3 + 0x70] = a1\n 22333: a1 = s1 + 0x7ff\n 22337: a1 = a1 + 0x2a1\n 22341: a2 = u64 [s1 + 0xb8]\n 22345: u64 [a3 + 0x68] = a2\n 22348: a0 = 0\n 22350: ra = 724, jump @19\n      : @839 [@dyn 362] (gas: 11)\n 22356: a1 = s1 + 0x7ff\n 22360: a1 = a1 + 0x39\n 22363: u64 [a1 + 608] = 0\n 22367: u64 [a1 + 600] = 0\n 22371: u64 [a1 + 584] = 0x7\n 22376: a2 = a1\n 22378: a0 = 0x20\n 22381: a1 = s1 + 0x7ff\n 22385: a1 = a1 + 0x281\n 22389: u64 [a2 + 592] = 0\n 22393: ra = 726, jump @19\n      : @840 [@dyn 363] (gas: 6)\n 22399: a0 = sp + 0xffffffffffffffe0\n 22402: a0 = a0 & 0xffffffffffffffe0\n 22405: u64 [s1 + 0xb8] = a0\n 22409: sp = a0\n 22411: a1 = i32 [0x20124]\n 22416: jump @842 if a1 >u 63\n      : @841 (gas: 4)\n 22420: a1 = 0x40\n 22423: u32 [0x20124] = a1\n 22428: t0 = 0x2d8\n 22432: jump @1240\n      : @842 (gas: 1)\n 22435: t0 = 728, jump @1240\n      : @843 [@dyn 364] (gas: 10)\n 22441: a0 = 0x20130\n 22446: i32 a0 = a0 + 0\n 22448: u64 [s1 + 0xb0] = a0\n 22452: i32 a2 = a2 + 0\n 22454: a1 = 0x40\n 22457: ra = 0x2da\n 22461: ecalli 7 // 'hash_keccak_256'\n 22463: a3 = u64 [s1 + 0xa8]\n 22467: t0 = 0x2dc\n 22471: jump @1196\n      : @844 [@dyn 365] (gas: 2)\n 22474: a3 = u64 [s1 + 0xa8]\n 22478: t0 = 732, jump @1196\n      : @845 [@dyn 366] (gas: 2)\n 22484: a0 = a0 + 0x261\n 22488: ra = 734, jump @21\n      : @846 [@dyn 367] (gas: 16)\n 22494: a3 = s1 + 0x7ff\n 22498: a3 = a3 + 0x39\n 22501: a4 = a3 + 0x200\n 22505: a0 = u64 [a4 + 0x28]\n 22508: a1 = u64 [a4 + 0x40]\n 22511: a2 = u64 [a4 + 0x38]\n 22514: a3 = u64 [a4 + 0x30]\n 22517: a0 = a0 & 0xffffffffffffff00\n 22521: a4 = s1 + 0x1838\n 22525: a5 = a4 + 0x400\n 22529: u64 [a5 + 0x60] = a1\n 22532: u64 [a5 + 0x58] = a2\n 22535: u64 [a5 + 0x50] = a3\n 22538: u64 [a5 + 0x48] = a0\n 22541: a0 = 0x1c80\n 22545: fallthrough\n      : @847 (gas: 3)\n 22546: a1 = s1 + a0\n 22549: a0 = u64 [s1 + 0xb8]\n 22553: ra = 736, jump @25\n      : @848 [@dyn 368] (gas: 5)\n 22559: a0 = 0\n 22561: a1 = u64 [s1 + 0xb0]\n 22565: a2 = 0\n 22567: ecalli 11 // 'seal_return'\n 22569: jump @816\n      : @849 (gas: 10)\n 22572: a0 = s1 + 0x1038\n 22576: u64 [a0 + 1464] = 0\n 22580: u64 [a0 + 1456] = 0\n 22584: u64 [a0 + 1448] = 0\n 22588: a2 = a0\n 22590: a0 = 0x1e4fbdf700000000\n 22600: a1 = s1 + 0x15e0\n 22604: u64 [a2 + 0x5c0] = a0\n 22608: a0 = 0\n 22610: ra = 738, jump @19\n      : @850 [@dyn 369] (gas: 9)\n 22616: a0 = s1 + 0x1038\n 22620: u64 [a0 + 1440] = 0\n 22624: u64 [a0 + 1432] = 0\n 22628: u64 [a0 + 1424] = 0\n 22632: a2 = a0\n 22634: a0 = 0x4\n 22637: a1 = s1 + 0x15c0\n 22641: u64 [a2 + 1416] = 0\n 22645: ra = 740, jump @19\n      : @851 [@dyn 370] (gas: 2)\n 22651: a1 = i32 [0x20124]\n 22656: jump @853 if a1 >u 63\n      : @852 (gas: 2)\n 22660: u32 [0x20124] = 0x40\n 22666: fallthrough\n      : @853 (gas: 6)\n 22667: a1 = 0x20130\n 22672: i32 a1 = a1 + 0\n 22674: a0 = 0x1\n 22677: a2 = 0x24\n 22680: ecalli 11 // 'seal_return'\n 22682: fallthrough\n      : @854 (gas: 3)\n 22683: a0 = s1 + 0x7ff\n 22687: a0 = a0 + 0x4a1\n 22691: ra = 742, jump @907\n      : @855 [@dyn 371] (gas: 9)\n 22697: a1 = s1 + 0x7ff\n 22701: a1 = a1 + 0x39\n 22704: a0 = u64 [a1 + 0x468]\n 22708: u64 [s1 + 0xb8] = a0\n 22712: a0 = u64 [a1 + 0x470]\n 22716: u64 [s1 + 0xb0] = a0\n 22720: a0 = u32 [a1 + 0x478]\n 22724: u64 [s1 + 0xa8] = a0\n 22728: ra = 744, jump @1112\n      : @856 [@dyn 372] (gas: 9)\n 22734: a1 = s1 + 0x1838\n 22738: u64 [a1 + 1344] = 0\n 22742: u64 [a1 + 1336] = 0\n 22746: u64 [a1 + 1328] = 0\n 22750: u64 [a1 + 1320] = 0x9\n 22755: a0 = s1 + 0x7ff\n 22759: a0 = a0 + 0x481\n 22763: a1 = s1 + 0x1d60\n 22767: ra = 746, jump @21\n      : @857 [@dyn 373] (gas: 22)\n 22773: a1 = s1 + 0x7ff\n 22777: a1 = a1 + 0x39\n 22780: a0 = u32 [a1 + 0x45c]\n 22784: a0 = a0 << 0x20\n 22787: a1 = u64 [a1 + 0x460]\n 22791: a2 = u64 [s1 + 0xa8]\n 22795: a0 = a0 | a2\n 22798: a3 = s1 + 0x1838\n 22802: u64 [a3 + 1376] = 0\n 22806: u64 [a3 + 1368] = 0\n 22810: u64 [a3 + 1360] = 0\n 22814: a4 = a3 + 0x500\n 22818: u64 [a4 + 72] = 0x9\n 22822: a2 = u64 [s1 + 0xb0]\n 22826: u64 [a4 + 0x70] = a2\n 22829: a2 = u64 [s1 + 0xb8]\n 22833: u64 [a4 + 0x68] = a2\n 22836: u64 [a4 + 0x80] = a1\n 22840: u64 [a4 + 0x78] = a0\n 22843: a0 = s1 + 0x1d80\n 22847: a1 = s1 + 0x1da0\n 22851: ra = 748, jump @25\n      : @858 [@dyn 374] (gas: 26)\n 22857: a2 = s1 + 0x7ff\n 22861: a2 = a2 + 0x39\n 22864: u64 [a2 + 1056] = 0\n 22868: a0 = u64 [s1 + 0xa8]\n 22872: a3 = a2 + 0x400\n 22876: u64 [a3 + 0x18] = a0\n 22879: a0 = u64 [s1 + 0xb0]\n 22883: u64 [a3 + 0x10] = a0\n 22886: a0 = u64 [0x20098]\n 22891: a1 = u64 [s1 + 0xb8]\n 22895: u64 [a3 + 0x8] = a1\n 22898: a1 = u64 [0x200a0]\n 22903: u64 [a3 + 0x40] = a0\n 22906: a0 = u64 [0x200a8]\n 22911: u64 [a3 + 0x38] = a1\n 22914: a1 = u64 [0x200b0]\n 22919: u64 [a3 + 0x30] = a0\n 22922: a0 = a2\n 22924: a2 = s1 + 0x7ff\n 22928: a2 = a2 + 0x461\n 22932: a3 = s1 + 0x7ff\n 22936: a3 = a3 + 0x441\n 22940: u64 [a0 + 0x428] = a1\n 22944: a0 = 0\n 22946: a1 = 0\n 22948: ra = 750, jump @26\n      : @859 [@dyn 375] (gas: 2)\n 22954: a1 = 0x20130\n 22959: jump @695\n      : @860 (gas: 1)\n 22962: ra = 752, jump @1112\n      : @861 [@dyn 376] (gas: 9)\n 22968: a0 = s1 + 0x1838\n 22972: u64 [a0 + 1600] = 0\n 22976: u64 [a0 + 1592] = 0\n 22980: u64 [a0 + 1584] = 0\n 22984: u64 [a0 + 1576] = 0\n 22988: a0 = s1 + 0x7ff\n 22992: a0 = a0 + 0x641\n 22996: a1 = s1 + 0x1e60\n 23000: ra = 754, jump @21\n      : @862 [@dyn 377] (gas: 24)\n 23006: a1 = s1 + 0x7ff\n 23010: a1 = a1 + 0x39\n 23013: a3 = a1 + 0x600\n 23017: a2 = u64 [a3 + 0x18]\n 23020: u64 [s1 + 0xa8] = a2\n 23024: a0 = u64 [a3 + 0x8]\n 23027: u64 [s1 + 0xb8] = a0\n 23031: a0 = u64 [a3 + 0x10]\n 23034: u64 [s1 + 0xb0] = a0\n 23038: a0 = u64 [a3 + 0x20]\n 23041: a1 = a2 >> 0x20\n 23044: a1 = a1 << 0x20\n 23047: a2 = s1 + 0x1838\n 23051: u64 [a2 + 1632] = 0\n 23055: u64 [a2 + 1624] = 0\n 23059: u64 [a2 + 1616] = 0\n 23063: u64 [a2 + 1608] = 0\n 23067: u64 [a2 + 1648] = 0\n 23071: u64 [a2 + 1640] = 0\n 23075: u64 [a2 + 0x680] = a0\n 23079: u64 [a2 + 0x678] = a1\n 23083: a0 = s1 + 0x1e80\n 23087: a1 = s1 + 0x1ea0\n 23091: ra = 756, jump @25\n      : @863 [@dyn 378] (gas: 34)\n 23097: a0 = u64 [s1 + 0xa8]\n 23101: a0 = a0 << 0x20\n 23104: a0 = a0 >> 0x20\n 23107: a3 = s1 + 0x7ff\n 23111: a3 = a3 + 0x39\n 23114: u64 [a3 + 1472] = 0\n 23118: u64 [a3 + 1464] = 0\n 23122: u64 [a3 + 1456] = 0\n 23126: u64 [a3 + 1448] = 0\n 23130: u64 [a3 + 1504] = 0\n 23134: a5 = a3 + 0x500\n 23138: u64 [a5 + 0xd8] = a0\n 23142: a0 = u64 [s1 + 0xb0]\n 23146: u64 [a5 + 0xd0] = a0\n 23150: a0 = u64 [0x20048]\n 23155: a1 = u64 [0x20050]\n 23160: a2 = u64 [0x20058]\n 23165: a4 = u64 [s1 + 0xb8]\n 23169: u64 [a5 + 0xc8] = a4\n 23173: u64 [a3 + 0x600] = a0\n 23177: u64 [a5 + 0xf8] = a1\n 23181: u64 [a5 + 0xf0] = a2\n 23185: a1 = a3\n 23187: a0 = u64 [0x20060]\n 23192: a2 = s1 + 0x7ff\n 23196: a2 = a2 + 0x621\n 23200: a3 = s1 + 0x7ff\n 23204: a3 = a3 + 0x601\n 23208: a4 = s1 + 0x7ff\n 23212: a4 = a4 + 0x5e1\n 23216: u64 [a1 + 0x5e8] = a0\n 23220: a0 = 0\n 23222: a1 = 0\n 23224: ra = 758, jump @28\n      : @864 [@dyn 379] (gas: 2)\n 23230: a1 = 0x20130\n 23235: jump @695\n      : @865 (gas: 11)\n 23238: a2 = s1 + 0x7ff\n 23242: a2 = a2 + 0x39\n 23245: u64 [a2 + 696] = 0\n 23249: u64 [a2 + 688] = 0\n 23253: a0 = 0xc4bbea6900000000\n 23263: u64 [a2 + 0x2c0] = a0\n 23267: a1 = s1 + 0x7ff\n 23271: a1 = a1 + 0x2e1\n 23275: u64 [a2 + 680] = 0\n 23279: a0 = 0\n 23281: ra = 760, jump @19\n      : @866 [@dyn 380] (gas: 2)\n 23287: a1 = i32 [0x20124]\n 23292: jump @868 if a1 >u 31\n      : @867 (gas: 3)\n 23296: u32 [0x20124] = 0x20\n 23302: a1 = 0x20130\n 23307: jump @768\n      : @868 (gas: 2)\n 23310: a1 = 0x20130\n 23315: jump @768\n      : @869 (gas: 17)\n 23318: sp = sp + 0xffffffffffffff30\n 23322: u64 [sp + 0xc8] = ra\n 23326: u64 [sp + 0xc0] = s0\n 23330: u64 [sp + 0xb8] = s1\n 23334: s0 = sp + 0xd0\n 23338: sp = sp & 0xfffffffffffffff0\n 23341: a2 = u64 [a1 + 0x18]\n 23344: u64 [sp + 0x10] = a2\n 23347: a2 = u64 [a1 + 0x10]\n 23350: u64 [sp + 0x8] = a2\n 23353: a2 = u64 [a1 + 0x8]\n 23356: u64 [sp] = a2\n 23358: s1 = u64 [a1]\n 23360: u64 [sp + 0x28] = a0\n 23363: a0 = sp + 0x90\n 23367: a1 = 0x40\n 23370: ra = 762, jump @17\n      : @870 [@dyn 381] (gas: 39)\n 23376: a1 = u64 [sp + 0x98]\n 23380: a2 = u64 [sp + 0x90]\n 23384: a0 = s1 + 0x1f\n 23387: ra = a0 <u s1\n 23390: a3 = u64 [sp]\n 23392: a4 = a3 + ra\n 23395: a0 = a0 & 0xffffffffffffffe0\n 23398: t1 = a1 + a4\n 23401: t0 = a2 + a0\n 23404: u64 [sp + 0x20] = a2\n 23407: a5 = t0 <u a2\n 23410: t1 = t1 + a5\n 23413: s1 = t1 ^ a1\n 23416: u64 [sp + 0x18] = a1\n 23419: a2 = t1 <u a1\n 23422: a2 = a5 if s1 == 0\n 23425: t2 = u64 [sp + 0xa8]\n 23429: a4 = a4 <u a3\n 23432: s1 = u64 [sp + 0xa0]\n 23436: a4 = ra if ra == 0\n 23439: a0 = u64 [sp + 0x8]\n 23442: a4 = a4 + a0\n 23445: a5 = a4 <u a0\n 23448: a4 = a4 + s1\n 23451: a3 = a4 + a2\n 23454: a0 = u64 [sp + 0x10]\n 23457: a0 = a0 + t2\n 23460: a0 = a0 + a5\n 23463: a5 = a3 <u a4\n 23466: a4 = a4 <u s1\n 23469: a0 = a0 + a4\n 23472: a4 = a0 + a5\n 23475: a0 = a4 >u 0\n 23477: a5 = a3 >u 0\n 23479: a5 = a0 if a4 != 0\n 23482: a0 = a3 | a4\n 23485: a1 = t1 >u 0\n 23487: a1 = a5 if a0 != 0\n 23490: jump @874 if a1 != 0\n      : @871 (gas: 8)\n 23493: a0 = a3 <u s1\n 23496: a1 = a4 ^ t2\n 23499: a5 = a4 <u t2\n 23502: a5 = a0 if a1 == 0\n 23505: a0 = a3 ^ s1\n 23508: a0 = a0 | a1\n 23511: a2 = a5 if a0 != 0\n 23514: jump @874 if a2 != 0\n      : @872 (gas: 8)\n 23517: u64 [sp + 0x70] = t0\n 23520: u64 [sp + 0x78] = t1\n 23523: u64 [sp + 0x80] = a3\n 23527: a0 = 0x40\n 23530: a1 = sp + 0x70\n 23533: u64 [sp + 0x88] = a4\n 23537: u64 [sp + 0x10] = t2\n 23540: ra = 764, jump @19\n      : @873 [@dyn 382] (gas: 14)\n 23546: a0 = u64 [sp + 0x28]\n 23549: a1 = u64 [sp + 0x10]\n 23552: u64 [a0 + 0x18] = a1\n 23555: u64 [a0 + 0x10] = s1\n 23558: a1 = u64 [sp + 0x18]\n 23561: u64 [a0 + 0x8] = a1\n 23564: a1 = u64 [sp + 0x20]\n 23567: u64 [a0] = a1\n 23569: sp = s0 + 0xffffffffffffff30\n 23573: ra = u64 [sp + 0xc8]\n 23577: s0 = u64 [sp + 0xc0]\n 23581: s1 = u64 [sp + 0xb8]\n 23585: sp = sp + 0xd0\n 23589: ret\n      : @874 (gas: 6)\n 23591: u64 [sp + 96] = 0\n 23594: u64 [sp + 88] = 0\n 23597: u64 [sp + 80] = 0\n 23600: t0 = 0x2fe\n 23604: a0 = 0x4e487b7100000000\n 23614: fallthrough\n      : @875 [@dyn 383] (gas: 4)\n 23615: a1 = sp + 0x50\n 23618: u64 [sp + 0x68] = a0\n 23621: a0 = 0\n 23623: ra = 768, jump @19\n      : @876 [@dyn 384] (gas: 7)\n 23629: u64 [sp + 72] = 0\n 23632: u64 [sp + 64] = 0\n 23635: u64 [sp + 48] = 0x41\n 23639: a0 = 0x4\n 23642: a1 = sp + 0x30\n 23645: u64 [sp + 56] = 0\n 23648: ra = 770, jump @19\n      : @877 [@dyn 385] (gas: 2)\n 23654: a1 = i32 [0x20124]\n 23659: jump @879 if a1 >u 63\n      : @878 (gas: 2)\n 23663: u32 [0x20124] = 0x40\n 23669: fallthrough\n      : @879 (gas: 7)\n 23670: a1 = 0x20130\n 23675: i32 a1 = a1 + 0\n 23677: a0 = 0x1\n 23680: a2 = 0x24\n 23683: ra = 0x304\n 23687: ecalli 11 // 'seal_return'\n 23689: fallthrough\n      : @880 [@dyn 386] (gas: 37)\n 23690: sp = sp + 0xfffffffffffffe70\n 23694: u64 [sp + 0x188] = ra\n 23698: u64 [sp + 0x180] = s0\n 23702: u64 [sp + 0x178] = s1\n 23706: s0 = sp + 0x190\n 23710: sp = sp & 0xfffffffffffffff0\n 23713: t2 = u64 [a1]\n 23715: a4 = u64 [a2 + 0x8]\n 23718: ra = u64 [a1 + 0x8]\n 23721: s1 = u64 [a2]\n 23723: a3 = t2 + 0x1f\n 23726: t0 = a3 <u t2\n 23729: a5 = ra + t0\n 23732: u64 [sp + 0x20] = s1\n 23735: t1 = a3 <u s1\n 23738: a3 = a5 ^ a4\n 23741: u64 [sp + 0x28] = a4\n 23744: a4 = a5 <u a4\n 23747: a4 = t1 if a3 == 0\n 23750: s1 = u64 [a1 + 0x10]\n 23753: a3 = a5 <u ra\n 23756: a3 = t0 if t0 == 0\n 23759: a5 = u64 [a2 + 0x18]\n 23762: t0 = u64 [a1 + 0x18]\n 23765: t1 = u64 [a2 + 0x10]\n 23768: a3 = a3 + s1\n 23771: a1 = a3 <u s1\n 23774: a1 = a1 + t0\n 23777: a2 = a1 ^ a5\n 23780: u64 [sp + 0x10] = a5\n 23783: a1 = a1 <s a5\n 23786: a5 = a3 <u t1\n 23789: a1 = a5 if a2 == 0\n 23792: a3 = a3 ^ t1\n 23795: a2 = a2 | a3\n 23798: a4 = a1 if a2 != 0\n 23801: jump @898 if a4 == 0\n      : @881 (gas: 13)\n 23805: u64 [sp + 0x8] = a0\n 23808: u64 [sp + 0x18] = t1\n 23811: a0 = t2 | s1\n 23814: u64 [sp + 0x38] = ra\n 23817: u64 [sp + 0x30] = t0\n 23820: a1 = ra | t0\n 23823: a0 = a0 | a1\n 23826: a0 = a0 >> 0x20\n 23829: u64 [sp + 0x58] = s1\n 23832: a1 = a1 | s1\n 23835: a1 = a1 << 0x20\n 23838: a0 = a0 | a1\n 23841: jump @897 if a0 != 0\n      : @882 (gas: 4)\n 23845: a0 = sp + 0x150\n 23849: u64 [sp + 0x50] = t2\n 23852: a1 = t2\n 23854: ra = 774, jump @17\n      : @883 [@dyn 387] (gas: 12)\n 23860: a3 = u64 [sp + 0x168]\n 23864: a2 = u64 [sp + 0x160]\n 23868: a4 = u64 [sp + 0x158]\n 23872: a0 = a3 >u 0\n 23874: a1 = a2 >u 0\n 23876: a1 = a0 if a3 != 0\n 23879: u64 [sp + 0x80] = a2\n 23883: u64 [sp + 0x88] = a3\n 23887: a0 = a2 | a3\n 23890: a2 = a4 >u 0\n 23892: a2 = a1 if a0 != 0\n 23895: jump @899 if a2 != 0\n      : @884 (gas: 20)\n 23899: a1 = u64 [sp + 0x150]\n 23903: a0 = a1 + 0x1f\n 23906: u64 [sp + 0x48] = a1\n 23909: a1 = a0 <u a1\n 23912: u64 [sp + 0x78] = a4\n 23915: a1 = a1 + a4\n 23918: a1 = a1 & 0x1\n 23921: a0 = a0 & 0xffffffffffffffe0\n 23924: a2 = a0 + 0x20\n 23927: a0 = a2 <u a0\n 23930: a3 = a1 + a0\n 23933: a4 = a3 <u a1\n 23936: a4 = a0 if a0 == 0\n 23939: u64 [sp + 296] = 0\n 23943: u64 [sp + 0x110] = a2\n 23947: u64 [sp + 0x118] = a3\n 23951: a0 = sp + 0x130\n 23955: a1 = sp + 0x110\n 23959: u64 [sp + 0x120] = a4\n 23963: ra = 776, jump @869\n      : @885 [@dyn 388] (gas: 15)\n 23969: a2 = u64 [sp + 0x148]\n 23973: a3 = u64 [sp + 0x140]\n 23977: a1 = u64 [sp + 0x138]\n 23981: a0 = u64 [sp + 0x130]\n 23985: u64 [sp + 0x40] = a1\n 23988: u64 [sp + 0x68] = a2\n 23991: a2 = a2 | a1\n 23994: a1 = a0 | a3\n 23997: a1 = a1 | a2\n 24000: a1 = a1 >> 0x20\n 24003: u64 [sp + 0x70] = a3\n 24006: a2 = a2 | a3\n 24009: a2 = a2 << 0x20\n 24012: a1 = a1 | a2\n 24015: jump @897 if a1 != 0\n      : @886 (gas: 11)\n 24019: s1 = u64 [sp + 0x48]\n 24022: u64 [sp + 0xf0] = s1\n 24026: a1 = u64 [sp + 0x78]\n 24029: u64 [sp + 0xf8] = a1\n 24033: a1 = u64 [sp + 0x80]\n 24037: u64 [sp + 0x100] = a1\n 24041: a1 = sp + 0xf0\n 24045: a2 = u64 [sp + 0x88]\n 24049: u64 [sp + 0x108] = a2\n 24053: u64 [sp + 0x60] = a0\n 24056: ra = 778, jump @19\n      : @887 [@dyn 389] (gas: 45)\n 24062: a0 = u64 [sp + 0x50]\n 24065: a3 = a0 + s1\n 24068: a2 = a3 <u a0\n 24071: t2 = u64 [sp + 0x38]\n 24074: a0 = u64 [sp + 0x78]\n 24077: a0 = a0 + t2\n 24080: a0 = a0 + a2\n 24083: a4 = a0 ^ t2\n 24086: a1 = a0 <u t2\n 24089: a1 = a2 if a4 == 0\n 24092: t1 = u64 [sp + 0x58]\n 24095: a2 = u64 [sp + 0x80]\n 24099: a2 = a2 + t1\n 24102: a5 = a3 + 0x20\n 24105: t0 = a5 <u a3\n 24108: a4 = a0 + t0\n 24111: a3 = u64 [sp + 0x20]\n 24114: a5 = a3 <u a5\n 24117: a3 = u64 [sp + 0x28]\n 24120: s1 = a4 ^ a3\n 24123: a3 = a3 <u a4\n 24126: a5 = a3 if s1 != 0\n 24129: a3 = a2 <u t1\n 24132: t1 = u64 [sp + 0x30]\n 24135: s1 = u64 [sp + 0x88]\n 24139: s1 = s1 + t1\n 24142: a3 = a3 + s1\n 24145: a1 = a1 + a2\n 24148: a2 = a1 <u a2\n 24151: a2 = a2 + a3\n 24154: a0 = a4 <u a0\n 24157: a0 = t0 if t0 == 0\n 24160: a0 = a0 + a1\n 24163: a1 = a0 <u a1\n 24166: a1 = a1 + a2\n 24169: a3 = u64 [sp + 0x10]\n 24172: a2 = a1 ^ a3\n 24175: a1 = a3 <u a1\n 24178: a4 = u64 [sp + 0x18]\n 24181: a3 = a4 <u a0\n 24184: a1 = a3 if a2 == 0\n 24187: a0 = a0 ^ a4\n 24190: a0 = a0 | a2\n 24193: a5 = a1 if a0 != 0\n 24196: jump @905 if a5 != 0\n      : @888 (gas: 10)\n 24200: a0 = u64 [sp + 0x70]\n 24203: a1 = u64 [sp + 0x68]\n 24206: a1 = a1 | a0\n 24209: a0 = 0xffffffe0\n 24219: a4 = u64 [sp + 0x60]\n 24222: a2 = a4 <u a0\n 24225: a3 = u64 [sp + 0x40]\n 24228: a2 = 0 if a3 != 0\n 24230: a2 = 0 if a1 != 0\n 24232: jump @897 if a2 == 0\n      : @889 (gas: 12)\n 24236: a3 = a4\n 24238: a1 = u64 [sp + 0x58]\n 24241: a1 = a1 | t1\n 24244: a5 = u64 [sp + 0x50]\n 24247: a0 = a5 <u a0\n 24250: a0 = 0 if t2 != 0\n 24252: a0 = 0 if a1 != 0\n 24254: ra = u64 [sp + 0x88]\n 24258: a2 = u64 [sp + 0x80]\n 24262: a4 = u64 [sp + 0x78]\n 24265: s1 = u64 [sp + 0x48]\n 24268: jump @897 if a0 == 0\n      : @890 (gas: 8)\n 24272: a0 = s1 | a2\n 24275: a1 = a4 | ra\n 24278: a0 = a0 | a1\n 24281: a0 = a0 >> 0x20\n 24284: a1 = a1 | a2\n 24287: a1 = a1 << 0x20\n 24290: a0 = a0 | a1\n 24293: jump @897 if a0 != 0\n      : @891 (gas: 5)\n 24297: i32 a0 = a3 + 0x20\n 24300: i32 a1 = a5 + 0x20\n 24303: u64 [sp + 0x58] = a1\n 24306: a1 = s1\n 24308: ra = 780, jump @31\n      : @892 [@dyn 390] (gas: 4)\n 24314: u64 [sp + 0x50] = a0\n 24317: a0 = u64 [sp + 0x58]\n 24320: a1 = s1\n 24322: ra = 782, jump @31\n      : @893 [@dyn 391] (gas: 4)\n 24328: a1 = a0\n 24330: a0 = u64 [sp + 0x50]\n 24333: a2 = s1\n 24335: ra = 784, jump @0\n      : @894 [@dyn 392] (gas: 27)\n 24341: a1 = u64 [sp + 0x60]\n 24344: a0 = a1 + s1\n 24347: a1 = a0 <u a1\n 24350: s1 = u64 [sp + 0x40]\n 24353: a2 = u64 [sp + 0x78]\n 24356: a2 = a2 + s1\n 24359: a2 = a2 + a1\n 24362: a3 = a2 ^ s1\n 24365: a4 = a2 <u s1\n 24368: a4 = a1 if a3 == 0\n 24371: a5 = u64 [sp + 0x70]\n 24374: a1 = u64 [sp + 0x80]\n 24378: a1 = a1 + a5\n 24381: a4 = a4 + a1\n 24384: t0 = a4 <u a1\n 24387: a1 = a1 <u a5\n 24390: a5 = u64 [sp + 0x88]\n 24394: a3 = u64 [sp + 0x68]\n 24397: a5 = a5 + a3\n 24400: a1 = a1 + a5\n 24403: a1 = a1 + t0\n 24406: a1 = a1 | a4\n 24409: a3 = 0xffffffe0\n 24419: a3 = a0 <u a3\n 24422: a3 = 0 if a2 != 0\n 24424: a3 = 0 if a1 != 0\n 24426: jump @897 if a3 == 0\n      : @895 (gas: 7)\n 24429: i32 a0 = a0 + 0x20\n 24432: u64 [sp + 232] = 0\n 24436: u64 [sp + 224] = 0\n 24440: u64 [sp + 216] = 0\n 24444: a1 = sp + 0xd0\n 24448: u64 [sp + 208] = 0\n 24452: ra = 786, jump @19\n      : @896 [@dyn 393] (gas: 14)\n 24458: a0 = u64 [sp + 0x8]\n 24461: a1 = u64 [sp + 0x68]\n 24464: u64 [a0 + 0x18] = a1\n 24467: a1 = u64 [sp + 0x70]\n 24470: u64 [a0 + 0x10] = a1\n 24473: u64 [a0 + 0x8] = s1\n 24476: a1 = u64 [sp + 0x60]\n 24479: u64 [a0] = a1\n 24481: sp = s0 + 0xfffffffffffffe70\n 24485: ra = u64 [sp + 0x188]\n 24489: s0 = u64 [sp + 0x180]\n 24493: s1 = u64 [sp + 0x178]\n 24497: sp = sp + 0x190\n 24501: ret\n      : @897 (gas: 1)\n 24503: trap\n      : @898 (gas: 2)\n 24504: a1 = 0x20130\n 24509: jump @906\n      : @899 (gas: 6)\n 24511: u64 [sp + 192] = 0\n 24515: u64 [sp + 184] = 0\n 24519: u64 [sp + 176] = 0\n 24523: t0 = 0x314\n 24527: a0 = 0x4e487b7100000000\n 24537: fallthrough\n      : @900 [@dyn 394] (gas: 4)\n 24538: a1 = sp + 0xb0\n 24542: u64 [sp + 0xc8] = a0\n 24546: a0 = 0\n 24548: ra = 790, jump @19\n      : @901 [@dyn 395] (gas: 7)\n 24554: u64 [sp + 168] = 0\n 24558: u64 [sp + 160] = 0\n 24562: u64 [sp + 144] = 0x41\n 24567: a0 = 0x4\n 24570: a1 = sp + 0x90\n 24574: u64 [sp + 152] = 0\n 24578: ra = 792, jump @19\n      : @902 [@dyn 396] (gas: 2)\n 24584: a1 = i32 [0x20124]\n 24589: jump @904 if a1 >u 63\n      : @903 (gas: 2)\n 24593: u32 [0x20124] = 0x40\n 24599: fallthrough\n      : @904 (gas: 7)\n 24600: a1 = 0x20130\n 24605: i32 a1 = a1 + 0\n 24607: a0 = 0x1\n 24610: a2 = 0x24\n 24613: ecalli 11 // 'seal_return'\n 24615: a1 = 0x20130\n 24620: jump @906\n      : @905 (gas: 2)\n 24622: a1 = 0x20130\n 24627: fallthrough\n      : @906 (gas: 6)\n 24628: i32 a1 = a1 + 0\n 24630: a0 = 0x1\n 24633: a2 = 0\n 24635: ra = 0x31a\n 24639: ecalli 11 // 'seal_return'\n 24641: fallthrough\n      : @907 [@dyn 397] (gas: 11)\n 24642: sp = sp + 0xffffffffffffffc0\n 24645: u64 [sp + 0x38] = ra\n 24648: u64 [sp + 0x30] = s0\n 24651: u64 [sp + 0x28] = s1\n 24654: s0 = sp + 0x40\n 24657: sp = sp & 0xffffffffffffffe0\n 24660: s1 = a0\n 24662: i32 a0 = sp + 0\n 24664: a1 = 0x4\n 24667: ecalli 2 // 'call_data_load'\n 24669: fallthrough\n      : @908 (gas: 10)\n 24670: a0 = u64 [sp + 0x10]\n 24673: a1 = u64 [sp + 0x18]\n 24676: a2 = 0x100000000\n 24686: a2 = a2 ^ a0\n 24689: a2 = a2 | a1\n 24692: a3 = a0 >> 0x20\n 24695: a3 = a3 <u 0x1\n 24698: a3 = 0 if a1 != 0\n 24700: a3 = 0 if a2 == 0\n 24702: jump @910 if a3 == 0\n      : @909 (gas: 12)\n 24705: a2 = u64 [sp]\n 24707: a3 = u64 [sp + 0x8]\n 24710: u64 [s1] = a2\n 24712: u64 [s1 + 0x8] = a3\n 24715: u64 [s1 + 0x10] = a0\n 24718: u64 [s1 + 0x18] = a1\n 24721: sp = s0 + 0xffffffffffffffc0\n 24724: ra = u64 [sp + 0x38]\n 24727: s0 = u64 [sp + 0x30]\n 24730: s1 = u64 [sp + 0x28]\n 24733: sp = sp + 0x40\n 24736: ret\n      : @910 (gas: 7)\n 24738: a1 = 0x20130\n 24743: i32 a1 = a1 + 0\n 24745: a0 = 0x1\n 24748: a2 = 0\n 24750: ra = 0x31c\n 24754: ecalli 11 // 'seal_return'\n 24756: fallthrough\n      : @911 [@dyn 398] (gas: 37)\n 24757: sp = sp + 0xffffffffffffff60\n 24761: u64 [sp + 0x98] = ra\n 24765: u64 [sp + 0x90] = s0\n 24769: u64 [sp + 0x88] = s1\n 24773: s0 = sp + 0xa0\n 24777: sp = sp & 0xffffffffffffffe0\n 24780: a4 = u64 [a1]\n 24782: s1 = u64 [a2 + 0x8]\n 24785: ra = u64 [a1 + 0x8]\n 24788: t1 = u64 [a2]\n 24790: a3 = a4 + 0x1f\n 24793: u64 [sp + 0x58] = a4\n 24796: t0 = a3 <u a4\n 24799: a5 = ra + t0\n 24802: u64 [sp + 0x40] = t1\n 24805: t1 = a3 <u t1\n 24808: a3 = a5 ^ s1\n 24811: u64 [sp + 0x48] = s1\n 24814: a4 = a5 <u s1\n 24817: a4 = t1 if a3 == 0\n 24820: t2 = u64 [a1 + 0x10]\n 24823: a3 = a5 <u ra\n 24826: a3 = t0 if t0 == 0\n 24829: t0 = u64 [a2 + 0x18]\n 24832: t1 = u64 [a1 + 0x18]\n 24835: s1 = u64 [a2 + 0x10]\n 24838: a3 = a3 + t2\n 24841: a1 = a3 <u t2\n 24844: a1 = a1 + t1\n 24847: a2 = a1 ^ t0\n 24850: a1 = a1 <s t0\n 24853: a5 = a3 <u s1\n 24856: a1 = a5 if a2 == 0\n 24859: a3 = a3 ^ s1\n 24862: a2 = a2 | a3\n 24865: a4 = a1 if a2 != 0\n 24868: jump @918 if a4 == 0\n      : @912 (gas: 14)\n 24872: u64 [sp + 0x28] = t0\n 24875: u64 [sp + 0x30] = s1\n 24878: u64 [sp + 0x38] = a0\n 24881: a0 = u64 [sp + 0x58]\n 24884: a0 = a0 | t2\n 24887: u64 [sp + 0x18] = t1\n 24890: a1 = ra | t1\n 24893: a0 = a0 | a1\n 24896: a0 = a0 >> 0x20\n 24899: u64 [sp + 0x20] = t2\n 24902: a1 = a1 | t2\n 24905: a1 = a1 << 0x20\n 24908: a0 = a0 | a1\n 24911: jump @917 if a0 != 0\n      : @913 (gas: 5)\n 24915: s1 = ra\n 24917: a1 = i32 [sp + 0x58]\n 24920: i32 a0 = sp + 0x60\n 24923: ecalli 2 // 'call_data_load'\n 24925: fallthrough\n      : @914 (gas: 8)\n 24926: t2 = u64 [sp + 0x78]\n 24929: a0 = u64 [sp + 0x70]\n 24932: a2 = u64 [sp + 0x68]\n 24935: u64 [sp + 0x50] = a0\n 24938: a0 = a0 | t2\n 24941: a1 = a2 <u 0x1\n 24944: a1 = 0 if a0 != 0\n 24946: jump @919 if a1 == 0\n      : @915 (gas: 46)\n 24950: a1 = u64 [sp + 0x60]\n 24953: a0 = u64 [sp + 0x58]\n 24956: a4 = a0 + 0x20\n 24959: a3 = a4 <u a0\n 24962: t1 = s1 + a3\n 24965: u64 [sp + 0x8] = a1\n 24968: a1 = a1 + a4\n 24971: t0 = a1 <u a4\n 24974: u64 [sp + 0x10] = a2\n 24977: a2 = a2 + t1\n 24980: a2 = a2 + t0\n 24983: a5 = a2 ^ t1\n 24986: a0 = a2 <u t1\n 24989: a0 = t0 if a5 == 0\n 24992: a5 = t1 <u s1\n 24995: a5 = a3 if a3 == 0\n 24998: a3 = u64 [sp + 0x20]\n 25001: ra = a3 + a5\n 25004: s1 = ra <u a3\n 25007: t0 = u64 [sp + 0x18]\n 25010: t0 = t0 + s1\n 25013: s1 = u64 [sp + 0x48]\n 25016: a5 = a2 ^ s1\n 25019: a2 = s1 <u a2\n 25022: s1 = u64 [sp + 0x40]\n 25025: a1 = s1 <u a1\n 25028: a1 = a2 if a5 != 0\n 25031: a2 = u64 [sp + 0x50]\n 25034: a2 = a2 + ra\n 25037: a5 = a2 <u ra\n 25040: u64 [sp + 0x58] = t2\n 25043: s1 = t0 + t2\n 25046: a5 = a5 + s1\n 25049: a0 = a0 + a2\n 25052: a2 = a0 <u a2\n 25055: a2 = a2 + a5\n 25058: s1 = u64 [sp + 0x28]\n 25061: a5 = a2 ^ s1\n 25064: a2 = s1 <u a2\n 25067: t2 = u64 [sp + 0x30]\n 25070: s1 = t2 <u a0\n 25073: s1 = a2 if a5 != 0\n 25076: a0 = a0 ^ t2\n 25079: a0 = a0 | a5\n 25082: a1 = s1 if a0 != 0\n 25085: jump @920 if a1 != 0\n      : @916 (gas: 19)\n 25088: a0 = u64 [sp + 0x38]\n 25091: a1 = u64 [sp + 0x8]\n 25094: u64 [a0 + 0x20] = a1\n 25097: u64 [a0] = a4\n 25099: a1 = u64 [sp + 0x10]\n 25102: u64 [a0 + 0x28] = a1\n 25105: u64 [a0 + 0x8] = t1\n 25108: a1 = u64 [sp + 0x50]\n 25111: u64 [a0 + 0x30] = a1\n 25114: u64 [a0 + 0x10] = ra\n 25117: a1 = u64 [sp + 0x58]\n 25120: u64 [a0 + 0x38] = a1\n 25123: u64 [a0 + 0x18] = t0\n 25126: sp = s0 + 0xffffffffffffff60\n 25130: ra = u64 [sp + 0x98]\n 25134: s0 = u64 [sp + 0x90]\n 25138: s1 = u64 [sp + 0x88]\n 25142: sp = sp + 0xa0\n 25146: ret\n      : @917 (gas: 1)\n 25148: trap\n      : @918 (gas: 2)\n 25149: a1 = 0x20130\n 25154: jump @921\n      : @919 (gas: 2)\n 25156: a1 = 0x20130\n 25161: jump @921\n      : @920 (gas: 2)\n 25163: a1 = 0x20130\n 25168: fallthrough\n      : @921 (gas: 6)\n 25169: i32 a1 = a1 + 0\n 25171: a0 = 0x1\n 25174: a2 = 0\n 25176: ra = 0x31e\n 25180: ecalli 11 // 'seal_return'\n 25182: fallthrough\n      : @922 [@dyn 399] (gas: 33)\n 25183: sp = sp + 0xffffffffffffffa0\n 25186: u64 [sp + 0x58] = ra\n 25189: u64 [sp + 0x50] = s0\n 25192: u64 [sp + 0x48] = s1\n 25195: s0 = sp + 0x60\n 25198: sp = sp & 0xfffffffffffffff0\n 25201: a2 = u64 [a1 + 0x10]\n 25204: a5 = u64 [a1 + 0x8]\n 25207: a4 = u64 [a1]\n 25209: a1 = u64 [a1 + 0x18]\n 25212: t0 = a2 << 0x3f\n 25215: a3 = a5 >> 0x1\n 25218: t0 = a3 | t0\n 25221: a3 = a1 << 0x3f\n 25224: a2 = a2 >> 0x1\n 25227: a3 = a3 | a2\n 25230: a5 = a5 << 0x3f\n 25233: a2 = a4 >> 0x1\n 25236: a5 = a5 | a2\n 25239: t1 = a1 >> 0x1\n 25242: a4 = a4 & 0x1\n 25245: a1 = -a4\n 25247: s1 = a4 <u 0x1\n 25250: a2 = a5 & 0x7f\n 25253: t2 = a1 & a3\n 25256: a3 = a1 & t0\n 25259: a2 = a5 if a4 != 0\n 25262: a4 = a1 & t1\n 25265: a1 = a2 <u 0x20\n 25268: a1 = 0 if a3 != 0\n 25270: a5 = t2 | a4\n 25273: a1 = 0 if a5 != 0\n 25275: jump @925 if s1 != a1\n      : @923 (gas: 5)\n 25278: u64 [a0] = a2\n 25280: u64 [a0 + 0x8] = a3\n 25283: u64 [a0 + 0x10] = t2\n 25286: u64 [a0 + 0x18] = a4\n 25289: t0 = 800, jump @1233\n      : @924 [@dyn 400] (gas: 1)\n 25295: ret\n      : @925 (gas: 1)\n 25297: t0 = 802, jump @1228\n      : @926 [@dyn 401] (gas: 1)\n 25303: ra = 804, jump @19\n      : @927 [@dyn 402] (gas: 7)\n 25309: u64 [sp + 24] = 0\n 25312: u64 [sp + 16] = 0\n 25315: u64 [sp + 0] = 0x22\n 25318: a0 = 0x4\n 25321: a1 = sp\n 25323: u64 [sp + 8] = 0\n 25326: ra = 806, jump @19\n      : @928 [@dyn 403] (gas: 2)\n 25332: a1 = i32 [0x20124]\n 25337: jump @930 if a1 >u 63\n      : @929 (gas: 2)\n 25341: u32 [0x20124] = 0x40\n 25347: fallthrough\n      : @930 (gas: 7)\n 25348: a1 = 0x20130\n 25353: i32 a1 = a1 + 0\n 25355: a0 = 0x1\n 25358: a2 = 0x24\n 25361: ra = 0x328\n 25365: ecalli 11 // 'seal_return'\n 25367: fallthrough\n      : @931 [@dyn 404] (gas: 46)\n 25368: sp = sp + 0xffffffffffffff70\n 25372: u64 [sp + 0x88] = ra\n 25376: u64 [sp + 0x80] = s0\n 25380: u64 [sp + 0x78] = s1\n 25383: s0 = sp + 0x90\n 25387: sp = sp & 0xfffffffffffffff0\n 25390: t0 = a0\n 25392: a2 = u64 [a1]\n 25394: t2 = u64 [a0 + 0x8]\n 25397: a5 = u64 [a1 + 0x8]\n 25400: t1 = u64 [a0]\n 25402: a3 = a2 + 0x1f\n 25405: ra = a3 <u a2\n 25408: a2 = a5 + ra\n 25411: a3 = a3 & 0xffffffffffffffe0\n 25414: u64 [sp + 0x8] = t1\n 25417: t1 = t1 + a3\n 25420: a4 = t1 <u a3\n 25423: a3 = a2 + t2\n 25426: a3 = a3 + a4\n 25429: s1 = a3 ^ a2\n 25432: a0 = a3 <u a2\n 25435: a0 = a4 if s1 == 0\n 25438: a4 = u64 [t0 + 0x18]\n 25441: a5 = a2 <u a5\n 25444: s1 = u64 [a1 + 0x10]\n 25447: t0 = u64 [t0 + 0x10]\n 25450: a1 = u64 [a1 + 0x18]\n 25453: a5 = ra if ra == 0\n 25456: a5 = a5 + s1\n 25459: s1 = a5 <u s1\n 25462: a2 = a5 + t0\n 25465: a0 = a0 + a2\n 25468: a5 = a2 <u a5\n 25471: a2 = a0 <u a2\n 25474: a1 = a1 + a4\n 25477: a1 = a1 + s1\n 25480: a1 = a1 + a5\n 25483: a5 = a1 + a2\n 25486: a1 = a5 >u 0\n 25488: a2 = a0 >u 0\n 25490: a2 = a1 if a5 != 0\n 25493: a1 = a0 | a5\n 25496: s1 = a3 >u 0\n 25498: s1 = a2 if a1 != 0\n 25501: jump @935 if s1 != 0\n      : @932 (gas: 13)\n 25504: a1 = u64 [sp + 0x8]\n 25507: a1 = t1 <u a1\n 25510: a2 = a3 ^ t2\n 25513: s1 = a3 <u t2\n 25516: s1 = a1 if a2 == 0\n 25519: a1 = a0 <u t0\n 25522: a2 = a5 ^ a4\n 25525: a4 = a5 <u a4\n 25528: a4 = a1 if a2 == 0\n 25531: a1 = a0 ^ t0\n 25534: a1 = a1 | a2\n 25537: a4 = s1 if a1 == 0\n 25540: jump @935 if a4 != 0\n      : @933 (gas: 7)\n 25543: u64 [sp + 0x50] = t1\n 25546: u64 [sp + 0x58] = a3\n 25549: u64 [sp + 0x60] = a0\n 25552: a0 = 0x40\n 25555: a1 = sp + 0x50\n 25558: u64 [sp + 0x68] = a5\n 25561: ra = 810, jump @19\n      : @934 [@dyn 405] (gas: 6)\n 25567: sp = s0 + 0xffffffffffffff70\n 25571: ra = u64 [sp + 0x88]\n 25575: s0 = u64 [sp + 0x80]\n 25579: s1 = u64 [sp + 0x78]\n 25582: sp = sp + 0x90\n 25586: ret\n      : @935 (gas: 6)\n 25588: u64 [sp + 64] = 0\n 25591: u64 [sp + 56] = 0\n 25594: u64 [sp + 48] = 0\n 25597: t0 = 0x32c\n 25601: a0 = 0x4e487b7100000000\n 25611: fallthrough\n      : @936 [@dyn 406] (gas: 4)\n 25612: a1 = sp + 0x30\n 25615: u64 [sp + 0x48] = a0\n 25618: a0 = 0\n 25620: ra = 814, jump @19\n      : @937 [@dyn 407] (gas: 7)\n 25626: u64 [sp + 40] = 0\n 25629: u64 [sp + 32] = 0\n 25632: u64 [sp + 16] = 0x41\n 25636: a0 = 0x4\n 25639: a1 = sp + 0x10\n 25642: u64 [sp + 24] = 0\n 25645: ra = 816, jump @19\n      : @938 [@dyn 408] (gas: 2)\n 25651: a1 = i32 [0x20124]\n 25656: jump @940 if a1 >u 63\n      : @939 (gas: 2)\n 25660: u32 [0x20124] = 0x40\n 25666: fallthrough\n      : @940 (gas: 7)\n 25667: a1 = 0x20130\n 25672: i32 a1 = a1 + 0\n 25674: a0 = 0x1\n 25677: a2 = 0x24\n 25680: ra = 0x332\n 25684: ecalli 11 // 'seal_return'\n 25686: fallthrough\n      : @941 [@dyn 409] (gas: 22)\n 25687: sp = sp + 0xfffffffffffffee0\n 25691: u64 [sp + 0x118] = ra\n 25695: u64 [sp + 0x110] = s0\n 25699: u64 [sp + 0x108] = s1\n 25703: s0 = sp + 0x120\n 25707: sp = sp & 0xfffffffffffffff0\n 25710: a4 = u64 [a1 + 0x10]\n 25713: a3 = u64 [a1 + 0x18]\n 25716: a5 = u64 [a1 + 0x8]\n 25719: t0 = u64 [a1]\n 25721: u64 [sp + 0x68] = a3\n 25724: u64 [sp + 0x78] = a5\n 25727: a1 = a5 | a3\n 25730: a3 = t0 | a4\n 25733: a3 = a3 | a1\n 25736: a3 = a3 >> 0x20\n 25739: u64 [sp + 0x70] = a4\n 25742: a1 = a1 | a4\n 25745: a1 = a1 << 0x20\n 25748: a1 = a1 | a3\n 25751: u64 [sp + 0x8] = a0\n 25754: jump @956 if a1 != 0\n      : @942 (gas: 15)\n 25758: a0 = u64 [a2 + 0x18]\n 25761: u64 [sp + 0x48] = a0\n 25764: s1 = u64 [a2 + 0x10]\n 25767: a0 = u64 [a2 + 0x8]\n 25770: u64 [sp + 0x50] = a0\n 25773: a0 = u64 [a2]\n 25775: u64 [sp + 0x58] = a0\n 25778: u64 [sp + 248] = 0\n 25782: u64 [sp + 240] = 0\n 25786: u64 [sp + 232] = 0\n 25790: a1 = sp + 0xe0\n 25794: u64 [sp + 224] = 0x20\n 25799: a0 = t0\n 25801: u64 [sp + 0x60] = t0\n 25804: ra = 820, jump @19\n      : @943 [@dyn 410] (gas: 12)\n 25810: a1 = u64 [sp + 0x58]\n 25813: a0 = a1 | s1\n 25816: a2 = u64 [sp + 0x48]\n 25819: a3 = u64 [sp + 0x50]\n 25822: a2 = a2 | a3\n 25825: a0 = a0 | a2\n 25828: a0 = a0 >> 0x20\n 25831: u64 [sp + 0x20] = s1\n 25834: a2 = a2 | s1\n 25837: a2 = a2 << 0x20\n 25840: a0 = a0 | a2\n 25843: jump @956 if a0 != 0\n      : @944 (gas: 2)\n 25847: a0 = sp + 0xc0\n 25851: ra = 822, jump @17\n      : @945 [@dyn 411] (gas: 13)\n 25857: a0 = u64 [sp + 0x70]\n 25860: a1 = u64 [sp + 0x68]\n 25863: a1 = a1 | a0\n 25866: a0 = 0x100000000\n 25876: u64 [sp + 0x10] = a0\n 25879: a0 = 0xffffffe0\n 25889: a2 = u64 [sp + 0x60]\n 25892: a0 = a2 <u a0\n 25895: a3 = u64 [sp + 0x78]\n 25898: a0 = 0 if a3 != 0\n 25900: u64 [sp + 0x18] = a1\n 25903: a0 = 0 if a1 != 0\n 25905: jump @956 if a0 == 0\n      : @946 (gas: 16)\n 25909: a3 = u64 [sp + 0xd8]\n 25913: a4 = u64 [sp + 0xd0]\n 25917: a5 = u64 [sp + 0xc8]\n 25921: a1 = u64 [sp + 0xc0]\n 25925: i32 a0 = a2 + 0x20\n 25928: u64 [sp + 0x28] = a1\n 25931: u64 [sp + 0xa0] = a1\n 25935: u64 [sp + 0x30] = a5\n 25938: u64 [sp + 0xa8] = a5\n 25942: u64 [sp + 0x38] = a4\n 25945: u64 [sp + 0xb0] = a4\n 25949: a1 = sp + 0xa0\n 25953: u64 [sp + 0x40] = a3\n 25956: u64 [sp + 0xb8] = a3\n 25960: s1 = a2\n 25962: ra = 824, jump @19\n      : @947 [@dyn 412] (gas: 8)\n 25968: a0 = u64 [sp + 0x10]\n 25971: a0 = a0 + 0xffffffffffffffc0\n 25974: a0 = s1 <u a0\n 25977: a1 = u64 [sp + 0x78]\n 25980: a0 = 0 if a1 != 0\n 25982: a1 = u64 [sp + 0x18]\n 25985: a0 = 0 if a1 != 0\n 25987: jump @956 if a0 == 0\n      : @948 (gas: 10)\n 25991: a0 = u64 [sp + 0x48]\n 25994: a1 = u64 [sp + 0x20]\n 25997: a0 = a0 | a1\n 26000: a1 = 0xffffffe0\n 26010: a3 = u64 [sp + 0x58]\n 26013: a1 = a3 <u a1\n 26016: a4 = u64 [sp + 0x50]\n 26019: a1 = 0 if a4 != 0\n 26021: a1 = 0 if a0 != 0\n 26023: jump @956 if a1 == 0\n      : @949 (gas: 13)\n 26027: a2 = s1\n 26029: a1 = u64 [sp + 0x28]\n 26032: a5 = u64 [sp + 0x38]\n 26035: a0 = a1 | a5\n 26038: a4 = u64 [sp + 0x40]\n 26041: s1 = u64 [sp + 0x30]\n 26044: a4 = a4 | s1\n 26047: a0 = a0 | a4\n 26050: a0 = a0 >> 0x20\n 26053: a4 = a4 | a5\n 26056: a4 = a4 << 0x20\n 26059: a0 = a0 | a4\n 26062: jump @956 if a0 != 0\n      : @950 (gas: 5)\n 26066: i32 a0 = a2 + 0x40\n 26069: i32 a3 = a3 + 0x20\n 26072: u64 [sp + 0x58] = a3\n 26075: s1 = a1\n 26077: ra = 826, jump @31\n      : @951 [@dyn 413] (gas: 4)\n 26083: u64 [sp + 0x50] = a0\n 26086: a0 = u64 [sp + 0x58]\n 26089: a1 = s1\n 26091: ra = 828, jump @31\n      : @952 [@dyn 414] (gas: 4)\n 26097: a1 = a0\n 26099: a0 = u64 [sp + 0x50]\n 26102: a2 = s1\n 26104: ra = 830, jump @0\n      : @953 [@dyn 415] (gas: 27)\n 26110: a0 = u64 [sp + 0x60]\n 26113: a0 = a0 + s1\n 26116: a1 = a0 <u s1\n 26119: a2 = u64 [sp + 0x78]\n 26122: a4 = u64 [sp + 0x30]\n 26125: a2 = a2 + a4\n 26128: a2 = a2 + a1\n 26131: a3 = a2 ^ a4\n 26134: a4 = a2 <u a4\n 26137: a4 = a1 if a3 == 0\n 26140: a1 = u64 [sp + 0x70]\n 26143: a3 = u64 [sp + 0x38]\n 26146: a1 = a1 + a3\n 26149: a3 = a1 <u a3\n 26152: a5 = u64 [sp + 0x68]\n 26155: s1 = u64 [sp + 0x40]\n 26158: a5 = a5 + s1\n 26161: a3 = a3 + a5\n 26164: a4 = a4 + a1\n 26167: a1 = a4 <u a1\n 26170: a1 = a1 + a3\n 26173: a1 = a1 | a4\n 26176: a3 = 0xffffffc0\n 26186: a3 = a0 <u a3\n 26189: a3 = 0 if a2 != 0\n 26191: a3 = 0 if a1 != 0\n 26193: jump @956 if a3 == 0\n      : @954 (gas: 7)\n 26197: i32 a0 = a0 + 0x40\n 26200: u64 [sp + 152] = 0\n 26204: u64 [sp + 144] = 0\n 26208: u64 [sp + 136] = 0\n 26212: a1 = sp + 0x80\n 26216: u64 [sp + 128] = 0\n 26220: ra = 832, jump @19\n      : @955 [@dyn 416] (gas: 35)\n 26226: s1 = u64 [sp + 0x28]\n 26229: s1 = s1 + 0x1f\n 26232: a0 = 0x1ffffffe0\n 26242: a0 = a0 & s1\n 26245: a1 = u64 [sp + 0x60]\n 26248: a0 = a0 + a1\n 26251: a1 = a0 <u a1\n 26254: a3 = u64 [sp + 0x78]\n 26257: a2 = a3 + a1\n 26260: a3 = a2 <u a3\n 26263: a3 = a1 if a1 == 0\n 26266: a1 = u64 [sp + 0x70]\n 26269: a3 = a3 + a1\n 26272: a1 = a3 <u a1\n 26275: a4 = u64 [sp + 0x68]\n 26278: a1 = a1 + a4\n 26281: a4 = a0 + 0x40\n 26284: a0 = a4 <u a0\n 26287: a5 = a2 + a0\n 26290: a2 = a5 <u a2\n 26293: a2 = a0 if a0 == 0\n 26296: a2 = a2 + a3\n 26299: a0 = a2 <u a3\n 26302: a0 = a0 + a1\n 26305: a1 = u64 [sp + 0x8]\n 26308: u64 [a1] = a4\n 26310: u64 [a1 + 0x8] = a5\n 26313: u64 [a1 + 0x10] = a2\n 26316: u64 [a1 + 0x18] = a0\n 26319: sp = s0 + 0xfffffffffffffee0\n 26323: ra = u64 [sp + 0x118]\n 26327: s0 = u64 [sp + 0x110]\n 26331: s1 = u64 [sp + 0x108]\n 26335: sp = sp + 0x120\n 26339: ret\n      : @956 (gas: 1)\n 26341: trap\n      : @957 (gas: 10)\n 26342: a3 = u64 [a1 + 0x18]\n 26345: a4 = u64 [a1 + 0x10]\n 26348: t0 = u64 [a1 + 0x8]\n 26351: a5 = a3 >u 0\n 26353: a2 = a4 >u 0\n 26355: a2 = a5 if a3 != 0\n 26358: a3 = a3 | a4\n 26361: a4 = t0 >u 0\n 26363: a4 = a2 if a3 != 0\n 26366: jump @959 if a4 != 0\n      : @958 (gas: 16)\n 26369: a1 = u64 [a1]\n 26371: a2 = a1 + 0x1f\n 26374: a1 = a2 <u a1\n 26377: a1 = a1 + t0\n 26380: a1 = a1 & 0x1\n 26383: a2 = a2 & 0xffffffffffffffe0\n 26386: a3 = a2 + 0x20\n 26389: a2 = a3 <u a2\n 26392: a4 = a1 + a2\n 26395: a1 = a4 <u a1\n 26398: a1 = a2 if a2 == 0\n 26401: u64 [a0 + 24] = 0\n 26404: u64 [a0] = a3\n 26406: u64 [a0 + 0x8] = a4\n 26409: u64 [a0 + 0x10] = a1\n 26412: ret\n      : @959 (gas: 6)\n 26414: sp = sp + 0xffffffffffffffb0\n 26417: u64 [sp + 0x48] = ra\n 26420: u64 [sp + 0x40] = s0\n 26423: s0 = sp + 0x50\n 26426: sp = sp & 0xfffffffffffffff0\n 26429: t0 = 834, jump @1228\n      : @960 [@dyn 417] (gas: 1)\n 26435: ra = 836, jump @19\n      : @961 [@dyn 418] (gas: 7)\n 26441: u64 [sp + 24] = 0\n 26444: u64 [sp + 16] = 0\n 26447: u64 [sp + 0] = 0x41\n 26450: a0 = 0x4\n 26453: a1 = sp\n 26455: u64 [sp + 8] = 0\n 26458: ra = 838, jump @19\n      : @962 [@dyn 419] (gas: 2)\n 26464: a1 = i32 [0x20124]\n 26469: jump @964 if a1 >u 63\n      : @963 (gas: 2)\n 26473: u32 [0x20124] = 0x40\n 26479: fallthrough\n      : @964 (gas: 7)\n 26480: a1 = 0x20130\n 26485: i32 a1 = a1 + 0\n 26487: a0 = 0x1\n 26490: a2 = 0x24\n 26493: ra = 0x348\n 26497: ecalli 11 // 'seal_return'\n 26499: fallthrough\n      : @965 [@dyn 420] (gas: 38)\n 26500: sp = sp + 0xfffffffffffffe50\n 26504: u64 [sp + 0x1a8] = ra\n 26508: u64 [sp + 0x1a0] = s0\n 26512: u64 [sp + 0x198] = s1\n 26516: s0 = sp + 0x1b0\n 26520: sp = sp & 0xfffffffffffffff0\n 26523: a4 = u64 [a3 + 0x18]\n 26526: u64 [sp + 0x20] = a4\n 26529: a4 = u64 [a3 + 0x10]\n 26532: u64 [sp + 0x28] = a4\n 26535: a4 = u64 [a3 + 0x8]\n 26538: u64 [sp + 0x10] = a4\n 26541: a3 = u64 [a3]\n 26543: u64 [sp + 0x18] = a3\n 26546: a3 = u64 [a1 + 0x18]\n 26549: u64 [sp + 0x30] = a3\n 26552: a3 = u64 [a1 + 0x10]\n 26555: u64 [sp + 0x38] = a3\n 26558: a3 = u64 [a1 + 0x8]\n 26561: u64 [sp + 0x70] = a3\n 26564: a1 = u64 [a1]\n 26566: u64 [sp + 0x68] = a1\n 26569: a3 = u64 [a2]\n 26571: a1 = u64 [a2 + 0x8]\n 26574: a4 = u64 [a2 + 0x10]\n 26577: a2 = u64 [a2 + 0x18]\n 26580: u64 [sp + 0x8] = a0\n 26583: u64 [sp + 0x98] = a2\n 26587: u64 [sp + 0x168] = a2\n 26591: u64 [sp + 0x90] = a4\n 26595: u64 [sp + 0x160] = a4\n 26599: u64 [sp + 0x88] = a1\n 26603: u64 [sp + 0x158] = a1\n 26607: a0 = sp + 0x170\n 26611: a1 = sp + 0x150\n 26615: u64 [sp + 0x60] = a3\n 26618: u64 [sp + 0x150] = a3\n 26622: ra = 842, jump @957\n      : @966 [@dyn 421] (gas: 11)\n 26628: a0 = u64 [sp + 0x170]\n 26632: u64 [sp + 0x58] = a0\n 26635: a0 = u64 [sp + 0x178]\n 26639: u64 [sp + 0x50] = a0\n 26642: a0 = u64 [sp + 0x180]\n 26646: u64 [sp + 0x48] = a0\n 26649: a0 = u64 [sp + 0x188]\n 26653: u64 [sp + 0x40] = a0\n 26656: a0 = sp + 0x130\n 26660: a1 = 0x40\n 26663: ra = 844, jump @17\n      : @967 [@dyn 422] (gas: 23)\n 26669: a1 = u64 [sp + 0x148]\n 26673: u64 [sp + 0xa8] = a1\n 26677: a2 = u64 [sp + 0x140]\n 26681: u64 [sp + 0xa0] = a2\n 26685: s1 = u64 [sp + 0x138]\n 26689: a0 = u64 [sp + 0x130]\n 26693: a3 = u64 [sp + 0x40]\n 26696: u64 [sp + 0x108] = a3\n 26700: a3 = a0\n 26702: u64 [sp + 0x80] = a0\n 26706: a0 = u64 [sp + 0x48]\n 26709: u64 [sp + 0x100] = a0\n 26713: a0 = u64 [sp + 0x50]\n 26716: u64 [sp + 0xf8] = a0\n 26720: a0 = u64 [sp + 0x58]\n 26723: u64 [sp + 0xf0] = a0\n 26727: u64 [sp + 0x128] = a1\n 26731: u64 [sp + 0x120] = a2\n 26735: u64 [sp + 0x118] = s1\n 26739: a0 = sp + 0x110\n 26743: a1 = sp + 0xf0\n 26747: u64 [sp + 0x110] = a3\n 26751: ra = 846, jump @931\n      : @968 [@dyn 423] (gas: 12)\n 26757: a0 = u64 [sp + 0x80]\n 26761: u64 [sp + 0x78] = s1\n 26764: a2 = u64 [sp + 0xa8]\n 26768: a2 = a2 | s1\n 26771: a3 = u64 [sp + 0xa0]\n 26775: a1 = a0 | a3\n 26778: a1 = a1 | a2\n 26781: a1 = a1 >> 0x20\n 26784: a2 = a2 | a3\n 26787: a2 = a2 << 0x20\n 26790: a1 = a1 | a2\n 26793: jump @979 if a1 != 0\n      : @969 (gas: 10)\n 26797: s1 = u64 [sp + 0x60]\n 26800: u64 [sp + 0xd0] = s1\n 26804: a1 = u64 [sp + 0x88]\n 26808: u64 [sp + 0xd8] = a1\n 26812: a1 = u64 [sp + 0x90]\n 26816: u64 [sp + 0xe0] = a1\n 26820: a1 = sp + 0xd0\n 26824: a2 = u64 [sp + 0x98]\n 26828: u64 [sp + 0xe8] = a2\n 26832: ra = 848, jump @19\n      : @970 [@dyn 424] (gas: 41)\n 26838: a1 = u64 [sp + 0x68]\n 26841: a1 = a1 + s1\n 26844: a2 = a1 <u s1\n 26847: a0 = u64 [sp + 0x70]\n 26850: t2 = u64 [sp + 0x88]\n 26854: a0 = a0 + t2\n 26857: a3 = a0 + a2\n 26860: a4 = a3 ^ t2\n 26863: a0 = a3 <u t2\n 26866: a0 = a2 if a4 == 0\n 26869: a4 = u64 [sp + 0x10]\n 26872: a2 = a3 ^ a4\n 26875: a3 = a4 <u a3\n 26878: a4 = u64 [sp + 0x18]\n 26881: a1 = a4 <u a1\n 26884: s1 = u64 [sp + 0x38]\n 26887: t1 = u64 [sp + 0x90]\n 26891: a4 = t1 + s1\n 26894: a1 = a3 if a2 != 0\n 26897: a2 = a4 <u t1\n 26900: ra = u64 [sp + 0x30]\n 26903: t0 = u64 [sp + 0x98]\n 26907: a3 = t0 + ra\n 26910: a2 = a2 + a3\n 26913: a0 = a0 + a4\n 26916: a3 = a0 <u a4\n 26919: a2 = a2 + a3\n 26922: a4 = u64 [sp + 0x20]\n 26925: a3 = a2 ^ a4\n 26928: a2 = a4 <u a2\n 26931: a5 = u64 [sp + 0x28]\n 26934: a4 = a5 <u a0\n 26937: a2 = a4 if a3 == 0\n 26940: a0 = a0 ^ a5\n 26943: a0 = a0 | a3\n 26946: a1 = a2 if a0 != 0\n 26949: a4 = t0\n 26951: a3 = t1\n 26953: t0 = u64 [sp + 0x60]\n 26956: t1 = u64 [sp + 0x68]\n 26959: jump @980 if a1 != 0\n      : @971 (gas: 9)\n 26963: a0 = t1 | s1\n 26966: a1 = u64 [sp + 0x70]\n 26969: a1 = a1 | ra\n 26972: a0 = a0 | a1\n 26975: a0 = a0 >> 0x20\n 26978: a1 = a1 | s1\n 26981: a1 = a1 << 0x20\n 26984: a0 = a0 | a1\n 26987: jump @979 if a0 != 0\n      : @972 (gas: 10)\n 26991: a0 = t0 | a3\n 26994: a1 = t2 | a4\n 26997: a0 = a0 | a1\n 27000: a0 = a0 >> 0x20\n 27003: a1 = a1 | a3\n 27006: a1 = a1 << 0x20\n 27009: a0 = a0 | a1\n 27012: a2 = u64 [sp + 0x78]\n 27015: a3 = u64 [sp + 0xa8]\n 27019: jump @979 if a0 != 0\n      : @973 (gas: 9)\n 27023: a0 = u64 [sp + 0xa0]\n 27027: a0 = a0 | a3\n 27030: a1 = 0xffffffe0\n 27040: a4 = u64 [sp + 0x80]\n 27044: u64 [sp + 0x70] = a1\n 27047: a1 = a4 <u a1\n 27050: a1 = 0 if a2 != 0\n 27052: a1 = 0 if a0 != 0\n 27054: jump @979 if a1 == 0\n      : @974 (gas: 6)\n 27058: i32 t1 = t1 + 0\n 27060: u64 [sp + 0x68] = t1\n 27063: i32 a0 = a4 + 0x20\n 27066: a1 = t0\n 27068: s1 = t0\n 27070: ra = 850, jump @31\n      : @975 [@dyn 425] (gas: 5)\n 27076: i32 a0 = a0 + 0\n 27078: i32 a1 = s1 + 0\n 27080: a2 = u64 [sp + 0x68]\n 27083: ecalli 1 // 'call_data_copy'\n 27085: fallthrough\n      : @976 (gas: 27)\n 27086: t0 = u64 [sp + 0x80]\n 27090: a0 = t0 + s1\n 27093: a1 = a0 <u t0\n 27096: a2 = u64 [sp + 0x88]\n 27100: a4 = u64 [sp + 0x78]\n 27103: a2 = a2 + a4\n 27106: a2 = a2 + a1\n 27109: a3 = a2 ^ a4\n 27112: a4 = a2 <u a4\n 27115: a4 = a1 if a3 == 0\n 27118: a1 = u64 [sp + 0x90]\n 27122: a3 = u64 [sp + 0xa0]\n 27126: a1 = a1 + a3\n 27129: a3 = a1 <u a3\n 27132: a5 = u64 [sp + 0x98]\n 27136: s1 = u64 [sp + 0xa8]\n 27140: a5 = a5 + s1\n 27143: a3 = a3 + a5\n 27146: a4 = a4 + a1\n 27149: a1 = a4 <u a1\n 27152: a1 = a1 + a3\n 27155: a1 = a1 | a4\n 27158: a3 = u64 [sp + 0x70]\n 27161: a3 = a0 <u a3\n 27164: a3 = 0 if a2 != 0\n 27166: a3 = 0 if a1 != 0\n 27168: jump @979 if a3 == 0\n      : @977 (gas: 8)\n 27171: s1 = t0\n 27173: i32 a0 = a0 + 0x20\n 27176: u64 [sp + 200] = 0\n 27180: u64 [sp + 192] = 0\n 27184: u64 [sp + 184] = 0\n 27188: a1 = sp + 0xb0\n 27192: u64 [sp + 176] = 0\n 27196: ra = 852, jump @19\n      : @978 [@dyn 426] (gas: 14)\n 27202: a0 = u64 [sp + 0x8]\n 27205: a1 = u64 [sp + 0xa8]\n 27209: u64 [a0 + 0x18] = a1\n 27212: a1 = u64 [sp + 0xa0]\n 27216: u64 [a0 + 0x10] = a1\n 27219: a1 = u64 [sp + 0x78]\n 27222: u64 [a0 + 0x8] = a1\n 27225: u64 [a0] = s1\n 27227: sp = s0 + 0xfffffffffffffe50\n 27231: ra = u64 [sp + 0x1a8]\n 27235: s0 = u64 [sp + 0x1a0]\n 27239: s1 = u64 [sp + 0x198]\n 27243: sp = sp + 0x1b0\n 27247: ret\n      : @979 (gas: 1)\n 27249: trap\n      : @980 (gas: 7)\n 27250: a1 = 0x20130\n 27255: i32 a1 = a1 + 0\n 27257: a0 = 0x1\n 27260: a2 = 0\n 27262: ra = 0x356\n 27266: ecalli 11 // 'seal_return'\n 27268: fallthrough\n      : @981 [@dyn 427] (gas: 30)\n 27269: sp = sp + 0xfffffffffffff840\n 27273: a3 = sp + 0x700\n 27277: u64 [a3 + 0xb8] = ra\n 27281: u64 [a3 + 0xb0] = s0\n 27285: u64 [a3 + 0xa8] = s1\n 27289: s0 = sp + 0x7c0\n 27293: sp = sp & 0xffffffffffffffe0\n 27296: s1 = sp\n 27298: u64 [s1 + 0x20] = a0\n 27301: a0 = u64 [a2 + 0x18]\n 27304: u64 [s1 + 0xb8] = a0\n 27308: a0 = u64 [a2 + 0x10]\n 27311: u64 [s1 + 0xc0] = a0\n 27315: a0 = u64 [a2 + 0x8]\n 27318: u64 [s1 + 0xc8] = a0\n 27322: a0 = u64 [a2]\n 27324: u64 [s1 + 0xd0] = a0\n 27328: a0 = u64 [a1 + 0x10]\n 27331: u64 [s1 + 0x130] = a0\n 27335: a0 = u64 [a1 + 0x8]\n 27338: u64 [s1 + 0x50] = a0\n 27341: a0 = u64 [a1]\n 27343: u64 [s1 + 0x48] = a0\n 27346: u64 [s1 + 1528] = 0\n 27350: u64 [s1 + 1520] = 0\n 27354: u64 [s1 + 1512] = 0\n 27358: u64 [s1 + 1504] = 0x4\n 27363: a0 = s1 + 0x5c0\n 27367: a1 = s1 + 0x5e0\n 27371: ra = 856, jump @21\n      : @982 [@dyn 428] (gas: 21)\n 27377: a1 = s1 + 0x500\n 27381: a0 = u64 [a1 + 0xc0]\n 27385: a4 = u64 [a1 + 0xd8]\n 27389: a2 = u64 [a1 + 0xc8]\n 27393: a3 = u64 [a1 + 0xd0]\n 27397: u64 [s1 + 0xa0] = a0\n 27401: a0 = a0 + 0x1\n 27404: a1 = a0 <u 0x1\n 27407: u64 [s1 + 0x98] = a2\n 27411: a1 = a1 + a2\n 27414: a2 = a0 | a1\n 27417: a2 = a2 <u 0x1\n 27420: a2 = a2 + a3\n 27423: u64 [s1 + 0x90] = a3\n 27427: a3 = a2 <u a3\n 27430: u64 [s1 + 0xa8] = a4\n 27434: a3 = a3 + a4\n 27437: a4 = a1 | a3\n 27440: a5 = a0 | a2\n 27443: a4 = a4 | a5\n 27446: jump @984 if a4 != 0\n      : @983 (gas: 1)\n 27449: jump @1084\n      : @984 (gas: 12)\n 27452: u64 [s1 + 1560] = 0\n 27456: u64 [s1 + 1552] = 0\n 27460: u64 [s1 + 1544] = 0\n 27464: a5 = s1 + 0x600\n 27468: u64 [a5 + 0] = 0x4\n 27471: u64 [a5 + 0x20] = a0\n 27474: u64 [a5 + 0x28] = a1\n 27477: u64 [a5 + 0x30] = a2\n 27480: u64 [a5 + 0x38] = a3\n 27483: a0 = s1 + 0x600\n 27487: a1 = s1 + 0x620\n 27491: ra = 858, jump @25\n      : @985 [@dyn 429] (gas: 11)\n 27497: a0 = u64 [s1 + 0xa8]\n 27501: u64 [s1 + 0x5b8] = a0\n 27505: a0 = u64 [s1 + 0x90]\n 27509: u64 [s1 + 0x5b0] = a0\n 27513: a0 = u64 [s1 + 0x98]\n 27517: u64 [s1 + 0x5a8] = a0\n 27521: a1 = s1 + 0x5a0\n 27525: a0 = u64 [s1 + 0xa0]\n 27529: u64 [s1 + 0x5a0] = a0\n 27533: a0 = 0\n 27535: ra = 860, jump @19\n      : @986 [@dyn 430] (gas: 7)\n 27541: u64 [s1 + 1432] = 0\n 27545: u64 [s1 + 1424] = 0\n 27549: u64 [s1 + 1408] = 0x8\n 27554: a0 = 0x20\n 27557: a1 = s1 + 0x580\n 27561: u64 [s1 + 1416] = 0\n 27565: ra = 862, jump @19\n      : @987 [@dyn 431] (gas: 7)\n 27571: a0 = sp + 0xffffffffffffffe0\n 27574: a0 = a0 & 0xffffffffffffffe0\n 27577: u64 [s1 + 0x138] = a0\n 27581: sp = a0\n 27583: a1 = 0x20124\n 27588: a0 = i32 [0x20124]\n 27593: jump @989 if a0 >u 63\n      : @988 (gas: 2)\n 27597: u32 [0x20124] = 0x40\n 27603: fallthrough\n      : @989 (gas: 13)\n 27604: a0 = sp + 0xffffffffffffffe0\n 27607: a2 = a0 & 0xffffffffffffffe0\n 27610: u64 [s1 + 0x128] = a2\n 27614: sp = a2\n 27616: a0 = 0x20130\n 27621: i32 a0 = a0 + 0\n 27623: u64 [s1 + 0x68] = a1\n 27626: i32 a2 = a2 + 0\n 27628: a1 = 0x40\n 27631: u64 [s1 + 0x70] = a0\n 27634: ra = 0x360\n 27638: ecalli 7 // 'hash_keccak_256'\n 27640: fallthrough\n      : @990 [@dyn 432] (gas: 6)\n 27641: a3 = u64 [s1 + 0x128]\n 27645: a0 = u64 [a3 + 0x18]\n 27648: a1 = u64 [a3 + 0x10]\n 27651: a2 = u64 [a3 + 0x8]\n 27654: a3 = u64 [a3]\n 27656: t0 = 866, jump @1226\n      : @991 [@dyn 433] (gas: 12)\n 27662: a4 = u64 [s1 + 0x138]\n 27666: u64 [a4 + 0x18] = a3\n 27669: u64 [a4 + 0x10] = a2\n 27672: u64 [a4 + 0x8] = a1\n 27675: u64 [a4] = a0\n 27677: a1 = a4\n 27679: a0 = u64 [s1 + 0x130]\n 27683: a0 = a0 << 0x20\n 27686: a0 = a0 >> 0x20\n 27689: u64 [s1 + 0x40] = a0\n 27692: a0 = s1 + 0x560\n 27696: ra = 868, jump @21\n      : @992 [@dyn 434] (gas: 15)\n 27702: a0 = u32 [s1 + 0x574]\n 27706: a0 = a0 << 0x20\n 27709: a1 = u64 [s1 + 0x578]\n 27713: a2 = u64 [s1 + 0x40]\n 27716: a0 = a0 | a2\n 27719: a2 = u64 [s1 + 0x50]\n 27722: a3 = s1 + 0x600\n 27726: u64 [a3 + 0x48] = a2\n 27729: a2 = u64 [s1 + 0x48]\n 27732: u64 [a3 + 0x40] = a2\n 27735: u64 [a3 + 0x58] = a1\n 27738: u64 [a3 + 0x50] = a0\n 27741: a1 = s1 + 0x640\n 27745: a0 = u64 [s1 + 0x138]\n 27749: ra = 870, jump @25\n      : @993 [@dyn 435] (gas: 11)\n 27755: a0 = u64 [s1 + 0xa8]\n 27759: u64 [s1 + 0x558] = a0\n 27763: a0 = u64 [s1 + 0x90]\n 27767: u64 [s1 + 0x550] = a0\n 27771: a0 = u64 [s1 + 0x98]\n 27775: u64 [s1 + 0x548] = a0\n 27779: a1 = s1 + 0x540\n 27783: a0 = u64 [s1 + 0xa0]\n 27787: u64 [s1 + 0x540] = a0\n 27791: a0 = 0\n 27793: ra = 872, jump @19\n      : @994 [@dyn 436] (gas: 7)\n 27799: u64 [s1 + 1336] = 0\n 27803: u64 [s1 + 1328] = 0\n 27807: u64 [s1 + 1312] = 0x5\n 27812: a0 = 0x20\n 27815: a1 = s1 + 0x520\n 27819: u64 [s1 + 1320] = 0\n 27823: ra = 874, jump @19\n      : @995 [@dyn 437] (gas: 7)\n 27829: a1 = u64 [s1 + 0x68]\n 27832: a0 = sp + 0xffffffffffffffe0\n 27835: a0 = a0 & 0xffffffffffffffe0\n 27838: u64 [s1 + 0x80] = a0\n 27842: sp = a0\n 27844: a0 = i32 [a1]\n 27846: jump @997 if a0 >u 63\n      : @996 (gas: 2)\n 27850: u32 [a1 + 0] = 0x40\n 27853: fallthrough\n      : @997 (gas: 9)\n 27854: a0 = sp + 0xffffffffffffffe0\n 27857: a0 = a0 & 0xffffffffffffffe0\n 27860: u64 [s1 + 0x138] = a0\n 27864: sp = a0\n 27866: i32 a2 = a0 + 0\n 27868: a1 = 0x40\n 27871: a0 = u64 [s1 + 0x70]\n 27874: ecalli 7 // 'hash_keccak_256'\n 27876: fallthrough\n      : @998 (gas: 31)\n 27877: a0 = u64 [s1 + 0x138]\n 27881: t0 = u64 [a0 + 0x10]\n 27884: t2 = u64 [a0 + 0x18]\n 27887: a5 = a0\n 27889: a1 = u64 [s1 + 0xd0]\n 27893: a4 = u64 [s1 + 0xc0]\n 27897: a2 = a1 | a4\n 27900: a3 = u64 [s1 + 0xc8]\n 27904: a0 = u64 [s1 + 0xb8]\n 27908: a3 = a3 | a0\n 27911: a2 = a2 | a3\n 27914: a2 = a2 >> 0x20\n 27917: a3 = a3 | a4\n 27920: a3 = a3 << 0x20\n 27923: t1 = a3 | a2\n 27926: a3 = u64 [a5 + 0x8]\n 27929: a0 = u64 [a5]\n 27931: a5 = reverse t2\n 27933: a2 = reverse t0\n 27935: a4 = reverse a3\n 27937: a3 = reverse a0\n 27939: a0 = u64 [s1 + 0x80]\n 27943: u64 [s1 + 0xe0] = a3\n 27947: u64 [a0 + 0x18] = a3\n 27950: u64 [s1 + 0x30] = a4\n 27953: u64 [a0 + 0x10] = a4\n 27956: u64 [s1 + 0x38] = a2\n 27959: u64 [a0 + 0x8] = a2\n 27962: u64 [s1 + 0xd8] = a5\n 27966: u64 [a0] = a5\n 27968: jump @1083 if t1 != 0\n      : @999 (gas: 2)\n 27972: a0 = s1 + 0x500\n 27976: ra = 876, jump @17\n      : @1000 [@dyn 438] (gas: 17)\n 27982: a0 = s1 + 0x500\n 27986: a3 = u64 [a0 + 0x18]\n 27989: a2 = u64 [a0 + 0x10]\n 27992: a1 = u64 [a0 + 0x8]\n 27995: a0 = a3 >u 0\n 27997: a4 = a2 >u 0\n 27999: a4 = a0 if a3 != 0\n 28002: u64 [s1 + 0x60] = a1\n 28005: a0 = a1 >u 0\n 28007: u64 [s1 + 0x78] = a2\n 28010: u64 [s1 + 0x58] = a3\n 28013: a2 = a2 | a3\n 28016: u64 [s1 + 0x28] = a0\n 28019: u64 [s1 + 0xb0] = a4\n 28023: u64 [s1 + 0xf0] = a2\n 28027: a0 = a4 if a2 != 0\n 28030: jump @1090 if a0 != 0\n      : @1001 (gas: 5)\n 28034: a0 = u64 [s1 + 0x500]\n 28038: u64 [s1 + 0x88] = a0\n 28042: a0 = s1 + 0x4e0\n 28046: a1 = u64 [s1 + 0x80]\n 28050: ra = 878, jump @21\n      : @1002 [@dyn 439] (gas: 11)\n 28056: a2 = u64 [s1 + 0x4e0]\n 28060: a0 = u64 [s1 + 0x4e8]\n 28064: a1 = u64 [s1 + 0x4f0]\n 28068: a3 = u64 [s1 + 0x4f8]\n 28072: u64 [s1 + 0x4b8] = a3\n 28076: u64 [s1 + 0x4b0] = a1\n 28080: u64 [s1 + 0x4a8] = a0\n 28084: a0 = s1 + 0x4c0\n 28088: a1 = s1 + 0x4a0\n 28092: u64 [s1 + 0x4a0] = a2\n 28096: ra = 880, jump @922\n      : @1003 [@dyn 440] (gas: 18)\n 28102: a0 = s1 + 0x400\n 28106: a3 = u64 [a0 + 0xd8]\n 28110: a4 = u64 [a0 + 0xd0]\n 28114: a5 = u64 [a0 + 0xc8]\n 28118: t0 = u64 [s1 + 0x4c0]\n 28122: a0 = a3 >u 0\n 28124: a1 = a4 >u 0\n 28126: a1 = a0 if a3 != 0\n 28129: a0 = a5 >u 0\n 28131: a2 = t0 <u 0x20\n 28134: a2 = a2 ^ 0x1\n 28137: a2 = a0 if a5 != 0\n 28140: a0 = a4 | a3\n 28143: a2 = a1 if a0 != 0\n 28146: a0 = u64 [s1 + 0x88]\n 28150: a0 = a0 <u 0x20\n 28153: u64 [s1 + 0xe8] = a0\n 28157: jump @1013 if a2 == 0\n      : @1004 (gas: 17)\n 28161: u64 [s1 + 0x110] = t0\n 28165: a0 = s1 + 0x100\n 28169: u64 [a0 + 0x18] = a5\n 28172: u64 [a0 + 0x30] = a4\n 28175: u64 [a0 + 0x20] = a3\n 28178: a0 = u64 [s1 + 0xd8]\n 28182: a2 = s1 + 0x400\n 28186: u64 [a2 + 0x80] = a0\n 28190: a0 = u64 [s1 + 0x38]\n 28193: u64 [a2 + 0x88] = a0\n 28197: a0 = u64 [s1 + 0x30]\n 28200: u64 [a2 + 0x90] = a0\n 28204: a1 = s1 + 0x480\n 28208: a0 = u64 [s1 + 0xe0]\n 28212: u64 [a2 + 0x98] = a0\n 28216: a0 = 0\n 28218: ra = 882, jump @19\n      : @1005 [@dyn 441] (gas: 3)\n 28224: a2 = u64 [s1 + 0x68]\n 28227: a0 = i32 [a2]\n 28229: jump @1007 if a0 >u 31\n      : @1006 (gas: 2)\n 28233: u32 [a2 + 0] = 0x20\n 28236: fallthrough\n      : @1007 (gas: 10)\n 28237: a0 = sp + 0xffffffffffffffe0\n 28240: a0 = a0 & 0xffffffffffffffe0\n 28243: u64 [s1 + 0x128] = a0\n 28247: sp = a0\n 28249: i32 a2 = a0 + 0\n 28251: a1 = 0x20\n 28254: a0 = u64 [s1 + 0x70]\n 28257: ra = 0x374\n 28261: ecalli 7 // 'hash_keccak_256'\n 28263: fallthrough\n      : @1008 [@dyn 442] (gas: 15)\n 28264: a0 = u64 [s1 + 0x88]\n 28268: a1 = a0 + 0x1f\n 28271: a0 = a1 <u a0\n 28274: a5 = u64 [s1 + 0x60]\n 28277: a2 = a5 + a0\n 28280: a3 = a2 <u a5\n 28283: a3 = a0 if a0 == 0\n 28286: a4 = u64 [s1 + 0x78]\n 28289: a3 = a3 + a4\n 28292: u64 [s1 + 0x108] = a3\n 28296: a3 = a3 << 0x3b\n 28299: a4 = a2 >> 0x5\n 28302: a4 = a4 | a3\n 28305: a0 = u64 [s1 + 0x128]\n 28309: t0 = 886, jump @1232\n      : @1009 [@dyn 443] (gas: 88)\n 28315: a1 = u64 [s1 + 0xe8]\n 28319: a1 = 0 if a5 != 0\n 28321: a3 = u64 [s1 + 0xf0]\n 28325: a1 = 0 if a3 != 0\n 28327: a4 = 0 if a1 != 0\n 28329: a0 = 0 if a1 != 0\n 28331: t0 = t2 + a0\n 28334: a0 = t0 <u t2\n 28337: a5 = a2 + a0\n 28340: a4 = a4 + a5\n 28343: u64 [s1 + 0x138] = a4\n 28347: a5 = a4 ^ a2\n 28350: a3 = a4 <u a2\n 28353: a3 = a0 if a5 == 0\n 28356: u64 [s1 + 0x100] = a3\n 28360: a0 = u64 [s1 + 0x110]\n 28364: ra = a0 + 0x1f\n 28367: a4 = ra <u a0\n 28370: a3 = u64 [s1 + 0x118]\n 28374: a0 = a3 + a4\n 28377: a5 = a0 <u a3\n 28380: a5 = a4 if a4 == 0\n 28383: t1 = u64 [s1 + 0x130]\n 28387: t1 = t1 + a5\n 28390: a4 = t1 << 0x3b\n 28393: a3 = a0 >> 0x5\n 28396: a3 = a3 | a4\n 28399: a0 = a0 << 0x3b\n 28402: a4 = ra >> 0x5\n 28405: a0 = a0 | a4\n 28408: a0 = a0 + t2\n 28411: u64 [s1 + 0x118] = a0\n 28415: a0 = a0 <u t2\n 28418: t2 = t0\n 28420: a4 = a2 + a0\n 28423: a4 = a4 + a3\n 28426: a3 = a4 ^ a2\n 28429: u64 [s1 + 0x110] = a4\n 28433: a2 = a4 <u a2\n 28436: a2 = a0 if a3 == 0\n 28439: a4 = u64 [s1 + 0x108]\n 28443: a0 = u64 [s1 + 0x78]\n 28446: a0 = a4 <u a0\n 28449: a3 = u64 [s1 + 0x58]\n 28452: a0 = a0 + a3\n 28455: a3 = a4 >> 0x5\n 28458: a4 = a0 << 0x3b\n 28461: a3 = a3 | a4\n 28464: a4 = u64 [s1 + 0x128]\n 28468: t0 = u64 [a4]\n 28470: a4 = u64 [a4 + 0x8]\n 28473: a0 = a0 >> 0x5\n 28476: a3 = 0 if a1 != 0\n 28478: a0 = 0 if a1 != 0\n 28480: a1 = reverse a4\n 28482: a4 = reverse t0\n 28484: a0 = a0 + a4\n 28487: a3 = a3 + a1\n 28490: a5 = a3 <u a1\n 28493: a0 = a0 + a5\n 28496: ra = u64 [s1 + 0x100]\n 28500: ra = ra + a3\n 28503: a3 = ra <u a3\n 28506: t0 = a0 + a3\n 28509: a0 = u64 [s1 + 0x130]\n 28513: a0 = t1 <u a0\n 28516: a3 = u64 [s1 + 0x120]\n 28520: a0 = a0 + a3\n 28523: a3 = t1 >> 0x5\n 28526: a5 = a0 << 0x3b\n 28529: a3 = a3 | a5\n 28532: a0 = a0 >> 0x5\n 28535: a0 = a0 + a4\n 28538: a5 = s1 + 0x100\n 28542: a4 = u64 [a5 + 0x38]\n 28545: a3 = a3 + a1\n 28548: a1 = a3 <u a1\n 28551: a0 = a0 + a1\n 28554: a2 = a2 + a3\n 28557: u64 [a5 + 0x8] = a2\n 28560: a1 = a2 <u a3\n 28563: a0 = a0 + a1\n 28566: u64 [a5] = a0\n 28568: a0 = sp + 0xffffffffffffffe0\n 28571: t1 = a0 & 0xffffffffffffffe0\n 28574: sp = t1\n 28576: u64 [s1 + 0xf8] = t1\n 28580: fallthrough\n      : @1010 (gas: 20)\n 28581: a0 = u64 [s1 + 0x118]\n 28585: a0 = t2 <u a0\n 28588: a2 = u64 [s1 + 0x110]\n 28592: a1 = a4 ^ a2\n 28595: a2 = a4 <u a2\n 28598: a2 = a0 if a1 == 0\n 28601: a5 = u64 [s1 + 0x108]\n 28605: a0 = ra <u a5\n 28608: a3 = u64 [s1 + 0x100]\n 28612: a1 = t0 ^ a3\n 28615: a3 = t0 <u a3\n 28618: a3 = a0 if a1 == 0\n 28621: a0 = ra ^ a5\n 28624: a0 = a0 | a1\n 28627: a3 = a2 if a0 == 0\n 28630: u64 [t1] = t2\n 28632: u64 [t1 + 0x8] = a4\n 28635: u64 [t1 + 0x10] = ra\n 28638: u64 [t1 + 0x18] = t0\n 28641: jump @1013 if a3 == 0\n      : @1011 (gas: 11)\n 28644: u64 [s1 + 1656] = 0\n 28648: u64 [s1 + 1648] = 0\n 28652: u64 [s1 + 1640] = 0\n 28656: u64 [s1 + 1632] = 0\n 28660: a1 = s1 + 0x660\n 28664: a0 = t1\n 28666: u64 [s1 + 0x130] = t2\n 28670: u64 [s1 + 0x138] = a4\n 28674: u64 [s1 + 0x128] = t0\n 28678: u64 [s1 + 0x120] = ra\n 28682: ra = 888, jump @25\n      : @1012 [@dyn 444] (gas: 15)\n 28688: t1 = u64 [s1 + 0xf8]\n 28692: t0 = u64 [s1 + 0x128]\n 28696: a4 = u64 [s1 + 0x138]\n 28700: t2 = u64 [s1 + 0x130]\n 28704: t2 = t2 + 0x1\n 28707: a0 = t2 <u 0x1\n 28710: a4 = a4 + a0\n 28713: a0 = t2 | a4\n 28716: a0 = a0 <u 0x1\n 28719: a1 = u64 [s1 + 0x120]\n 28723: a0 = a0 + a1\n 28726: a1 = a0 <u a1\n 28729: t0 = t0 + a1\n 28732: ra = a0\n 28734: jump @1010\n      : @1013 (gas: 11)\n 28737: a0 = u64 [s1 + 0xe8]\n 28741: a0 = a0 ^ 0x1\n 28744: a1 = u64 [s1 + 0x60]\n 28747: a2 = u64 [s1 + 0x28]\n 28750: a0 = a2 if a1 != 0\n 28753: a2 = u64 [s1 + 0xb0]\n 28757: a3 = u64 [s1 + 0xf0]\n 28761: a0 = a2 if a3 != 0\n 28764: a2 = u64 [s1 + 0x58]\n 28767: a1 = a1 | a2\n 28770: jump @1023 if a0 == 0\n      : @1014 (gas: 16)\n 28774: u64 [s1 + 0x28] = a1\n 28777: a0 = u64 [s1 + 0x88]\n 28781: a0 = a0 & 0xffffffffffffffe0\n 28784: u64 [s1 + 0xb0] = a0\n 28788: a0 = u64 [s1 + 0xd8]\n 28792: a2 = s1 + 0x400\n 28796: u64 [a2 + 0x40] = a0\n 28799: a0 = u64 [s1 + 0x38]\n 28802: u64 [a2 + 0x48] = a0\n 28805: a0 = u64 [s1 + 0x30]\n 28808: u64 [a2 + 0x50] = a0\n 28811: a1 = s1 + 0x440\n 28815: a0 = u64 [s1 + 0xe0]\n 28819: u64 [a2 + 0x58] = a0\n 28822: a0 = 0\n 28824: ra = 890, jump @19\n      : @1015 [@dyn 445] (gas: 7)\n 28830: a0 = sp + 0xffffffffffffffe0\n 28833: a0 = a0 & 0xffffffffffffffe0\n 28836: u64 [s1 + 0x118] = a0\n 28840: sp = a0\n 28842: a1 = 0x20\n 28845: a0 = 0\n 28847: ra = 892, jump @31\n      : @1016 [@dyn 446] (gas: 35)\n 28853: a1 = sp + 0xffffffffffffffe0\n 28856: a1 = a1 & 0xffffffffffffffe0\n 28859: u64 [s1 + 0x110] = a1\n 28863: sp = a1\n 28865: i32 a0 = a0 + 0\n 28867: i32 a2 = a1 + 0\n 28869: a1 = 0x20\n 28872: ecalli 7 // 'hash_keccak_256'\n 28874: u64 [s1 + 304] = 0x20\n 28879: u64 [s1 + 312] = 0\n 28883: u64 [s1 + 296] = 0\n 28887: a4 = 0\n 28889: t0 = 0\n 28891: t1 = 0\n 28893: u64 [s1 + 288] = 0\n 28897: a3 = u64 [s1 + 0x110]\n 28901: a0 = u64 [a3 + 0x18]\n 28904: a1 = u64 [a3 + 0x10]\n 28907: a2 = u64 [a3 + 0x8]\n 28910: a5 = u64 [a3]\n 28912: t2 = reverse a0\n 28914: a1 = reverse a1\n 28916: a3 = reverse a2\n 28918: a2 = reverse a5\n 28920: a5 = 0\n 28922: ra = a2\n 28924: a0 = u64 [s1 + 0x118]\n 28928: u64 [a0 + 0x18] = a2\n 28931: u64 [s1 + 0xf0] = a3\n 28935: u64 [a0 + 0x10] = a3\n 28938: u64 [s1 + 0x110] = a1\n 28942: u64 [a0 + 0x8] = a1\n 28945: a3 = t2\n 28947: u64 [a0] = t2\n 28949: fallthrough\n      : @1017 (gas: 25)\n 28950: u64 [s1 + 0x108] = ra\n 28954: t2 = a3\n 28956: a0 = u64 [s1 + 0xb0]\n 28960: u64 [s1 + 0x100] = a4\n 28964: a0 = a4 <u a0\n 28967: a4 = a0 ^ 0x1\n 28970: u64 [s1 + 0xf8] = t0\n 28974: a4 = 0x1 if t0 != 0\n 28977: a0 = u64 [s1 + 0x120]\n 28981: a0 = t1 | a0\n 28984: a4 = 0x1 if a0 != 0\n 28987: a1 = u64 [s1 + 0xd0]\n 28991: a0 = u64 [s1 + 0x130]\n 28995: a1 = a1 + a0\n 28998: a3 = u64 [s1 + 0xc8]\n 29002: a3 = a3 + a5\n 29005: a2 = u64 [s1 + 0xc0]\n 29009: a0 = u64 [s1 + 0x138]\n 29013: a2 = a2 + a0\n 29016: a0 = u64 [s1 + 0xb8]\n 29020: t0 = a5\n 29022: a5 = u64 [s1 + 0x128]\n 29026: a0 = a0 + a5\n 29029: a5 = t0\n 29031: jump @1027 if a4 != 0\n      : @1018 (gas: 15)\n 29035: u64 [s1 + 0xe0] = t1\n 29039: a4 = u64 [s1 + 0x130]\n 29043: a4 = a1 <u a4\n 29046: a3 = a3 + a4\n 29049: t0 = a3 ^ a5\n 29052: u64 [s1 + 0xd8] = a5\n 29056: a5 = a3 <u a5\n 29059: a5 = a4 if t0 == 0\n 29062: a5 = a5 + a2\n 29065: t0 = a5 <u a2\n 29068: a4 = u64 [s1 + 0x138]\n 29072: a2 = a2 <u a4\n 29075: a0 = a0 + a2\n 29078: a0 = a0 + t0\n 29081: t0 = 894, jump @1227\n      : @1019 [@dyn 447] (gas: 2)\n 29087: u64 [s1 + 0xe8] = t2\n 29091: jump @1083 if a0 != 0\n      : @1020 (gas: 2)\n 29095: a0 = s1 + 0x1c0\n 29099: ra = 896, jump @17\n      : @1021 [@dyn 448] (gas: 12)\n 29105: a0 = u64 [s1 + 0x1d8]\n 29109: a1 = u64 [s1 + 0x1d0]\n 29113: a2 = u64 [s1 + 0x1c8]\n 29117: a3 = u64 [s1 + 0x1c0]\n 29121: a4 = s1 + 0x600\n 29125: u64 [a4 + 0x98] = a0\n 29129: u64 [a4 + 0x90] = a1\n 29133: u64 [a4 + 0x88] = a2\n 29137: u64 [a4 + 0x80] = a3\n 29141: a1 = s1 + 0x680\n 29145: a0 = u64 [s1 + 0x118]\n 29149: ra = 898, jump @25\n      : @1022 [@dyn 449] (gas: 56)\n 29155: ra = u64 [s1 + 0xe8]\n 29159: ra = ra + 0x1\n 29162: a0 = ra <u 0x1\n 29165: t0 = u64 [s1 + 0x110]\n 29169: t0 = t0 + a0\n 29172: a0 = ra | t0\n 29175: a0 = a0 <u 0x1\n 29178: a1 = u64 [s1 + 0xf0]\n 29182: t1 = a1 + a0\n 29185: a1 = t1 <u a1\n 29188: a0 = u64 [s1 + 0x108]\n 29192: a0 = a0 + a1\n 29195: a1 = u64 [s1 + 0x130]\n 29199: a2 = a1 + 0x20\n 29202: u64 [s1 + 0x108] = a2\n 29206: a3 = a2 <u a1\n 29209: a1 = u64 [s1 + 0xd8]\n 29213: a2 = a1 + a3\n 29216: u64 [s1 + 0xe8] = a2\n 29220: a4 = a2 <u a1\n 29223: a4 = a3 if a3 == 0\n 29226: a1 = u64 [s1 + 0x138]\n 29230: t2 = a1 + a4\n 29233: a4 = t2 <u a1\n 29236: a1 = u64 [s1 + 0x128]\n 29240: a1 = a1 + a4\n 29243: u64 [s1 + 0x128] = a1\n 29247: a1 = u64 [s1 + 0x100]\n 29251: a4 = a1 + 0x20\n 29254: a5 = a4 <u a1\n 29257: a2 = u64 [s1 + 0xf8]\n 29261: a1 = a2 + a5\n 29264: a2 = a1 <u a2\n 29267: a2 = a5 if a5 == 0\n 29270: a3 = u64 [s1 + 0xe0]\n 29274: a2 = a2 + a3\n 29277: a5 = a2 <u a3\n 29280: a3 = u64 [s1 + 0x120]\n 29284: a3 = a3 + a5\n 29287: u64 [s1 + 0x120] = a3\n 29291: u64 [s1 + 0x110] = t0\n 29295: a5 = u64 [s1 + 0x118]\n 29299: u64 [a5 + 0x8] = t0\n 29302: a3 = ra\n 29304: u64 [a5] = ra\n 29306: u64 [a5 + 0x10] = t1\n 29309: ra = a0\n 29311: u64 [a5 + 0x18] = a0\n 29314: u64 [s1 + 0xf0] = t1\n 29318: a0 = u64 [s1 + 0x108]\n 29322: u64 [s1 + 0x130] = a0\n 29326: a5 = u64 [s1 + 0xe8]\n 29330: u64 [s1 + 0x138] = t2\n 29334: t0 = a1\n 29336: t1 = a2\n 29338: jump @1017\n      : @1023 (gas: 6)\n 29341: a3 = u64 [s1 + 0x88]\n 29345: a0 = u64 [s1 + 0x78]\n 29348: a0 = a0 | a3\n 29351: a0 = a0 | a1\n 29354: a2 = u64 [s1 + 0xd0]\n 29358: jump @1038 if a0 == 0\n      : @1024 (gas: 9)\n 29362: a0 = u64 [s1 + 0xc0]\n 29366: a1 = u64 [s1 + 0xb8]\n 29370: a0 = a0 | a1\n 29373: a1 = 0xffffffe0\n 29383: a1 = a2 <u a1\n 29386: a3 = u64 [s1 + 0xc8]\n 29390: a1 = 0 if a3 != 0\n 29392: a1 = 0 if a0 != 0\n 29394: jump @1083 if a1 == 0\n      : @1025 (gas: 3)\n 29398: i32 a1 = a2 + 0x20\n 29401: a0 = s1 + 0x460\n 29405: ra = 900, jump @17\n      : @1026 [@dyn 450] (gas: 12)\n 29411: a1 = s1 + 0x400\n 29415: a0 = u64 [a1 + 0x78]\n 29418: a2 = s1 + 0x100\n 29422: u64 [a2 + 0x30] = a0\n 29425: a0 = u64 [a1 + 0x70]\n 29428: u64 [a2 + 0x28] = a0\n 29431: a0 = u64 [a1 + 0x68]\n 29434: u64 [a2 + 0x18] = a0\n 29437: a0 = u64 [a1 + 0x60]\n 29440: u64 [a2 + 0x20] = a0\n 29443: a3 = u64 [s1 + 0x88]\n 29447: jump @1039\n      : @1027 (gas: 9)\n 29450: t2 = a5\n 29452: t1 = u64 [s1 + 0x88]\n 29456: a4 = u64 [s1 + 0xb0]\n 29460: a4 = a4 ^ t1\n 29463: a5 = u64 [s1 + 0x78]\n 29466: a4 = a4 | a5\n 29469: a5 = u64 [s1 + 0x28]\n 29472: a4 = a4 | a5\n 29475: jump @1037 if a4 == 0\n      : @1028 (gas: 13)\n 29479: a4 = u64 [s1 + 0x130]\n 29483: a4 = a1 <u a4\n 29486: a3 = a3 + a4\n 29489: t0 = a3 ^ t2\n 29492: a5 = a3 <u t2\n 29495: a5 = a4 if t0 == 0\n 29498: a5 = a5 + a2\n 29501: t0 = a5 <u a2\n 29504: a4 = u64 [s1 + 0x138]\n 29508: a2 = a2 <u a4\n 29511: a0 = a0 + a2\n 29514: a0 = a0 + t0\n 29517: t0 = 902, jump @1227\n      : @1029 [@dyn 451] (gas: 1)\n 29523: jump @1083 if a0 != 0\n      : @1030 (gas: 2)\n 29527: a0 = s1 + 0x420\n 29531: ra = 904, jump @17\n      : @1031 [@dyn 452] (gas: 2)\n 29537: a1 = s1 + 0x400\n 29541: t0 = 906, jump @1236\n      : @1032 [@dyn 453] (gas: 9)\n 29547: u64 [s1 + 0x110] = a0\n 29551: a0 = u64 [s1 + 0x88]\n 29555: a0 = a0 << 0x3b\n 29558: a1 = a0 >> 0x38\n 29561: u64 [s1 + 0x138] = a1\n 29565: a2 = 0x80 - a1\n 29569: a0 = 0xffffffffffffffff\n 29572: a1 = 0xffffffffffffffff\n 29575: ra = 908, jump @1246\n      : @1033 [@dyn 454] (gas: 6)\n 29581: u64 [s1 + 0x108] = a0\n 29585: u64 [s1 + 0xf0] = a1\n 29589: a0 = 0xffffffffffffffff\n 29592: a1 = 0xffffffffffffffff\n 29595: a2 = u64 [s1 + 0x138]\n 29599: ra = 910, jump @1241\n      : @1034 [@dyn 455] (gas: 10)\n 29605: u64 [s1 + 0xf8] = a0\n 29609: u64 [s1 + 0x100] = a1\n 29613: a0 = u64 [s1 + 0xf0]\n 29617: a0 = a0 | a1\n 29620: u64 [s1 + 0xf0] = a0\n 29624: a0 = u64 [s1 + 0x138]\n 29628: a2 = a0 + 0xffffffffffffff80\n 29631: a0 = 0xffffffffffffffff\n 29634: a1 = 0xffffffffffffffff\n 29637: ra = 912, jump @1241\n      : @1035 [@dyn 456] (gas: 29)\n 29643: a4 = u64 [s1 + 0x138]\n 29647: a2 = a4 <u 0x80\n 29651: a3 = u64 [s1 + 0xf0]\n 29655: a1 = a3 if a2 != 0\n 29658: a5 = u64 [s1 + 0xf8]\n 29662: a3 = u64 [s1 + 0x108]\n 29666: a3 = a3 | a5\n 29669: a3 = a0 if a2 == 0\n 29672: a1 = 0xffffffffffffffff if a4 == 0\n 29675: a3 = 0xffffffffffffffff if a4 == 0\n 29678: a4 = u64 [s1 + 0x100]\n 29682: a4 = 0 if a2 == 0\n 29684: a5 = 0 if a2 == 0\n 29686: a0 = u64 [s1 + 0x110]\n 29690: a0 = a0 & ~a3\n 29693: a2 = u64 [s1 + 0x120]\n 29697: a1 = a2 & ~a1\n 29700: a2 = u64 [s1 + 0x128]\n 29704: a2 = a2 & ~a5\n 29707: a3 = u64 [s1 + 0x130]\n 29711: a3 = a3 & ~a4\n 29714: a4 = s1 + 0x600\n 29718: u64 [a4 + 0xb8] = a3\n 29722: u64 [a4 + 0xb0] = a2\n 29726: u64 [a4 + 0xa8] = a1\n 29730: u64 [a4 + 0xa0] = a0\n 29734: a1 = s1 + 0x6a0\n 29738: a0 = u64 [s1 + 0x118]\n 29742: ra = 914, jump @25\n      : @1036 [@dyn 457] (gas: 2)\n 29748: t1 = u64 [s1 + 0x88]\n 29752: fallthrough\n      : @1037 (gas: 23)\n 29753: a2 = u64 [s1 + 0x78]\n 29756: a0 = a2 >> 0x3f\n 29759: a1 = u64 [s1 + 0x58]\n 29762: a1 = a1 << 0x1\n 29765: a0 = a0 | a1\n 29768: a3 = u64 [s1 + 0x60]\n 29771: a1 = a3 >> 0x3f\n 29774: a2 = a2 << 0x1\n 29777: a1 = a1 | a2\n 29780: a2 = t1 >> 0x3f\n 29783: a3 = a3 << 0x1\n 29786: a2 = a2 | a3\n 29789: a3 = t1 << 0x1\n 29792: a3 = a3 + 0x1\n 29795: a4 = s1 + 0x600\n 29799: u64 [a4 + 0xc0] = a3\n 29803: u64 [a4 + 0xc8] = a2\n 29807: u64 [a4 + 0xd0] = a1\n 29811: u64 [a4 + 0xd8] = a0\n 29815: a1 = s1 + 0x6c0\n 29819: a0 = u64 [s1 + 0x80]\n 29823: ra = 0x39c\n 29827: jump @25\n      : @1038 (gas: 5)\n 29830: u64 [s1 + 288] = 0\n 29834: u64 [s1 + 280] = 0\n 29838: u64 [s1 + 296] = 0\n 29842: u64 [s1 + 304] = 0\n 29846: fallthrough\n      : @1039 (gas: 23)\n 29847: a2 = u64 [s1 + 0x60]\n 29850: a0 = a2 >> 0x3f\n 29853: a4 = u64 [s1 + 0x78]\n 29856: a1 = a4 << 0x1\n 29859: a0 = a0 | a1\n 29862: u64 [s1 + 0x110] = a0\n 29866: a0 = a4 >> 0x3f\n 29869: a1 = u64 [s1 + 0x58]\n 29872: a1 = a1 << 0x1\n 29875: a0 = a0 | a1\n 29878: u64 [s1 + 0x108] = a0\n 29882: a0 = a3 >> 0x3f\n 29885: a1 = a2 << 0x1\n 29888: a0 = a0 | a1\n 29891: u64 [s1 + 0x100] = a0\n 29895: a0 = a3 << 0x1\n 29898: u64 [s1 + 0xf8] = a0\n 29902: a1 = a3 << 0x3\n 29905: u64 [s1 + 0x138] = a1\n 29909: i32 a2 = 0x80 - a1\n 29913: a0 = 0xffffffffffffffff\n 29916: a1 = 0xffffffffffffffff\n 29919: ra = 916, jump @1246\n      : @1040 [@dyn 458] (gas: 7)\n 29925: u64 [s1 + 0xd8] = a0\n 29929: u64 [s1 + 0xf0] = a1\n 29933: a0 = u64 [s1 + 0x88]\n 29937: i32 a2 = a0 << 0x3\n 29940: a0 = 0xffffffffffffffff\n 29943: a1 = 0xffffffffffffffff\n 29946: ra = 918, jump @1241\n      : @1041 [@dyn 459] (gas: 10)\n 29952: u64 [s1 + 0xe8] = a0\n 29956: u64 [s1 + 0xe0] = a1\n 29960: a1 = u64 [s1 + 0xd8]\n 29964: a0 = a0 | a1\n 29967: u64 [s1 + 0xd8] = a0\n 29971: a0 = u64 [s1 + 0x138]\n 29975: i32 a2 = a0 + 0xffffffffffffff80\n 29978: a0 = 0xffffffffffffffff\n 29981: a1 = 0xffffffffffffffff\n 29984: ra = 920, jump @1241\n      : @1042 [@dyn 460] (gas: 7)\n 29990: a4 = u64 [s1 + 0x138]\n 29994: a2 = a4 <u 0x80\n 29998: a3 = u64 [s1 + 0xd8]\n 30002: a0 = a3 if a2 != 0\n 30005: a5 = u64 [s1 + 0xe0]\n 30009: a3 = u64 [s1 + 0xf0]\n 30013: t0 = 922, jump @1220\n      : @1043 [@dyn 461] (gas: 27)\n 30019: a4 = u64 [s1 + 0xe8]\n 30023: a4 = 0 if a2 == 0\n 30025: a1 = u64 [s1 + 0x118]\n 30029: a1 = a1 & ~a3\n 30032: a2 = u64 [s1 + 0x120]\n 30036: a0 = a2 & ~a0\n 30039: a2 = u64 [s1 + 0x128]\n 30043: a2 = a2 & ~a4\n 30046: a3 = u64 [s1 + 0x130]\n 30050: a3 = a3 & ~a5\n 30053: a4 = u64 [s1 + 0xf8]\n 30057: a0 = a0 | a4\n 30060: a5 = s1 + 0x100\n 30064: a4 = u64 [a5]\n 30066: a1 = a1 | a4\n 30069: a4 = u64 [a5 + 0x8]\n 30072: a3 = a3 | a4\n 30075: a4 = u64 [a5 + 0x10]\n 30078: a2 = a2 | a4\n 30081: a4 = s1 + 0x600\n 30085: u64 [a4 + 0xf0] = a2\n 30089: u64 [a4 + 0xf8] = a3\n 30093: u64 [a4 + 0xe8] = a1\n 30097: u64 [a4 + 0xe0] = a0\n 30101: a1 = s1 + 0x6e0\n 30105: a0 = u64 [s1 + 0x80]\n 30109: ra = 924, jump @25\n      : @1044 [@dyn 462] (gas: 12)\n 30115: a0 = u64 [s1 + 0x90]\n 30119: a2 = s1 + 0x400\n 30123: u64 [a2 + 0x10] = a0\n 30126: a0 = u64 [s1 + 0x98]\n 30130: u64 [a2 + 0x8] = a0\n 30133: a0 = u64 [s1 + 0xa0]\n 30137: u64 [a2] = a0\n 30139: a1 = s1 + 0x400\n 30143: a0 = u64 [s1 + 0xa8]\n 30147: u64 [a2 + 0x18] = a0\n 30150: a0 = 0\n 30152: ra = 926, jump @19\n      : @1045 [@dyn 463] (gas: 7)\n 30158: u64 [s1 + 1016] = 0\n 30162: u64 [s1 + 1008] = 0\n 30166: u64 [s1 + 992] = 0x7\n 30171: a0 = 0x20\n 30174: a1 = s1 + 0x3e0\n 30178: u64 [s1 + 1000] = 0\n 30182: ra = 928, jump @19\n      : @1046 [@dyn 464] (gas: 7)\n 30188: a0 = sp + 0xffffffffffffffe0\n 30191: a0 = a0 & 0xffffffffffffffe0\n 30194: u64 [s1 + 0x138] = a0\n 30198: sp = a0\n 30200: a2 = u64 [s1 + 0x68]\n 30203: a0 = i32 [a2]\n 30205: jump @1048 if a0 >u 63\n      : @1047 (gas: 2)\n 30209: u32 [a2 + 0] = 0x40\n 30212: fallthrough\n      : @1048 (gas: 24)\n 30213: a0 = sp + 0xffffffffffffffe0\n 30216: a0 = a0 & 0xffffffffffffffe0\n 30219: u64 [s1 + 0x130] = a0\n 30223: sp = a0\n 30225: i32 a2 = a0 + 0\n 30227: a1 = 0x40\n 30230: a0 = u64 [s1 + 0x70]\n 30233: ecalli 7 // 'hash_keccak_256'\n 30235: a3 = u64 [s1 + 0x130]\n 30239: a0 = u64 [a3 + 0x18]\n 30242: a1 = u64 [a3 + 0x10]\n 30245: a2 = u64 [a3 + 0x8]\n 30248: a3 = u64 [a3]\n 30250: a0 = reverse a0\n 30252: a4 = reverse a1\n 30254: a2 = reverse a2\n 30256: a3 = reverse a3\n 30258: a1 = u64 [s1 + 0x138]\n 30262: u64 [a1 + 0x18] = a3\n 30265: u64 [a1 + 0x10] = a2\n 30268: u64 [a1 + 0x8] = a4\n 30271: u64 [a1] = a0\n 30273: a0 = s1 + 0x3c0\n 30277: ra = 930, jump @21\n      : @1049 [@dyn 465] (gas: 13)\n 30283: a0 = u64 [s1 + 0x3c0]\n 30287: a1 = u64 [s1 + 0x3d8]\n 30291: a2 = u64 [s1 + 0x3d0]\n 30295: a3 = u64 [s1 + 0x3c8]\n 30299: a0 = a0 & 0xffffffffffffff00\n 30303: a4 = s1 + 0x700\n 30307: u64 [a4 + 0x18] = a1\n 30310: u64 [a4 + 0x10] = a2\n 30313: u64 [a4 + 0x8] = a3\n 30316: u64 [a4] = a0\n 30318: a1 = s1 + 0x700\n 30322: a0 = u64 [s1 + 0x138]\n 30326: ra = 932, jump @25\n      : @1050 [@dyn 466] (gas: 3)\n 30332: a0 = s1 + 0x3a0\n 30336: a1 = 0x40\n 30339: ra = 934, jump @17\n      : @1051 [@dyn 467] (gas: 40)\n 30345: a0 = u64 [s1 + 0x3b8]\n 30349: u64 [s1 + 0x130] = a0\n 30353: a0 = u64 [s1 + 0x3b0]\n 30357: u64 [s1 + 0x120] = a0\n 30361: a0 = u64 [s1 + 0x3a8]\n 30365: u64 [s1 + 0x118] = a0\n 30369: a0 = u64 [s1 + 0x3a0]\n 30373: u64 [s1 + 0x138] = a0\n 30377: a0 = 0x30130\n 30382: u64 [s1 + 0x128] = a0\n 30386: i32 a0 = a0 + 0\n 30388: ecalli 4 // 'caller'\n 30390: a1 = u64 [s1 + 0x128]\n 30394: a0 = i32 [a1 + 0x10]\n 30397: u64 [s1 + 0x110] = a0\n 30401: a0 = u64 [a1]\n 30403: u64 [s1 + 0x108] = a0\n 30407: a0 = u64 [a1 + 0x8]\n 30410: u64 [s1 + 0x100] = a0\n 30414: a0 = u64 [s1 + 0xb8]\n 30418: a4 = s1 + 0x300\n 30422: u64 [a4 + 0x58] = a0\n 30425: a0 = u64 [s1 + 0xc0]\n 30429: u64 [a4 + 0x50] = a0\n 30432: a0 = u64 [s1 + 0xc8]\n 30436: u64 [a4 + 0x48] = a0\n 30439: a0 = u64 [s1 + 0xd0]\n 30443: u64 [a4 + 0x40] = a0\n 30446: a0 = u64 [s1 + 0x130]\n 30450: u64 [a4 + 0x78] = a0\n 30453: a0 = u64 [s1 + 0x120]\n 30457: u64 [a4 + 0x70] = a0\n 30460: a0 = u64 [s1 + 0x118]\n 30464: u64 [a4 + 0x68] = a0\n 30467: a0 = s1 + 0x380\n 30471: a1 = s1 + 0x360\n 30475: a2 = s1 + 0x340\n 30479: a3 = u64 [s1 + 0x138]\n 30483: u64 [a4 + 0x60] = a3\n 30486: ra = 936, jump @941\n      : @1052 [@dyn 468] (gas: 13)\n 30492: a4 = s1 + 0x100\n 30496: a2 = u64 [a4 + 0x18]\n 30499: a0 = u64 [a4 + 0x30]\n 30502: a0 = a0 | a2\n 30505: a3 = u64 [a4 + 0x20]\n 30508: a1 = u64 [a4 + 0x38]\n 30511: a1 = a1 | a3\n 30514: a1 = a1 | a0\n 30517: a1 = a1 >> 0x20\n 30520: a0 = a0 | a3\n 30523: a0 = a0 << 0x20\n 30526: a0 = a0 | a1\n 30529: jump @1083 if a0 != 0\n      : @1053 (gas: 38)\n 30533: t2 = a3\n 30535: a4 = s1 + 0x300\n 30539: a0 = u64 [a4 + 0x88]\n 30543: a1 = u64 [a4 + 0x98]\n 30547: u64 [s1 + 0xf8] = a1\n 30551: t1 = u64 [s1 + 0x380]\n 30555: a3 = u64 [a4 + 0x90]\n 30559: a4 = a0 ^ a2\n 30562: a5 = a0 <u a2\n 30565: t0 = u64 [s1 + 0x138]\n 30569: a1 = t1 <u t0\n 30572: a5 = a1 if a4 == 0\n 30575: a4 = a3 - t2\n 30578: ra = a4 - a5\n 30581: a4 = a4 <u a5\n 30584: u64 [s1 + 0xf0] = a4\n 30588: a3 = a3 <u t2\n 30591: a5 = u64 [s1 + 0x130]\n 30595: a4 = u64 [s1 + 0xf8]\n 30599: a5 = a4 - a5\n 30602: a5 = a5 - a3\n 30605: a3 = u64 [s1 + 0xf0]\n 30609: a5 = a5 - a3\n 30612: a0 = a0 - a2\n 30615: a0 = a0 - a1\n 30618: a1 = t1 - t0\n 30621: a0 = a0 | a5\n 30624: a3 = a1 | ra\n 30627: a3 = a3 | a0\n 30630: a0 = a0 | ra\n 30633: a3 = a3 >> 0x20\n 30636: a0 = a0 << 0x20\n 30639: a0 = a0 | a3\n 30642: t0 = u64 [s1 + 0xa8]\n 30646: a5 = u64 [s1 + 0xa0]\n 30650: t1 = u64 [s1 + 0x98]\n 30654: t2 = u64 [s1 + 0x90]\n 30658: jump @1083 if a0 != 0\n      : @1054 (gas: 35)\n 30662: a0 = u64 [s1 + 0x100]\n 30666: a0 = reverse a0\n 30668: a2 = a0 >> 0x20\n 30671: a3 = u64 [s1 + 0x108]\n 30675: a3 = reverse a3\n 30677: a4 = a3 << 0x20\n 30680: a2 = a2 | a4\n 30683: a0 = a0 << 0x20\n 30686: a4 = u64 [s1 + 0x110]\n 30690: a4 = reverse a4\n 30692: a4 = a4 >> 0x20\n 30695: a4 = a4 | a0\n 30698: a0 = a3 >> 0x20\n 30701: u64 [s1 + 760] = 0\n 30705: u64 [s1 + 0x2e0] = a4\n 30709: u64 [s1 + 0x300] = a5\n 30713: u64 [s1 + 0x2e8] = a2\n 30717: u64 [s1 + 0x308] = t1\n 30721: a2 = u64 [0x200d8]\n 30726: a3 = u64 [0x200e0]\n 30731: a4 = u64 [0x200e8]\n 30736: a5 = u64 [0x200f0]\n 30741: u64 [s1 + 0x338] = a2\n 30745: a2 = s1 + 0x300\n 30749: u64 [a2 + 0x30] = a3\n 30752: u64 [a2 + 0x28] = a4\n 30755: u64 [a2 + 0x20] = a5\n 30758: u64 [s1 + 0x2f0] = a0\n 30762: u64 [s1 + 0x310] = t2\n 30766: a2 = s1 + 0x320\n 30770: a3 = s1 + 0x300\n 30774: a4 = s1 + 0x2e0\n 30778: u64 [s1 + 0x318] = t0\n 30782: a0 = u64 [s1 + 0x138]\n 30786: ra = 938, jump @28\n      : @1055 [@dyn 469] (gas: 7)\n 30792: u64 [s1 + 1848] = 0\n 30796: u64 [s1 + 1840] = 0\n 30800: u64 [s1 + 1832] = 0\n 30804: u64 [s1 + 1824] = 0x3\n 30809: a0 = s1 + 0x2c0\n 30813: a1 = s1 + 0x720\n 30817: ra = 940, jump @21\n      : @1056 [@dyn 470] (gas: 9)\n 30823: a0 = u64 [s1 + 0x2d0]\n 30827: u64 [s1 + 0x108] = a0\n 30831: a0 = u64 [s1 + 0x2c8]\n 30835: u64 [s1 + 0x100] = a0\n 30839: a0 = u64 [s1 + 0x2c0]\n 30843: u64 [s1 + 0x110] = a0\n 30847: a0 = s1 + 0x2a0\n 30851: a1 = 0x40\n 30854: ra = 942, jump @17\n      : @1057 [@dyn 471] (gas: 17)\n 30860: a4 = s1 + 0x200\n 30864: a2 = u64 [a4 + 0xb8]\n 30868: a3 = u64 [a4 + 0xb0]\n 30872: a1 = u64 [a4 + 0xa8]\n 30876: a0 = u64 [a4 + 0xa0]\n 30880: a4 = s1 + 0x100\n 30884: u64 [a4 + 0x30] = a1\n 30887: u64 [a4 + 0x20] = a2\n 30890: a2 = a2 | a1\n 30893: a1 = a0 | a3\n 30896: a1 = a1 | a2\n 30899: a1 = a1 >> 0x20\n 30902: u64 [a4 + 0x18] = a3\n 30905: a2 = a2 | a3\n 30908: a2 = a2 << 0x20\n 30911: a1 = a1 | a2\n 30914: jump @1083 if a1 != 0\n      : @1058 (gas: 8)\n 30918: u64 [s1 + 656] = 0\n 30922: u64 [s1 + 648] = 0\n 30926: u64 [s1 + 640] = 0\n 30930: a2 = 0x7d808e6800000000\n 30940: a1 = s1 + 0x280\n 30944: u64 [s1 + 0x298] = a2\n 30948: u64 [s1 + 0x138] = a0\n 30952: ra = 944, jump @19\n      : @1059 [@dyn 472] (gas: 14)\n 30958: a4 = s1 + 0x100\n 30962: a1 = u64 [a4 + 0x38]\n 30965: a0 = u64 [a4 + 0x20]\n 30968: a3 = u64 [a4 + 0x18]\n 30971: a3 = a3 | a0\n 30974: a0 = 0x100000000\n 30984: u64 [s1 + 0xf0] = a0\n 30988: a0 = 0xfffffffc\n 30998: a0 = a1 <u a0\n 31001: a2 = u64 [a4 + 0x30]\n 31004: a0 = 0 if a2 != 0\n 31006: u64 [s1 + 0xf8] = a3\n 31010: a0 = 0 if a3 != 0\n 31012: jump @1083 if a0 == 0\n      : @1060 (gas: 11)\n 31016: i32 a0 = a1 + 0x4\n 31019: u64 [s1 + 632] = 0\n 31023: a1 = u64 [s1 + 0x48]\n 31026: a3 = s1 + 0x200\n 31030: u64 [a3 + 0x60] = a1\n 31033: a1 = u64 [s1 + 0x50]\n 31036: u64 [a3 + 0x68] = a1\n 31039: a1 = s1 + 0x260\n 31043: a2 = u64 [s1 + 0x40]\n 31046: u64 [a3 + 0x70] = a2\n 31049: ra = 946, jump @19\n      : @1061 [@dyn 473] (gas: 9)\n 31055: a2 = u64 [s1 + 0x138]\n 31059: a0 = u64 [s1 + 0xf0]\n 31063: a0 = a0 + 0xffffffffffffffdc\n 31066: a0 = a2 <u a0\n 31069: a1 = u64 [s1 + 0x130]\n 31073: a0 = 0 if a1 != 0\n 31075: a1 = u64 [s1 + 0xf8]\n 31079: a0 = 0 if a1 != 0\n 31081: jump @1083 if a0 == 0\n      : @1062 (gas: 12)\n 31085: i32 a0 = a2 + 0x24\n 31088: a1 = u64 [s1 + 0xa0]\n 31092: a3 = s1 + 0x200\n 31096: u64 [a3 + 0x40] = a1\n 31099: a1 = u64 [s1 + 0x98]\n 31103: u64 [a3 + 0x48] = a1\n 31106: a1 = u64 [s1 + 0x90]\n 31110: u64 [a3 + 0x50] = a1\n 31113: a1 = s1 + 0x240\n 31117: a2 = u64 [s1 + 0xa8]\n 31121: u64 [a3 + 0x58] = a2\n 31124: ra = 948, jump @19\n      : @1063 [@dyn 474] (gas: 25)\n 31130: ecalli 8 // 'ref_time_left'\n 31132: a0 = u64 [s1 + 0x100]\n 31136: a0 = reverse a0\n 31138: a1 = a0 << 0x20\n 31141: a2 = u64 [s1 + 0x108]\n 31145: a2 = reverse a2\n 31147: a2 = a2 >> 0x20\n 31150: a1 = a1 | a2\n 31153: a2 = u64 [s1 + 0x110]\n 31157: a2 = reverse a2\n 31159: a3 = a2 << 0x20\n 31162: a0 = a0 >> 0x20\n 31165: a0 = a0 | a3\n 31168: a2 = a2 >> 0x20\n 31171: a3 = u64 [s1 + 0x128]\n 31175: u64 [a3 + 0x8] = a0\n 31178: u64 [a3] = a1\n 31180: u32 [a3 + 0x10] = a2\n 31183: u64 [s1 + 1880] = 0\n 31187: u64 [s1 + 1872] = 0\n 31191: u64 [s1 + 1864] = 0\n 31195: u64 [s1 + 1856] = 0\n 31199: a1 = 0x44\n 31202: a0 = u64 [s1 + 0x138]\n 31206: ra = 950, jump @31\n      : @1064 [@dyn 475] (gas: 4)\n 31212: u64 [s1 + 0x110] = a0\n 31216: a1 = 0x20\n 31219: a0 = u64 [s1 + 0x138]\n 31223: ra = 952, jump @31\n      : @1065 [@dyn 476] (gas: 32)\n 31229: a2 = s1 + 0x700\n 31233: u32 [a2 + 96] = 0x20\n 31237: u64 [a2 + 152] = 0xffffffffffffffff\n 31242: u64 [a2 + 144] = 0xffffffffffffffff\n 31247: u64 [a2 + 136] = 0xffffffffffffffff\n 31252: u64 [a2 + 128] = 0xffffffffffffffff\n 31257: a1 = u64 [s1 + 0x128]\n 31261: a1 = a1 << 0x20\n 31264: a1 = a1 >> 0x20\n 31267: a2 = 0x800000000\n 31277: t0 = a1 | a2\n 31280: a1 = s1 + 0x740\n 31284: a1 = a1 << 0x20\n 31287: a1 = a1 >> 0x20\n 31290: a2 = s1 + 0x780\n 31294: a2 = a2 << 0x20\n 31297: a3 = a2 | a1\n 31300: a1 = u64 [s1 + 0x110]\n 31304: a1 = a1 << 0x20\n 31307: a1 = a1 >> 0x20\n 31310: a2 = 0x4400000000\n 31320: a4 = a1 | a2\n 31323: a0 = a0 << 0x20\n 31326: a0 = a0 >> 0x20\n 31329: a1 = s1 + 0x760\n 31333: a1 = a1 << 0x20\n 31336: a5 = a1 | a0\n 31339: a1 = 0xffffffffffffffff\n 31342: a2 = 0xffffffffffffffff\n 31345: a0 = t0\n 31347: ecalli 0 // 'call'\n 31348: fallthrough\n      : @1066 (gas: 1)\n 31349: jump @1073 if a0 != 0\n      : @1067 (gas: 2)\n 31353: ecalli 10 // 'return_data_size'\n 31355: fallthrough\n      : @1068 (gas: 2)\n 31356: a3 = 0x20\n 31359: jump @1070 if a0 >=u a3\n      : @1069 (gas: 3)\n 31362: ecalli 10 // 'return_data_size'\n 31364: a3 = a0\n 31366: fallthrough\n      : @1070 (gas: 18)\n 31367: a2 = u64 [s1 + 0x120]\n 31371: a0 = u64 [s1 + 0x118]\n 31375: a1 = u64 [s1 + 0x130]\n 31379: u64 [s1 + 296] = 0\n 31383: u64 [s1 + 0x130] = a3\n 31387: u64 [s1 + 0x1e0] = a3\n 31391: a3 = u64 [s1 + 0x138]\n 31395: a4 = s1 + 0x200\n 31399: u64 [a4] = a3\n 31401: u64 [s1 + 488] = 0\n 31405: u64 [a4 + 0x8] = a1\n 31408: u64 [s1 + 496] = 0\n 31412: u64 [a4 + 0x10] = a0\n 31415: u64 [s1 + 504] = 0\n 31419: a0 = s1 + 0x200\n 31423: a1 = s1 + 0x1e0\n 31427: u64 [a4 + 0x18] = a2\n 31430: ra = 954, jump @931\n      : @1071 [@dyn 477] (gas: 12)\n 31436: a3 = u64 [s1 + 0x128]\n 31440: a0 = a3 >u 0\n 31442: a1 = u64 [s1 + 0x130]\n 31446: a1 = a1 <u 0x20\n 31449: a1 = a1 ^ 0x1\n 31452: a1 = a0 if a3 != 0\n 31455: a0 = a3 >u 0\n 31457: a2 = a3 >u 0\n 31459: a2 = a0 if a3 == 0\n 31462: a0 = a3 | a3\n 31465: a2 = a1 if a0 == 0\n 31468: jump @1096 if a2 == 0\n      : @1072 (gas: 16)\n 31472: a0 = u64 [s1 + 0x20]\n 31475: a1 = u64 [s1 + 0xa0]\n 31479: u64 [a0] = a1\n 31481: a1 = u64 [s1 + 0x98]\n 31485: u64 [a0 + 0x8] = a1\n 31488: a1 = u64 [s1 + 0x90]\n 31492: u64 [a0 + 0x10] = a1\n 31495: a1 = u64 [s1 + 0xa8]\n 31499: u64 [a0 + 0x18] = a1\n 31502: sp = s0 + 0xfffffffffffff840\n 31506: a0 = sp + 0x700\n 31510: ra = u64 [a0 + 0xb8]\n 31514: s0 = u64 [a0 + 0xb0]\n 31518: s1 = u64 [a0 + 0xa8]\n 31522: sp = sp + 0x7c0\n 31526: ret\n      : @1073 (gas: 3)\n 31528: a0 = s1 + 0x220\n 31532: a1 = 0x40\n 31535: ra = 956, jump @17\n      : @1074 [@dyn 478] (gas: 2)\n 31541: a1 = s1 + 0x200\n 31545: t0 = 958, jump @1236\n      : @1075 [@dyn 479] (gas: 3)\n 31551: u64 [s1 + 0x138] = a0\n 31555: ecalli 10 // 'return_data_size'\n 31557: fallthrough\n      : @1076 (gas: 13)\n 31558: a4 = s1 + 0x100\n 31562: a1 = u64 [a4 + 0x30]\n 31565: a2 = u64 [a4 + 0x20]\n 31568: a1 = a1 | a2\n 31571: a3 = u64 [a4 + 0x28]\n 31574: a2 = u64 [a4 + 0x38]\n 31577: a2 = a2 | a3\n 31580: a2 = a2 | a1\n 31583: a2 = a2 >> 0x20\n 31586: a1 = a1 | a3\n 31589: a1 = a1 << 0x20\n 31592: a1 = a1 | a2\n 31595: jump @1083 if a1 != 0\n      : @1077 (gas: 2)\n 31598: a1 = a0 >> 0x20\n 31601: jump @1083 if a1 != 0\n      : @1078 (gas: 6)\n 31604: a1 = a0\n 31606: u64 [s1 + 0x128] = a0\n 31610: i32 a0 = a0 + 0\n 31612: u64 [s1 + 0x130] = a0\n 31616: a0 = u64 [s1 + 0x138]\n 31620: ra = 960, jump @31\n      : @1079 [@dyn 480] (gas: 7)\n 31626: a1 = u64 [s1 + 0x128]\n 31630: u32 [s1 + 0x7a0] = a1\n 31634: i32 a0 = a0 + 0\n 31636: i32 a1 = s1 + 0x7a0\n 31640: a2 = 0\n 31642: ecalli 9 // 'return_data_copy'\n 31644: fallthrough\n      : @1080 (gas: 3)\n 31645: a0 = i32 [s1 + 0x7a0]\n 31649: a1 = u64 [s1 + 0x130]\n 31653: jump @1083 if a0 <u a1\n      : @1081 (gas: 2)\n 31656: ecalli 10 // 'return_data_size'\n 31658: fallthrough\n      : @1082 (gas: 3)\n 31659: a1 = a0\n 31661: a0 = a0 >> 0x20\n 31664: jump @1097 if a0 == 0\n      : @1083 (gas: 1)\n 31668: trap\n      : @1084 (gas: 6)\n 31669: u64 [s1 + 368] = 0\n 31673: u64 [s1 + 360] = 0\n 31677: u64 [s1 + 352] = 0\n 31681: t0 = 0x3c2\n 31685: a0 = 0x4e487b7100000000\n 31695: fallthrough\n      : @1085 [@dyn 481] (gas: 4)\n 31696: a1 = s1 + 0x160\n 31700: u64 [s1 + 0x178] = a0\n 31704: a0 = 0\n 31706: ra = 964, jump @19\n      : @1086 [@dyn 482] (gas: 7)\n 31712: u64 [s1 + 344] = 0\n 31716: u64 [s1 + 336] = 0\n 31720: u64 [s1 + 320] = 0x11\n 31725: a0 = 0x4\n 31728: a1 = s1 + 0x140\n 31732: u64 [s1 + 328] = 0\n 31736: ra = 966, jump @19\n      : @1087 [@dyn 483] (gas: 2)\n 31742: a1 = i32 [0x20124]\n 31747: jump @1089 if a1 >u 63\n      : @1088 (gas: 2)\n 31751: u32 [0x20124] = 0x40\n 31757: fallthrough\n      : @1089 (gas: 6)\n 31758: a1 = 0x20130\n 31763: i32 a1 = a1 + 0\n 31765: a0 = 0x1\n 31768: a2 = 0x24\n 31771: ecalli 11 // 'seal_return'\n 31773: fallthrough\n      : @1090 (gas: 6)\n 31774: u64 [s1 + 432] = 0\n 31778: u64 [s1 + 424] = 0\n 31782: u64 [s1 + 416] = 0\n 31786: t0 = 0x3c8\n 31790: a0 = 0x4e487b7100000000\n 31800: fallthrough\n      : @1091 [@dyn 484] (gas: 4)\n 31801: a1 = s1 + 0x1a0\n 31805: u64 [s1 + 0x1b8] = a0\n 31809: a0 = 0\n 31811: ra = 970, jump @19\n      : @1092 [@dyn 485] (gas: 7)\n 31817: u64 [s1 + 408] = 0\n 31821: u64 [s1 + 400] = 0\n 31825: u64 [s1 + 384] = 0x41\n 31830: a0 = 0x4\n 31833: a1 = s1 + 0x180\n 31837: u64 [s1 + 392] = 0\n 31841: ra = 972, jump @19\n      : @1093 [@dyn 486] (gas: 3)\n 31847: a0 = u64 [s1 + 0x68]\n 31850: a0 = i32 [a0]\n 31852: jump @1095 if a0 >u 63\n      : @1094 (gas: 7)\n 31856: a1 = u64 [s1 + 0x68]\n 31859: u32 [a1 + 0] = 0x40\n 31862: a0 = 0x1\n 31865: a2 = 0x24\n 31868: a1 = u64 [s1 + 0x70]\n 31871: ecalli 11 // 'seal_return'\n 31873: jump @1097\n      : @1095 (gas: 5)\n 31875: a0 = 0x1\n 31878: a2 = 0x24\n 31881: a1 = u64 [s1 + 0x70]\n 31884: ecalli 11 // 'seal_return'\n 31886: jump @1097\n      : @1096 (gas: 4)\n 31888: a0 = 0x1\n 31891: a1 = u64 [s1 + 0x70]\n 31894: ecalli 11 // 'seal_return'\n 31896: fallthrough\n      : @1097 (gas: 3)\n 31897: a0 = u64 [s1 + 0x138]\n 31901: u64 [s1 + 0x130] = a1\n 31905: ra = 974, jump @31\n      : @1098 [@dyn 487] (gas: 6)\n 31911: i32 a1 = a0 + 0\n 31913: a2 = i32 [s1 + 0x130]\n 31917: a0 = 0x1\n 31920: ra = 0x3d0\n 31924: ecalli 11 // 'seal_return'\n 31926: fallthrough\n      : @1099 [@dyn 488] (gas: 18)\n 31927: sp = sp + 0xffffffffffffff20\n 31931: u64 [sp + 0xd8] = ra\n 31935: u64 [sp + 0xd0] = s0\n 31939: u64 [sp + 0xc8] = s1\n 31943: s0 = sp + 0xe0\n 31947: sp = sp & 0xffffffffffffffe0\n 31950: s1 = sp\n 31952: a2 = u64 [a0]\n 31954: a1 = u64 [a0 + 0x8]\n 31957: a3 = u64 [a0 + 0x10]\n 31960: a0 = u64 [a0 + 0x18]\n 31963: u64 [s1 + 0x98] = a0\n 31967: u64 [s1 + 0x90] = a3\n 31971: u64 [s1 + 0x88] = a1\n 31975: a1 = s1 + 0x80\n 31979: u64 [s1 + 0x80] = a2\n 31983: a0 = 0\n 31985: ra = 978, jump @19\n      : @1100 [@dyn 489] (gas: 7)\n 31991: u64 [s1 + 120] = 0\n 31994: u64 [s1 + 112] = 0\n 31997: u64 [s1 + 96] = 0x8\n 32001: a0 = 0x20\n 32004: a1 = s1 + 0x60\n 32007: u64 [s1 + 104] = 0\n 32010: ra = 980, jump @19\n      : @1101 [@dyn 490] (gas: 3)\n 32016: a2 = 0x20124\n 32021: a0 = i32 [0x20124]\n 32026: jump @1103 if a0 >u 63\n      : @1102 (gas: 2)\n 32030: u32 [0x20124] = 0x40\n 32036: fallthrough\n      : @1103 (gas: 13)\n 32037: u64 [s1 + 0x10] = a2\n 32040: a0 = sp + 0xffffffffffffffe0\n 32043: a2 = a0 & 0xffffffffffffffe0\n 32046: u64 [s1 + 0x18] = a2\n 32049: sp = a2\n 32051: a0 = 0x20130\n 32056: i32 a0 = a0 + 0\n 32058: i32 a2 = a2 + 0\n 32060: a1 = 0x40\n 32063: u64 [s1 + 0x8] = a0\n 32066: ra = 0x3d6\n 32070: ecalli 7 // 'hash_keccak_256'\n 32072: fallthrough\n      : @1104 [@dyn 491] (gas: 6)\n 32073: a3 = u64 [s1 + 0x18]\n 32076: a0 = u64 [a3 + 0x18]\n 32079: a1 = u64 [a3 + 0x10]\n 32082: a2 = u64 [a3 + 0x8]\n 32085: a3 = u64 [a3]\n 32087: t0 = 984, jump @1226\n      : @1105 [@dyn 492] (gas: 7)\n 32093: u64 [s1 + 0xb8] = a3\n 32097: u64 [s1 + 0xb0] = a2\n 32101: u64 [s1 + 0xa8] = a1\n 32105: u64 [s1 + 0xa0] = a0\n 32109: a0 = s1 + 0x40\n 32112: a1 = s1 + 0xa0\n 32116: ra = 986, jump @21\n      : @1106 [@dyn 493] (gas: 6)\n 32122: a0 = u32 [s1 + 0x50]\n 32125: a1 = u64 [s1 + 0x40]\n 32128: a2 = u64 [s1 + 0x48]\n 32131: a0 = a0 | a1\n 32134: a0 = a0 | a2\n 32137: jump @1108 if a0 == 0\n      : @1107 (gas: 6)\n 32140: sp = s0 + 0xffffffffffffff20\n 32144: ra = u64 [sp + 0xd8]\n 32148: s0 = u64 [sp + 0xd0]\n 32152: s1 = u64 [sp + 0xc8]\n 32156: sp = sp + 0xe0\n 32160: ret\n      : @1108 (gas: 8)\n 32162: u64 [s1 + 48] = 0\n 32165: u64 [s1 + 40] = 0\n 32168: u64 [s1 + 32] = 0\n 32171: a0 = 0xb1d04f0800000000\n 32181: a1 = s1 + 0x20\n 32184: u64 [s1 + 0x38] = a0\n 32187: a0 = 0\n 32189: ra = 988, jump @19\n      : @1109 [@dyn 494] (gas: 3)\n 32195: a0 = u64 [s1 + 0x10]\n 32198: a0 = i32 [a0]\n 32200: jump @1111 if a0 >u 31\n      : @1110 (gas: 3)\n 32204: a1 = u64 [s1 + 0x10]\n 32207: u32 [a1 + 0] = 0x20\n 32210: fallthrough\n      : @1111 (gas: 6)\n 32211: a0 = 0x1\n 32214: a2 = 0x4\n 32217: a1 = u64 [s1 + 0x8]\n 32220: ra = 0x3de\n 32224: ecalli 11 // 'seal_return'\n 32226: fallthrough\n      : @1112 [@dyn 495] (gas: 13)\n 32227: sp = sp + 0xffffffffffffff40\n 32231: u64 [sp + 0xb8] = ra\n 32235: u64 [sp + 0xb0] = s0\n 32239: u64 [sp + 0xa8] = s1\n 32243: s0 = sp + 0xc0\n 32247: sp = sp & 0xffffffffffffffe0\n 32250: u64 [sp + 152] = 0\n 32254: u64 [sp + 144] = 0\n 32258: u64 [sp + 136] = 0\n 32262: u64 [sp + 128] = 0\n 32266: a0 = sp + 0x60\n 32269: a1 = sp + 0x80\n 32273: ra = 992, jump @21\n      : @1113 [@dyn 496] (gas: 12)\n 32279: a0 = u64 [sp + 0x68]\n 32282: u64 [sp + 0x18] = a0\n 32285: a0 = u64 [sp + 0x60]\n 32288: u64 [sp + 0x10] = a0\n 32291: a0 = u32 [sp + 0x70]\n 32294: u64 [sp + 0x8] = a0\n 32297: s1 = 0x30130\n 32302: i32 a0 = s1 + 0\n 32304: u64 [sp] = a0\n 32306: ra = 0x3e2\n 32310: ecalli 4 // 'caller'\n 32312: fallthrough\n      : @1114 [@dyn 497] (gas: 4)\n 32313: a0 = u64 [s1 + 0x8]\n 32316: a1 = u64 [s1]\n 32318: a2 = i32 [s1 + 0x10]\n 32321: t0 = 996, jump @1194\n      : @1115 [@dyn 498] (gas: 9)\n 32327: a2 = u64 [sp + 0x8]\n 32330: a1 = a1 ^ a2\n 32333: a2 = u64 [sp + 0x10]\n 32336: a0 = a0 ^ a2\n 32339: a0 = a0 | a1\n 32342: a1 = u64 [sp + 0x18]\n 32345: a1 = a1 ^ a3\n 32348: a0 = a0 | a1\n 32351: jump @1117 if a0 != 0\n      : @1116 (gas: 6)\n 32354: sp = s0 + 0xffffffffffffff40\n 32358: ra = u64 [sp + 0xb8]\n 32362: s0 = u64 [sp + 0xb0]\n 32366: s1 = u64 [sp + 0xa8]\n 32370: sp = sp + 0xc0\n 32374: ret\n      : @1117 (gas: 8)\n 32376: u64 [sp + 80] = 0\n 32379: u64 [sp + 72] = 0\n 32382: u64 [sp + 64] = 0\n 32385: a0 = 0x118cdaa700000000\n 32395: a1 = sp + 0x40\n 32398: u64 [sp + 0x58] = a0\n 32401: a0 = 0\n 32403: ra = 998, jump @19\n      : @1118 [@dyn 499] (gas: 4)\n 32409: a0 = u64 [sp]\n 32411: ra = 0x3e8\n 32415: ecalli 4 // 'caller'\n 32417: fallthrough\n      : @1119 [@dyn 500] (gas: 4)\n 32418: a0 = u64 [s1 + 0x8]\n 32421: a1 = i32 [s1 + 0x10]\n 32424: a2 = u64 [s1]\n 32426: t0 = 1002, jump @1223\n      : @1120 [@dyn 501] (gas: 7)\n 32432: u64 [sp + 56] = 0\n 32435: u64 [sp + 0x30] = a1\n 32438: u64 [sp + 0x28] = a0\n 32441: a0 = 0x4\n 32444: a1 = sp + 0x20\n 32447: u64 [sp + 0x20] = a3\n 32450: ra = 1004, jump @19\n      : @1121 [@dyn 502] (gas: 2)\n 32456: a1 = i32 [0x20124]\n 32461: jump @1123 if a1 >u 63\n      : @1122 (gas: 2)\n 32465: u32 [0x20124] = 0x40\n 32471: fallthrough\n      : @1123 (gas: 7)\n 32472: a1 = 0x20130\n 32477: i32 a1 = a1 + 0\n 32479: a0 = 0x1\n 32482: a2 = 0x24\n 32485: ra = 0x3ee\n 32489: ecalli 11 // 'seal_return'\n 32491: fallthrough\n      : @1124 [@dyn 503] (gas: 15)\n 32492: sp = sp + 0xfffffffffffffb60\n 32496: a0 = sp + 0x400\n 32500: u64 [a0 + 0x98] = ra\n 32504: u64 [a0 + 0x90] = s0\n 32508: u64 [a0 + 0x88] = s1\n 32512: s0 = sp + 0x4a0\n 32516: sp = sp & 0xffffffffffffffe0\n 32519: a1 = sp + 0x300\n 32523: u64 [a1 + 120] = 0\n 32526: u64 [a1 + 112] = 0\n 32529: u64 [a1 + 104] = 0\n 32532: u64 [a1 + 96] = 0xa\n 32536: a0 = sp + 0x340\n 32540: a1 = sp + 0x360\n 32544: ra = 1008, jump @21\n      : @1125 [@dyn 504] (gas: 9)\n 32550: a0 = sp + 0x300\n 32554: a4 = u64 [a0 + 0x58]\n 32557: a2 = u64 [a0 + 0x50]\n 32560: s1 = u64 [a0 + 0x48]\n 32563: a3 = u64 [a0 + 0x40]\n 32566: a0 = s1 | a4\n 32569: a1 = a3 | a2\n 32572: a0 = a0 | a1\n 32575: jump @1159 if a0 == 0\n      : @1126 (gas: 11)\n 32579: a0 = sp + 0x300\n 32583: u64 [a0 + 184] = 0\n 32587: u64 [a0 + 176] = 0\n 32591: u64 [a0 + 168] = 0\n 32595: u64 [a0 + 160] = 0\n 32599: i32 a0 = sp + 0x3a0\n 32603: u64 [sp + 0x50] = a2\n 32606: u64 [sp + 0x58] = a3\n 32609: u64 [sp + 0x48] = a4\n 32612: ecalli 14 // 'value_transferred'\n 32614: fallthrough\n      : @1127 (gas: 16)\n 32615: a4 = sp + 0x300\n 32619: a0 = u64 [a4 + 0xb8]\n 32623: a1 = u64 [a4 + 0xa8]\n 32627: a2 = u64 [a4 + 0xa0]\n 32631: a3 = u64 [a4 + 0xb0]\n 32635: a4 = u64 [sp + 0x48]\n 32638: a0 = a0 ^ a4\n 32641: a1 = a1 ^ s1\n 32644: a0 = a0 | a1\n 32647: a1 = u64 [sp + 0x50]\n 32650: a1 = a1 ^ a3\n 32653: a3 = u64 [sp + 0x58]\n 32656: a2 = a2 ^ a3\n 32659: a1 = a1 | a2\n 32662: a0 = a0 | a1\n 32665: jump @1162 if a0 != 0\n      : @1128 (gas: 8)\n 32669: a1 = sp + 0x300\n 32673: u64 [a1 + 216] = 0\n 32677: u64 [a1 + 208] = 0\n 32681: u64 [a1 + 200] = 0\n 32685: u64 [a1 + 192] = 0xb\n 32690: a0 = sp + 0x280\n 32694: a1 = sp + 0x3c0\n 32698: ra = 1010, jump @21\n      : @1129 [@dyn 505] (gas: 6)\n 32704: a2 = u32 [sp + 0x290]\n 32708: a1 = u64 [sp + 0x280]\n 32712: s1 = u64 [sp + 0x288]\n 32716: a0 = a1 | a2\n 32719: a0 = a0 | s1\n 32722: jump @1132 if a0 != 0\n      : @1130 (gas: 8)\n 32725: a0 = sp + 0x300\n 32729: u64 [a0 + 248] = 0\n 32733: u64 [a0 + 240] = 0\n 32737: u64 [a0 + 232] = 0\n 32741: u64 [a0 + 224] = 0\n 32745: a0 = sp + 0x260\n 32749: a1 = sp + 0x3e0\n 32753: ra = 1012, jump @21\n      : @1131 [@dyn 506] (gas: 4)\n 32759: a2 = u32 [sp + 0x270]\n 32763: s1 = u64 [sp + 0x268]\n 32767: a1 = u64 [sp + 0x260]\n 32771: fallthrough\n      : @1132 (gas: 73)\n 32772: u64 [sp + 0x30] = a2\n 32775: u64 [sp + 0x38] = a1\n 32778: a0 = sp + 0x400\n 32782: u64 [a0 + 24] = 0\n 32785: u64 [a0 + 16] = 0\n 32788: u64 [a0 + 8] = 0\n 32791: u64 [a0 + 0] = 0\n 32793: i32 a0 = sp + 0x400\n 32797: ecalli 14 // 'value_transferred'\n 32799: a1 = sp + 0x400\n 32803: a0 = u64 [a1]\n 32805: u64 [sp + 0x58] = a0\n 32808: a0 = u64 [a1 + 0x8]\n 32811: u64 [sp + 0x50] = a0\n 32814: a0 = u64 [a1 + 0x10]\n 32817: u64 [sp + 0x48] = a0\n 32820: a0 = u64 [a1 + 0x18]\n 32823: u64 [sp + 0x40] = a0\n 32826: ecalli 8 // 'ref_time_left'\n 32828: a1 = reverse s1\n 32830: a2 = a1 << 0x20\n 32833: a3 = u64 [sp + 0x30]\n 32836: a3 = reverse a3\n 32838: a3 = a3 >> 0x20\n 32841: a2 = a2 | a3\n 32844: a3 = u64 [sp + 0x38]\n 32847: a3 = reverse a3\n 32849: a4 = a3 << 0x20\n 32852: a5 = 0x30130\n 32857: a1 = a1 >> 0x20\n 32860: a1 = a1 | a4\n 32863: a3 = a3 >> 0x20\n 32866: u64 [0x30138] = a1\n 32871: u64 [0x30130] = a2\n 32876: u32 [0x30140] = a3\n 32881: a1 = u64 [sp + 0x40]\n 32884: a2 = sp + 0x400\n 32888: u64 [a2 + 0x38] = a1\n 32891: a1 = u64 [sp + 0x48]\n 32894: u64 [a2 + 0x30] = a1\n 32897: a1 = u64 [sp + 0x50]\n 32900: u64 [a2 + 0x28] = a1\n 32903: a1 = u64 [sp + 0x58]\n 32906: u64 [a2 + 0x20] = a1\n 32909: u32 [a2 + 64] = 0\n 32912: a0 = a0 >u 0x8fc\n 32916: a1 = -a0\n 32918: u64 [a2 + 0x78] = a1\n 32921: u64 [a2 + 0x70] = a1\n 32924: u64 [a2 + 0x68] = a1\n 32927: u64 [a2 + 0x60] = a1\n 32930: a5 = a5 << 0x20\n 32933: a5 = a5 >> 0x20\n 32936: a0 = a0 << 0x23\n 32939: a0 = a0 | a5\n 32942: a1 = sp + 0x420\n 32946: a1 = a1 << 0x20\n 32949: a1 = a1 >> 0x20\n 32952: a2 = 0x20130\n 32957: a3 = sp + 0x460\n 32961: a3 = a3 << 0x20\n 32964: a3 = a3 | a1\n 32967: a2 = a2 << 0x20\n 32970: a4 = a2 >> 0x20\n 32973: a1 = sp + 0x440\n 32977: a1 = a1 << 0x20\n 32980: a5 = a1 | a4\n 32983: a1 = 0xffffffffffffffff\n 32986: a2 = 0xffffffffffffffff\n 32989: ecalli 0 // 'call'\n 32990: s1 = a0\n 32992: ecalli 10 // 'return_data_size'\n 32994: fallthrough\n      : @1133 (gas: 1)\n 32995: jump @1145 if a0 == 0\n      : @1134 (gas: 12)\n 32999: u64 [sp + 0x18] = s1\n 33002: ecalli 10 // 'return_data_size'\n 33004: a2 = a0\n 33006: a3 = sp + 0x200\n 33010: u64 [a3 + 56] = 0\n 33013: u64 [a3 + 48] = 0\n 33016: u64 [a3 + 40] = 0\n 33019: a0 = sp + 0x240\n 33023: a1 = sp + 0x220\n 33027: u64 [sp + 0x20] = a2\n 33030: u64 [a3 + 0x20] = a2\n 33033: ra = 1014, jump @957\n      : @1135 [@dyn 507] (gas: 12)\n 33039: a1 = sp + 0x200\n 33043: a0 = u64 [a1 + 0x40]\n 33046: u64 [sp + 0x48] = a0\n 33049: a0 = u64 [a1 + 0x48]\n 33052: u64 [sp + 0x40] = a0\n 33055: a0 = u64 [a1 + 0x50]\n 33058: u64 [sp + 0x38] = a0\n 33061: a0 = u64 [a1 + 0x58]\n 33064: u64 [sp + 0x30] = a0\n 33067: a0 = sp + 0x200\n 33071: a1 = 0x40\n 33074: ra = 1016, jump @17\n      : @1136 [@dyn 508] (gas: 23)\n 33081: a1 = sp + 0x200\n 33085: a0 = u64 [a1 + 0x18]\n 33088: u64 [sp + 0x50] = a0\n 33091: s1 = u64 [a1 + 0x10]\n 33094: a2 = u64 [a1 + 0x8]\n 33097: u64 [sp + 0x58] = a2\n 33100: a3 = u64 [a1]\n 33102: u64 [sp + 0x28] = a3\n 33105: a1 = u64 [sp + 0x30]\n 33108: u64 [sp + 0x1d8] = a1\n 33112: a1 = u64 [sp + 0x38]\n 33115: u64 [sp + 0x1d0] = a1\n 33119: a1 = u64 [sp + 0x40]\n 33122: u64 [sp + 0x1c8] = a1\n 33126: a1 = u64 [sp + 0x48]\n 33129: u64 [sp + 0x1c0] = a1\n 33133: u64 [sp + 0x1f8] = a0\n 33137: u64 [sp + 0x1f0] = s1\n 33141: u64 [sp + 0x1e8] = a2\n 33145: a0 = sp + 0x1e0\n 33149: a1 = sp + 0x1c0\n 33153: u64 [sp + 0x1e0] = a3\n 33157: ra = 1018, jump @931\n      : @1137 [@dyn 509] (gas: 12)\n 33163: a2 = u64 [sp + 0x28]\n 33166: a0 = u64 [sp + 0x50]\n 33169: a1 = u64 [sp + 0x58]\n 33172: a0 = a0 | a1\n 33175: a1 = a2 | s1\n 33178: a1 = a1 | a0\n 33181: a1 = a1 >> 0x20\n 33184: u64 [sp + 0x48] = s1\n 33187: a0 = a0 | s1\n 33190: a0 = a0 << 0x20\n 33193: a0 = a0 | a1\n 33196: jump @1187 if a0 != 0\n      : @1138 (gas: 9)\n 33200: u64 [sp + 440] = 0\n 33204: u64 [sp + 432] = 0\n 33208: u64 [sp + 424] = 0\n 33212: a1 = sp + 0x1a0\n 33216: a0 = u64 [sp + 0x20]\n 33219: u64 [sp + 0x1a0] = a0\n 33223: a0 = a2\n 33225: s1 = a2\n 33227: ra = 1020, jump @19\n      : @1139 [@dyn 510] (gas: 2)\n 33234: ecalli 10 // 'return_data_size'\n 33236: fallthrough\n      : @1140 (gas: 9)\n 33237: a1 = u64 [sp + 0x50]\n 33240: a2 = u64 [sp + 0x48]\n 33243: a1 = a1 | a2\n 33246: a2 = 0xffffffe0\n 33256: a2 = s1 <u a2\n 33259: a4 = u64 [sp + 0x58]\n 33262: a2 = 0 if a4 != 0\n 33264: a2 = 0 if a1 != 0\n 33266: jump @1187 if a2 == 0\n      : @1141 (gas: 4)\n 33270: a3 = s1\n 33272: s1 = a0\n 33274: a0 = a0 >> 0x20\n 33277: jump @1187 if a0 != 0\n      : @1142 (gas: 5)\n 33281: i32 a0 = a3 + 0x20\n 33284: i32 a1 = s1 + 0\n 33286: u64 [sp + 0x58] = a1\n 33289: a1 = s1\n 33291: ra = 1022, jump @31\n      : @1143 [@dyn 511] (gas: 6)\n 33297: u32 [sp + 0x480] = s1\n 33301: i32 a0 = a0 + 0\n 33303: i32 a1 = sp + 0x480\n 33307: a2 = 0\n 33309: ecalli 9 // 'return_data_copy'\n 33311: fallthrough\n      : @1144 (gas: 4)\n 33312: a0 = i32 [sp + 0x480]\n 33316: s1 = u64 [sp + 0x18]\n 33319: a1 = u64 [sp + 0x58]\n 33322: jump @1187 if a0 <u a1\n      : @1145 (gas: 1)\n 33326: jump @1161 if s1 == 0\n      : @1146 (gas: 3)\n 33330: a0 = sp + 0x180\n 33334: a1 = 0x40\n 33337: ra = 1024, jump @17\n      : @1147 [@dyn 512] (gas: 5)\n 33344: a2 = u64 [sp + 0x198]\n 33348: s1 = u64 [sp + 0x190]\n 33352: a0 = u64 [sp + 0x188]\n 33356: a1 = u64 [sp + 0x180]\n 33360: t0 = 1026, jump @1222\n      : @1148 [@dyn 513] (gas: 1)\n 33366: jump @1187 if a0 != 0\n      : @1149 (gas: 8)\n 33370: u64 [sp + 368] = 0\n 33374: u64 [sp + 360] = 0\n 33378: u64 [sp + 352] = 0\n 33382: a0 = 0x8c379a000000000\n 33392: a1 = sp + 0x160\n 33396: u64 [sp + 0x178] = a0\n 33400: a0 = u64 [sp + 0x58]\n 33403: ra = 1028, jump @19\n      : @1150 [@dyn 514] (gas: 1)\n 33410: t0 = 1030, jump @1203\n      : @1151 [@dyn 515] (gas: 1)\n 33416: jump @1187 if a0 == 0\n      : @1152 (gas: 8)\n 33420: a0 = u64 [sp + 0x58]\n 33423: i32 a0 = a0 + 0x4\n 33426: u64 [sp + 344] = 0\n 33430: u64 [sp + 336] = 0\n 33434: u64 [sp + 320] = 0x20\n 33439: a1 = sp + 0x140\n 33443: u64 [sp + 328] = 0\n 33447: ra = 1032, jump @19\n      : @1153 [@dyn 516] (gas: 1)\n 33454: t0 = 1034, jump @1214\n      : @1154 [@dyn 517] (gas: 1)\n 33460: jump @1187 if a0 == 0\n      : @1155 (gas: 8)\n 33464: s1 = u64 [sp + 0x58]\n 33467: i32 a0 = s1 + 0x24\n 33470: u64 [sp + 312] = 0\n 33474: u64 [sp + 304] = 0\n 33478: u64 [sp + 288] = 0x13\n 33483: a1 = sp + 0x120\n 33487: u64 [sp + 296] = 0\n 33491: ra = 1036, jump @19\n      : @1156 [@dyn 518] (gas: 1)\n 33498: t0 = 1038, jump @1209\n      : @1157 [@dyn 519] (gas: 1)\n 33504: jump @1187 if a0 == 0\n      : @1158 (gas: 12)\n 33508: s1 = u64 [sp + 0x58]\n 33511: i32 a0 = s1 + 0x44\n 33514: a1 = u64 [0x20100]\n 33519: a2 = u64 [0x20108]\n 33524: u64 [sp + 0x118] = a1\n 33528: u64 [sp + 0x110] = a2\n 33532: a1 = 0x6c65640000000000\n 33542: u64 [sp + 0x108] = a1\n 33546: a1 = sp + 0x100\n 33550: u64 [sp + 256] = 0\n 33554: ra = 0x430\n 33558: jump @19\n      : @1159 (gas: 8)\n 33562: a0 = sp + 0x300\n 33566: u64 [a0 + 152] = 0\n 33570: u64 [a0 + 144] = 0\n 33574: u64 [a0 + 136] = 0\n 33578: u64 [a0 + 128] = 0\n 33582: i32 a0 = sp + 0x380\n 33586: ecalli 14 // 'value_transferred'\n 33588: fallthrough\n      : @1160 (gas: 9)\n 33589: a4 = sp + 0x300\n 33593: a0 = u64 [a4 + 0x90]\n 33597: a1 = u64 [a4 + 0x98]\n 33601: a2 = u64 [a4 + 0x88]\n 33605: a3 = u64 [a4 + 0x80]\n 33609: a1 = a1 | a2\n 33612: a0 = a0 | a3\n 33615: a0 = a0 | a1\n 33618: jump @1175 if a0 != 0\n      : @1161 (gas: 7)\n 33622: sp = s0 + 0xfffffffffffffb60\n 33626: a0 = sp + 0x400\n 33630: ra = u64 [a0 + 0x98]\n 33634: s0 = u64 [a0 + 0x90]\n 33638: s1 = u64 [a0 + 0x88]\n 33642: sp = sp + 0x4a0\n 33646: ret\n      : @1162 (gas: 3)\n 33648: a0 = sp + 0x320\n 33652: a1 = 0x40\n 33655: ra = 1040, jump @17\n      : @1163 [@dyn 520] (gas: 6)\n 33662: a3 = sp + 0x300\n 33666: a2 = u64 [a3 + 0x38]\n 33669: s1 = u64 [a3 + 0x30]\n 33672: a0 = u64 [a3 + 0x28]\n 33675: a1 = u64 [a3 + 0x20]\n 33678: t0 = 1042, jump @1222\n      : @1164 [@dyn 521] (gas: 1)\n 33684: jump @1187 if a0 != 0\n      : @1165 (gas: 9)\n 33688: a2 = sp + 0x300\n 33692: u64 [a2 + 16] = 0\n 33695: u64 [a2 + 8] = 0\n 33698: u64 [a2 + 0] = 0\n 33700: a0 = 0x8c379a000000000\n 33710: a1 = sp + 0x300\n 33714: u64 [a2 + 0x18] = a0\n 33717: a0 = u64 [sp + 0x58]\n 33720: ra = 1044, jump @19\n      : @1166 [@dyn 522] (gas: 1)\n 33727: t0 = 1046, jump @1203\n      : @1167 [@dyn 523] (gas: 1)\n 33733: jump @1187 if a0 == 0\n      : @1168 (gas: 9)\n 33737: a0 = u64 [sp + 0x58]\n 33740: i32 a0 = a0 + 0x4\n 33743: a2 = sp + 0x200\n 33747: u64 [a2 + 248] = 0\n 33751: u64 [a2 + 240] = 0\n 33755: u64 [a2 + 224] = 0x20\n 33760: a1 = sp + 0x2e0\n 33764: u64 [a2 + 232] = 0\n 33768: ra = 1048, jump @19\n      : @1169 [@dyn 524] (gas: 1)\n 33775: t0 = 1050, jump @1214\n      : @1170 [@dyn 525] (gas: 1)\n 33781: jump @1187 if a0 == 0\n      : @1171 (gas: 9)\n 33785: s1 = u64 [sp + 0x58]\n 33788: i32 a0 = s1 + 0x24\n 33791: a2 = sp + 0x200\n 33795: u64 [a2 + 216] = 0\n 33799: u64 [a2 + 208] = 0\n 33803: u64 [a2 + 192] = 0xc\n 33808: a1 = sp + 0x2c0\n 33812: u64 [a2 + 200] = 0\n 33816: ra = 1052, jump @19\n      : @1172 [@dyn 526] (gas: 1)\n 33823: t0 = 1054, jump @1209\n      : @1173 [@dyn 527] (gas: 1)\n 33829: jump @1187 if a0 == 0\n      : @1174 (gas: 12)\n 33833: s1 = u64 [sp + 0x58]\n 33836: i32 a0 = s1 + 0x44\n 33839: a1 = u64 [0x200f8]\n 33844: a2 = sp + 0x200\n 33848: u64 [a2 + 168] = 0\n 33852: u64 [a2 + 0xb8] = a1\n 33856: a1 = 0x2066656500000000\n 33866: u64 [a2 + 0xb0] = a1\n 33870: a1 = sp + 0x2a0\n 33874: u64 [a2 + 160] = 0\n 33878: ra = 0x430\n 33882: jump @19\n      : @1175 (gas: 3)\n 33886: a0 = sp + 0xe0\n 33890: a1 = 0x40\n 33893: ra = 1056, jump @17\n      : @1176 [@dyn 528] (gas: 5)\n 33900: a2 = u64 [sp + 0xf8]\n 33904: s1 = u64 [sp + 0xf0]\n 33908: a0 = u64 [sp + 0xe8]\n 33912: a1 = u64 [sp + 0xe0]\n 33916: t0 = 1058, jump @1222\n      : @1177 [@dyn 529] (gas: 1)\n 33922: jump @1187 if a0 != 0\n      : @1178 (gas: 8)\n 33926: u64 [sp + 208] = 0\n 33930: u64 [sp + 200] = 0\n 33934: u64 [sp + 192] = 0\n 33938: a0 = 0x8c379a000000000\n 33948: a1 = sp + 0xc0\n 33952: u64 [sp + 0xd8] = a0\n 33956: a0 = u64 [sp + 0x58]\n 33959: ra = 1060, jump @19\n      : @1179 [@dyn 530] (gas: 1)\n 33966: t0 = 1062, jump @1203\n      : @1180 [@dyn 531] (gas: 1)\n 33972: jump @1187 if a0 == 0\n      : @1181 (gas: 8)\n 33975: a0 = u64 [sp + 0x58]\n 33978: i32 a0 = a0 + 0x4\n 33981: u64 [sp + 184] = 0\n 33985: u64 [sp + 176] = 0\n 33989: u64 [sp + 160] = 0x20\n 33994: a1 = sp + 0xa0\n 33998: u64 [sp + 168] = 0\n 34002: ra = 1064, jump @19\n      : @1182 [@dyn 532] (gas: 1)\n 34009: t0 = 1066, jump @1214\n      : @1183 [@dyn 533] (gas: 1)\n 34015: jump @1187 if a0 == 0\n      : @1184 (gas: 8)\n 34018: s1 = u64 [sp + 0x58]\n 34021: i32 a0 = s1 + 0x24\n 34024: u64 [sp + 152] = 0\n 34028: u64 [sp + 144] = 0\n 34032: u64 [sp + 128] = 0xf\n 34037: a1 = sp + 0x80\n 34041: u64 [sp + 136] = 0\n 34045: ra = 1068, jump @19\n      : @1185 [@dyn 534] (gas: 1)\n 34052: t0 = 1070, jump @1209\n      : @1186 [@dyn 535] (gas: 1)\n 34058: jump @1188 if a0 != 0\n      : @1187 (gas: 1)\n 34061: trap\n      : @1188 (gas: 10)\n 34062: s1 = u64 [sp + 0x58]\n 34065: i32 a0 = s1 + 0x44\n 34068: a1 = u64 [0x20110]\n 34073: a2 = u64 [0x20118]\n 34078: u64 [sp + 0x78] = a1\n 34081: u64 [sp + 104] = 0\n 34084: u64 [sp + 0x70] = a2\n 34087: a1 = sp + 0x60\n 34090: u64 [sp + 96] = 0\n 34093: ra = 1072, jump @19\n      : @1189 [@dyn 536] (gas: 3)\n 34100: a1 = 0x64\n 34103: a0 = s1\n 34105: ra = 1074, jump @31\n      : @1190 [@dyn 537] (gas: 7)\n 34112: i32 a1 = a0 + 0\n 34114: a0 = 0x1\n 34117: a2 = 0x64\n 34120: ecalli 11 // 'seal_return'\n 34122: a0 = 0\n 34124: ra = 0x434\n 34128: jump @37\n      : @1191 [export #0: 'call'] (gas: 2)\n 34131: a0 = 0\n 34133: ra = 1076, jump @37\n      : @1192 [@dyn 538] [export #1: 'deploy'] (gas: 2)\n 34139: a0 = 0x1\n 34142: ra = 1078, jump @37\n      : @1193 [@dyn 539] (gas: 23)\n 34148: u64 [s1 + 184] = 0\n 34152: t2 = 0\n 34154: t1 = 0\n 34156: u64 [s1 + 176] = 0\n 34160: a5 = u64 [s1 + 0xa8]\n 34164: a0 = u64 [a5 + 0x18]\n 34167: a1 = u64 [s1 + 0x30]\n 34170: a2 = a1 + 0x20\n 34173: u64 [s1 + 0x50] = a2\n 34176: a1 = a2 <u a1\n 34179: a2 = u64 [s1 + 0x28]\n 34182: a3 = a2 + a1\n 34185: u64 [s1 + 0x48] = a3\n 34188: a4 = a3 <u a2\n 34191: a4 = a1 if a1 == 0\n 34194: a1 = u64 [a5 + 0x10]\n 34197: a2 = u64 [a5 + 0x8]\n 34200: a3 = u64 [a5]\n 34202: a0 = reverse a0\n 34204: a1 = reverse a1\n 34206: ra = reverse a2\n 34208: a2 = reverse a3\n 34210: jump [t0]\n      : @1194 (gas: 11)\n 34212: a0 = reverse a0\n 34214: a3 = a0 >> 0x20\n 34217: a1 = reverse a1\n 34219: a4 = a1 << 0x20\n 34222: a3 = a3 | a4\n 34225: a0 = a0 << 0x20\n 34228: a2 = reverse a2\n 34230: a2 = a2 >> 0x20\n 34233: a0 = a0 | a2\n 34236: a1 = a1 >> 0x20\n 34239: jump [t0]\n      : @1195 (gas: 15)\n 34241: t2 = u64 [s1 + 0xb8]\n 34245: t1 = u64 [s1 + 0xa0]\n 34249: ra = u64 [s1 + 0xa8]\n 34253: a1 = u64 [s1 + 0x50]\n 34256: a0 = a1 + t2\n 34259: a1 = a0 <u a1\n 34262: a4 = u64 [s1 + 0x48]\n 34265: a2 = a4 + t1\n 34268: a2 = a2 + a1\n 34271: a5 = a2 ^ a4\n 34274: a4 = a2 <u a4\n 34277: a4 = a1 if a5 == 0\n 34280: a5 = u64 [s1 + 0x40]\n 34283: a1 = a5 + ra\n 34286: jump [t0]\n      : @1196 (gas: 15)\n 34288: a0 = u64 [a3 + 0x18]\n 34291: a1 = u64 [a3 + 0x10]\n 34294: a2 = u64 [a3 + 0x8]\n 34297: a3 = u64 [a3]\n 34299: a0 = reverse a0\n 34301: a4 = reverse a1\n 34303: a2 = reverse a2\n 34305: a3 = reverse a3\n 34307: a1 = u64 [s1 + 0xb8]\n 34311: u64 [a1 + 0x18] = a3\n 34314: u64 [a1 + 0x10] = a2\n 34317: u64 [a1 + 0x8] = a4\n 34320: u64 [a1] = a0\n 34322: a0 = s1 + 0x7ff\n 34326: jump [t0]\n      : @1197 (gas: 8)\n 34328: a2 = u64 [s1 + 0xb8]\n 34332: a0 = 0xffffffbc\n 34342: a0 = a2 <u a0\n 34345: a1 = u64 [s1 + 0xb0]\n 34349: a0 = 0 if a1 != 0\n 34351: a1 = u64 [s1 + 0xa8]\n 34355: a0 = 0 if a1 != 0\n 34357: jump [t0]\n      : @1198 (gas: 15)\n 34359: a5 = u64 [s1 + 0x30]\n 34362: t2 = 0\n 34364: t1 = 0\n 34366: u64 [s1 + 176] = 0\n 34370: a0 = u64 [s1 + 0x68]\n 34373: a1 = u64 [s1 + 0x60]\n 34376: a0 = a0 | a1\n 34379: a1 = u64 [s1 + 0x78]\n 34382: a2 = u64 [s1 + 0x70]\n 34385: a1 = a1 | a2\n 34388: a0 = a0 | a1\n 34391: a0 = a0 >u 0\n 34393: a0 = a0 << 0x5\n 34396: u64 [s1 + 0xb8] = a0\n 34400: jump [t0]\n      : @1199 (gas: 7)\n 34402: a4 = 0x100000000\n 34412: a0 = 0xfffffffc\n 34422: a0 = a1 <u a0\n 34425: a2 = u64 [s1 + 0xb0]\n 34429: a0 = 0 if a2 != 0\n 34431: a0 = 0 if a3 != 0\n 34433: jump [t0]\n      : @1200 (gas: 10)\n 34435: a0 = u64 [a3 + 0x18]\n 34438: a1 = u64 [a3 + 0x10]\n 34441: a2 = u64 [a3 + 0x8]\n 34444: a3 = u64 [a3]\n 34446: a0 = reverse a0\n 34448: a1 = reverse a1\n 34450: a2 = reverse a2\n 34452: a3 = reverse a3\n 34454: a4 = s1 + 0x2038\n 34458: jump [t0]\n      : @1201 (gas: 11)\n 34460: a1 = u64 [s1 + 0xb8]\n 34464: a0 = a1 + 0x20\n 34467: a1 = a0 <u a1\n 34470: a2 = t2 + a1\n 34473: a3 = a2 <u t2\n 34476: a3 = a1 if a1 == 0\n 34479: a3 = a3 + t1\n 34482: a1 = a3 <u t1\n 34485: a4 = u64 [s1 + 0xb0]\n 34489: a4 = a4 + a1\n 34492: jump [t0]\n      : @1202 (gas: 23)\n 34494: a2 = u64 [s1 + 0x90]\n 34498: a0 = u64 [a2 + 0x8]\n 34501: a1 = u64 [a2]\n 34503: a2 = i32 [a2 + 0x10]\n 34506: a0 = reverse a0\n 34508: a3 = a0 >> 0x20\n 34511: a1 = reverse a1\n 34513: a4 = a1 << 0x20\n 34516: a3 = a3 | a4\n 34519: a0 = a0 << 0x20\n 34522: a2 = reverse a2\n 34524: a2 = a2 >> 0x20\n 34527: a0 = a0 | a2\n 34530: a1 = a1 >> 0x20\n 34533: a2 = u64 [s1 + 0x78]\n 34536: a1 = a1 ^ a2\n 34539: a2 = u64 [s1 + 0x80]\n 34543: a0 = a0 ^ a2\n 34546: a0 = a0 | a1\n 34549: a1 = u64 [s1 + 0x88]\n 34553: a1 = a1 ^ a3\n 34556: a0 = a0 | a1\n 34559: jump [t0]\n      : @1203 (gas: 11)\n 34561: a2 = u64 [sp + 0x48]\n 34564: a2 = a2 | s1\n 34567: s1 = 0x100000000\n 34577: a0 = 0xfffffffc\n 34587: a1 = u64 [sp + 0x58]\n 34590: a0 = a1 <u a0\n 34593: a1 = u64 [sp + 0x50]\n 34596: a0 = 0 if a1 != 0\n 34598: u64 [sp + 0x48] = a2\n 34601: a0 = 0 if a2 != 0\n 34603: jump [t0]\n      : @1204 (gas: 10)\n 34605: a0 = u64 [s1 + 0x20]\n 34608: a1 = u64 [s1 + 0x18]\n 34611: a0 = a0 | a1\n 34614: a1 = 0xffffffe0\n 34624: a4 = u64 [s1 + 0x30]\n 34627: a1 = a4 <u a1\n 34630: a2 = u64 [s1 + 0x28]\n 34633: a1 = 0 if a2 != 0\n 34635: a1 = 0 if a0 != 0\n 34637: jump [t0]\n      : @1205 (gas: 15)\n 34639: a4 = u64 [s1 + 0x118]\n 34643: a2 = a4 <u 0x80\n 34647: a3 = u64 [s1 + 0xd0]\n 34651: a1 = a3 if a2 != 0\n 34654: a5 = u64 [s1 + 0xd8]\n 34658: a3 = u64 [s1 + 0xe8]\n 34662: a3 = a3 | a5\n 34665: a3 = a0 if a2 == 0\n 34668: a0 = 0xffffffffffffffff\n 34671: a1 = a0 if a4 == 0\n 34674: a3 = a0 if a4 == 0\n 34677: a4 = u64 [s1 + 0xe0]\n 34681: a4 = 0 if a2 == 0\n 34683: a5 = 0 if a2 == 0\n 34685: jump [t0]\n      : @1206 (gas: 11)\n 34687: a4 = a4 + a1\n 34690: a1 = a4 <u a1\n 34693: a1 = a1 + a5\n 34696: a1 = a1 | a2\n 34699: a2 = a0 | a4\n 34702: a2 = a2 | a1\n 34705: a1 = a1 | a4\n 34708: a2 = a2 >> 0x20\n 34711: a1 = a1 << 0x20\n 34714: a1 = a1 | a2\n 34717: jump [t0]\n      : @1207 (gas: 8)\n 34719: a4 = a4 | a2\n 34722: a2 = a0 | a1\n 34725: a2 = a2 | a4\n 34728: a2 = a2 >> 0x20\n 34731: a1 = a1 | a4\n 34734: a1 = a1 << 0x20\n 34737: a1 = a1 | a2\n 34740: jump [t0]\n      : @1208 (gas: 12)\n 34742: a0 = u64 [s1 + 0x30]\n 34745: a1 = u64 [s1 + 0x18]\n 34748: a2 = u64 [s1 + 0x28]\n 34751: a2 = a2 | a1\n 34754: a3 = u64 [s1 + 0x20]\n 34757: a1 = a0 | a3\n 34760: a1 = a1 | a2\n 34763: a1 = a1 >> 0x20\n 34766: a2 = a2 | a3\n 34769: a2 = a2 << 0x20\n 34772: a1 = a1 | a2\n 34775: jump [t0]\n      : @1209 (gas: 7)\n 34777: a0 = 0xffffffbc\n 34787: a0 = s1 <u a0\n 34790: a1 = u64 [sp + 0x50]\n 34793: a0 = 0 if a1 != 0\n 34795: a1 = u64 [sp + 0x48]\n 34798: a0 = 0 if a1 != 0\n 34800: jump [t0]\n      : @1210 (gas: 9)\n 34802: a3 = u64 [s1 + 0xa8]\n 34806: a2 = u64 [s1 + 0xb0]\n 34810: a1 = u64 [s1 + 0xb8]\n 34814: a0 = u64 [s1 + 0xa0]\n 34818: a0 = a0 + 0xffffffffffffffdc\n 34821: a0 = a1 <u a0\n 34824: a0 = 0 if a2 != 0\n 34826: a0 = 0 if a3 != 0\n 34828: jump [t0]\n      : @1211 (gas: 8)\n 34830: a0 = a0 | a2\n 34833: a2 = a4 | a1\n 34836: a2 = a2 | a0\n 34839: a2 = a2 >> 0x20\n 34842: a0 = a0 | a1\n 34845: a0 = a0 << 0x20\n 34848: a0 = a0 | a2\n 34851: jump [t0]\n      : @1212 (gas: 12)\n 34853: a4 = u64 [s1 + 0xa8]\n 34857: a2 = u64 [s1 + 0xa0]\n 34861: a0 = u64 [s1 + 0xb8]\n 34865: a0 = a0 | a4\n 34868: a3 = u64 [s1 + 0xb0]\n 34872: a1 = a2 | a3\n 34875: a1 = a1 | a0\n 34878: a1 = a1 >> 0x20\n 34881: a0 = a0 | a3\n 34884: a0 = a0 << 0x20\n 34887: a0 = a0 | a1\n 34890: jump [t0]\n      : @1213 (gas: 13)\n 34892: a4 = a0 << 0x3f\n 34895: a5 = a1 >> 0x1\n 34898: t1 = a5 | a4\n 34901: a5 = a3 << 0x3f\n 34904: a0 = a0 >> 0x1\n 34907: a0 = a0 | a5\n 34910: a1 = a1 << 0x3f\n 34913: a5 = a2 >> 0x1\n 34916: a1 = a1 | a5\n 34919: a3 = a3 >> 0x1\n 34922: a2 = a2 & 0x1\n 34925: a5 = -a2\n 34927: jump [t0]\n      : @1214 (gas: 8)\n 34929: a0 = s1 + 0xffffffffffffffdc\n 34932: a1 = u64 [sp + 0x58]\n 34935: a0 = a1 <u a0\n 34938: a1 = u64 [sp + 0x50]\n 34941: a0 = 0 if a1 != 0\n 34943: a1 = u64 [sp + 0x48]\n 34946: a0 = 0 if a1 != 0\n 34948: jump [t0]\n      : @1215 (gas: 15)\n 34950: a3 = u64 [s1 + 0x88]\n 34954: a0 = u64 [a3 + 0x18]\n 34957: a1 = u64 [a3 + 0x10]\n 34960: a2 = u64 [a3 + 0x8]\n 34963: a3 = u64 [a3]\n 34965: a0 = reverse a0\n 34967: a4 = reverse a1\n 34969: a2 = reverse a2\n 34971: a3 = reverse a3\n 34973: a1 = u64 [s1 + 0x98]\n 34977: u64 [a1 + 0x18] = a3\n 34980: u64 [a1 + 0x10] = a2\n 34983: u64 [a1 + 0x8] = a4\n 34986: u64 [a1] = a0\n 34988: jump [t0]\n      : @1216 (gas: 11)\n 34990: a3 = u64 [s1 + 0xb8]\n 34994: a0 = u64 [a3 + 0x18]\n 34997: a1 = u64 [a3 + 0x10]\n 35000: a2 = u64 [a3 + 0x8]\n 35003: a3 = u64 [a3]\n 35005: a0 = reverse a0\n 35007: a1 = reverse a1\n 35009: a2 = reverse a2\n 35011: a3 = reverse a3\n 35013: a4 = s1 + 0x1838\n 35017: jump [t0]\n      : @1217 (gas: 10)\n 35019: a4 = 0 if a2 == 0\n 35021: a1 = u64 [s1 + 0xf8]\n 35025: a1 = a1 & ~a3\n 35028: a2 = u64 [s1 + 0x100]\n 35032: a0 = a2 & ~a0\n 35035: a2 = u64 [s1 + 0x108]\n 35039: a2 = a2 & ~a4\n 35042: a3 = u64 [s1 + 0x110]\n 35046: a3 = a3 & ~a5\n 35049: jump [t0]\n      : @1218 (gas: 8)\n 35051: u64 [a5 + 0x10] = t2\n 35054: a3 = a0\n 35056: u64 [a5 + 0x18] = a0\n 35059: u64 [s1 + 0x80] = t2\n 35063: u64 [s1 + 0xb8] = t1\n 35067: t2 = a1\n 35069: t1 = a4\n 35071: jump [t0]\n      : @1219 (gas: 13)\n 35073: a5 = a5 + a2\n 35076: a3 = a5 <u a2\n 35079: a2 = a2 <u t2\n 35082: a0 = t1 + a2\n 35085: a0 = a0 + a3\n 35088: a2 = a1 | a5\n 35091: a0 = a0 | a4\n 35094: a2 = a2 | a0\n 35097: a2 = a2 >> 0x20\n 35100: a0 = a0 | a5\n 35103: a0 = a0 << 0x20\n 35106: a0 = a0 | a2\n 35109: jump [t0]\n      : @1220 (gas: 7)\n 35111: a3 = a3 | a5\n 35114: a3 = a1 if a2 == 0\n 35117: a1 = 0xffffffffffffffff\n 35120: a0 = a1 if a4 == 0\n 35123: a3 = a1 if a4 == 0\n 35126: a5 = 0 if a2 == 0\n 35128: jump [t0]\n      : @1221 (gas: 8)\n 35130: a0 = u64 [a4 + 0x18]\n 35133: a1 = u64 [a4 + 0x20]\n 35136: a2 = u64 [a4 + 0x10]\n 35139: a3 = u64 [a4 + 0x8]\n 35142: a1 = a1 | a2\n 35145: a0 = a0 | a3\n 35148: a0 = a0 | a1\n 35151: jump [t0]\n      : @1222 (gas: 11)\n 35153: u64 [sp + 0x50] = a0\n 35156: u64 [sp + 0x48] = a2\n 35159: a0 = a0 | a2\n 35162: u64 [sp + 0x58] = a1\n 35165: a1 = a1 | s1\n 35168: a1 = a1 | a0\n 35171: a1 = a1 >> 0x20\n 35174: a0 = a0 | s1\n 35177: a0 = a0 << 0x20\n 35180: a0 = a0 | a1\n 35183: jump [t0]\n      : @1223 (gas: 11)\n 35185: a0 = reverse a0\n 35187: a3 = a0 << 0x20\n 35190: a1 = reverse a1\n 35192: a1 = a1 >> 0x20\n 35195: a3 = a3 | a1\n 35198: a0 = a0 >> 0x20\n 35201: a1 = reverse a2\n 35203: a2 = a1 << 0x20\n 35206: a0 = a0 | a2\n 35209: a1 = a1 >> 0x20\n 35212: jump [t0]\n      : @1224 (gas: 8)\n 35214: a2 = a4 >u 0\n 35216: a1 = a1 ^ 0x1\n 35219: a1 = a2 if a4 != 0\n 35222: a2 = t2 >u 0\n 35224: a3 = a5 >u 0\n 35226: a3 = a2 if a5 == 0\n 35229: a3 = a1 if a0 == 0\n 35232: jump [t0]\n      : @1225 (gas: 7)\n 35234: u64 [s1 + 1016] = 0\n 35238: u64 [s1 + 1008] = 0\n 35242: u64 [s1 + 1000] = 0\n 35246: a1 = s1 + 0x3e0\n 35250: u64 [s1 + 992] = 0x1\n 35255: a0 = 0\n 35257: jump [t0]\n      : @1226 (gas: 5)\n 35259: a0 = reverse a0\n 35261: a1 = reverse a1\n 35263: a2 = reverse a2\n 35265: a3 = reverse a3\n 35267: jump [t0]\n      : @1227 (gas: 8)\n 35269: a2 = a1 | a5\n 35272: a0 = a0 | a3\n 35275: a2 = a2 | a0\n 35278: a2 = a2 >> 0x20\n 35281: a0 = a0 | a5\n 35284: a0 = a0 << 0x20\n 35287: a0 = a0 | a2\n 35290: jump [t0]\n      : @1228 (gas: 8)\n 35292: u64 [sp + 48] = 0\n 35295: u64 [sp + 40] = 0\n 35298: u64 [sp + 32] = 0\n 35301: a0 = 0x4e487b7100000000\n 35311: a1 = sp + 0x20\n 35314: u64 [sp + 0x38] = a0\n 35317: a0 = 0\n 35319: jump [t0]\n      : @1229 (gas: 10)\n 35321: u64 [s1 + 0xd8] = a0\n 35325: u64 [s1 + 0xe0] = a1\n 35329: a0 = u64 [s1 + 0xd0]\n 35333: a0 = a0 | a1\n 35336: u64 [s1 + 0xd0] = a0\n 35340: a0 = u64 [s1 + 0x118]\n 35344: a2 = a0 + 0xffffffffffffff80\n 35347: a0 = 0xffffffffffffffff\n 35350: a1 = 0xffffffffffffffff\n 35353: jump [t0]\n      : @1230 (gas: 7)\n 35355: a0 = a0 << 0x3b\n 35358: a1 = a0 >> 0x38\n 35361: u64 [s1 + 0x118] = a1\n 35365: a2 = 0x80 - a1\n 35369: a0 = 0xffffffffffffffff\n 35372: a1 = 0xffffffffffffffff\n 35375: jump [t0]\n      : @1231 (gas: 9)\n 35377: a4 = a3 + 0x600\n 35381: a0 = u64 [a4 + 0xe8]\n 35385: a1 = u64 [a4 + 0xf0]\n 35389: a2 = u64 [a3 + 0x700]\n 35393: a3 = u64 [a4 + 0xf8]\n 35397: a0 = a0 & 0xffffffffffffff00\n 35401: a0 = a0 | 0x1\n 35404: a4 = 0x2000\n 35408: jump [t0]\n      : @1232 (gas: 8)\n 35410: t1 = u64 [a0 + 0x18]\n 35413: a2 = a2 << 0x3b\n 35416: a3 = u64 [a0 + 0x10]\n 35419: a1 = a1 >> 0x5\n 35422: a0 = a1 | a2\n 35425: t2 = reverse t1\n 35427: a2 = reverse a3\n 35429: jump [t0]\n      : @1233 (gas: 6)\n 35431: sp = s0 + 0xffffffffffffffa0\n 35434: ra = u64 [sp + 0x58]\n 35437: s0 = u64 [sp + 0x50]\n 35440: s1 = u64 [sp + 0x48]\n 35443: sp = sp + 0x60\n 35446: jump [t0]\n      : @1234 (gas: 8)\n 35448: a0 = a0 + a4\n 35451: a3 = a3 + a1\n 35454: a5 = a3 <u a1\n 35457: a0 = a0 + a5\n 35460: ra = u64 [s1 + 0xe0]\n 35464: ra = ra + a3\n 35467: a3 = ra <u a3\n 35470: jump [t0]\n      : @1235 (gas: 6)\n 35472: a1 = a2 & ~a1\n 35475: a2 = u64 [s1 + 0x108]\n 35479: a2 = a2 & ~a5\n 35482: a3 = u64 [s1 + 0x110]\n 35486: a3 = a3 & ~a4\n 35489: jump [t0]\n      : @1236 (gas: 8)\n 35491: a0 = u64 [a1 + 0x38]\n 35494: u64 [s1 + 0x130] = a0\n 35498: a0 = u64 [a1 + 0x30]\n 35501: u64 [s1 + 0x128] = a0\n 35505: a0 = u64 [a1 + 0x28]\n 35508: u64 [s1 + 0x120] = a0\n 35512: a0 = u64 [a1 + 0x20]\n 35515: jump [t0]\n      : @1237 (gas: 4)\n 35517: a0 = 0x1838\n 35521: a3 = s1 + a0\n 35524: a4 = a3 + 0x300\n 35528: jump [t0]\n      : @1238 (gas: 4)\n 35530: a0 = 0x2038\n 35534: a3 = s1 + a0\n 35537: a4 = a3 + 0x100\n 35541: jump [t0]\n      : @1239 (gas: 6)\n 35543: u64 [a1 + 1824] = 0\n 35547: u64 [a1 + 1816] = 0\n 35551: u64 [a1 + 1800] = 0x7\n 35556: a2 = a1\n 35558: a0 = 0x20\n 35561: jump [t0]\n      : @1240 (gas: 5)\n 35563: a0 = sp + 0xffffffffffffffe0\n 35566: a2 = a0 & 0xffffffffffffffe0\n 35569: u64 [s1 + 0xa8] = a2\n 35573: sp = a2\n 35575: jump [t0]\n      : @1241 (gas: 2)\n 35577: a3 = a2 & 0x40\n 35580: jump @1245 if a3 != 0\n      : @1242 (gas: 1)\n 35583: jump @1244 if a2 == 0\n      : @1243 (gas: 6)\n 35586: i32 a3 = 0x40 - a2\n 35589: a3 = a1 << a3\n 35592: a1 = a1 >> a2\n 35595: a0 = a0 >> a2\n 35598: a0 = a0 | a3\n 35601: ret\n      : @1244 (gas: 1)\n 35603: ret\n      : @1245 (gas: 4)\n 35605: a0 = a2 + 0xffffffffffffffc0\n 35608: a0 = a1 >> a0\n 35611: a1 = 0\n 35613: ret\n      : @1246 (gas: 2)\n 35615: a3 = a2 & 0x40\n 35618: jump @1250 if a3 != 0\n      : @1247 (gas: 1)\n 35621: jump @1249 if a2 == 0\n      : @1248 (gas: 6)\n 35624: i32 a3 = 0x40 - a2\n 35627: a3 = a0 >> a3\n 35630: a0 = a0 << a2\n 35633: a1 = a1 << a2\n 35636: a1 = a1 | a3\n 35639: ret\n      : @1249 (gas: 1)\n 35641: ret\n      : @1250 (gas: 4)\n 35643: a1 = a2 + 0xffffffffffffffc0\n 35646: a1 = a0 << a1\n 35649: a0 = 0\n 35651: ret\n",
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": "50564d00003ea3000000000000010700c15001c00080038120145916539c07e08b84f2a4d01fcd4413afdaa322977f4919e057646b6f18b4e37474657320746f6e3795657b5b66f1a0134da61ec6ee2db5e7f4c774dacc3b4a8a7a18a8e746229f145916539c07e08b84f2a4d01fcd4413afdaa322977f4919e057646b6f18b4e3752074656b72616db2740a156b2007e391e73b70353ad4a57c502ac123a12c34b9d111d0f19c675f303d74656b72616dfe16ec879f5b3ee8ed814f7cd3c5b28d03a146f99b6c4f37c57da9268827bf30127511563e254a6c63de9d38939beb654a8f93aa7c86df8481f8cd15e83b2a03e7db71694a978a3b276b4080ec18870cbea5b67754aad2900dd6069ea14fd9d3746e696d206461626e6172742065656669616620726566737220656566206f6e00646572697571650480fe0f000000000400000012000000200000002e00000034000000410000004c0000005b00000068000000780000008800000093000000a5000000b000000063616c6c63616c6c5f646174615f636f707963616c6c5f646174615f6c6f616463616c6c5f646174615f73697a6563616c6c65726465706f7369745f6576656e746765745f73746f72616765686173685f6b656363616b5f3235367265665f74696d655f6c65667472657475726e5f646174615f636f707972657475726e5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f646174617365745f73746f7261676576616c75655f7472616e73666572726564051302c053850463616c6cc05b85066465706c6f7906c0eaa0821b02c0458b9b00e301060318032903df03a404ac048205c60501065d06a506c8069107e7078408e80873090d0a3c0a700acd0ae10a0a0b2d0b320b600b920b410cf60ca40dba0dc80ef50e241031105d10621079107e10831088109810b5104b11b011c911ee110a12131260129012ed120213291364137f144715c015d6159e16af16f4162618341862186818801886188c189218a318d4188119f519101a361a531a5d1ab01abd1a501b6d1ba71bb71bd51b0f1c1f1c3d1c771c871ca51cdd1ced1c0b1d461d5d1d681d8e1d941eb91ee21e4f1f641f9b1fa11fd01fd61f7820a520c62084218d21ad21e621f0210a22132240225a22ba22c02245234b23a123c323f623fc2322244a24502487249024b024f62400251e254e2558256625a225a825b225bc25e025ed250b2641269f26d126d726dd2614271a279c27bf27e627452856287728b4282029bd29c629e6291f2a292a472a602a7a2afd2a3c2b762b7c2bb32bc62bfd2b032cb32cee2c192d4e2d542d7a2dae2dcc2d622ea42ee72eed2e2e2f412f782f7e2ff22f2a30473024314f316d31f3311d3259325f329b32ae32e332e9326a339b33b83368349c34bd345535c535f63508365736d536ea3616371c3740374637083872389938fd38123942394839703976391d3a423af43a983bf83b1e3c2f3cb43c063d333dfa3d273ef83e3a3f4c3fae3fe43ff13f0b403f404c406340c440d940074147414d4181418e41a341a941af41d841ec4175427b429142c7422d4353437c43904319441f4435446c44d24403453945c245c845de45134679468e46c546d24634473a476847a547b2470b4811483e4875488248d748dd489549ed494e4af94b074cb34c084d3c4d674db64dbc4dca4d114e454e6d4ea14ea74ed94e094f2f4f734f7d4f864fc34f6d50e650ec50f250135150515651ca51d8515c528d529f52f3522a5337534953735394539e53a853b553fe530c5456547854be542655b055e9558156b256c4561c5754577f57a957ca57d457de571f5858587b58a958ce58f5584959aa59b859de59395abe5af75a505bfa5b3f5c4d5c665c8a5c345da15dfe5dfa5e085f155f8a5fda5fea5f08604260b5605f62cf62d762dd62f4621863df630c641a6433645764d26401657065e365f165fe657266436749676067846704682d688568d668c469426a856af16a696b956bb36bf96b0e6c366c6b6c976cb56c4e6d986dc66d406e686e9b6e10709e70b5709f71b171e371e372537361736b738d73a573cb733474e574007526754375a375ce75ec754b767c7689761c77487867788c78ee784f799a79ec79fd79cc7a357b3f7b8a7bd07be07bfe7b397c497c677ca77cb77cf77c107d497d5d7d7a7dc37de37d177e397e477e997ea27eb07ec87eec7e267fc07ff77f0f8139818b81d28111824082568282828882ae82b482da82e0827e839483bf83c583ef83f5831f8425846c848284ae84b484d984df8404850a85348540855b856485aa876e978a2098aa20977b2098bb20c89b0bc9ba0a979b019abbaeab20ae873751094ec87909647a017c8b95880195ac0178ab64caab9cf42836510934c87909647a017c8b95880195ac0178ab64caab9cf4281c51091a839aff01c8a80b7cbb9599ffc8a70c78cb83aaff5209f0320039082801025108dc1c330750010383770a0c28cf1c9511f07b10087b156489647533082064975010029d047c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b57821008821595111032009511d87b10207b15187b161082897b19088289087b1982851082861833082050100455036f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832009511a07b10587b15507b16489515608411e06476828718828910828a0882886f776f996faa6f887b18187b1a107b19087b17491138491130491128491120481140208318831a20831b403309ff33073300060a0601821738821830821928821a20501208a986007b6a187b69107b68087b6750120a44870032009511a07b10587b15509515608411e08272827a08827b108277188283828908828c108288186f746fbb6faa6f276f826fcc6f996f387b17187b1a107b1b087b147b18387b19307b1c287b12208318831a203309ff330b2033070a0d9551a08210588215509511603200951160ff7b1098007b1590007b1688009515a0008411e082ab7b1b3882ab087b1b3082ab107b1b2882aa187b1a20829a7b1a18829a087b1a10829a107b1a088299187b19648650100c590182186f888219086f99821a106faa821b186fbb7b1b587b1a507b19487b18408218206f888219286f99821a306faa821b386fbb7b1b787b1a707b19687b18608379836a8317403308020a05955160ff8210980082159000821688009511a0003200951120ff7b10d8007b15d0007b16c8009515e0008411e082bc7b1c4082bc087b1c4882bc107b1c5082bb187b1b5833020e82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b19107b18383300102892007b18385010108c006f687b187882186f887b18708218086f887b18688218106f887b18608218186f887b1898008218206f887b1890008218286f887b1888008218306f887b1880008218406f887b18b8008218486f887b18b0008218506f887b18a8008218586f887b18a0008379811a388317603308030a05955120ff8210d8008215d0008216c8009511e00032008b7910520931c8780883881f8488e05638000001253309240102390a240102ae8a093d082401020133083001028377c887073200009511f07b10087b158475010a03013d0720010251050750101248330014951110fe7b10e8017b15e0017b16d8019515f001951130df8411e06416956938184929a000492998004929880080003307409568c018492990003300c60028fcfb951110fe7b10e8017b15e0017b16d8019515f0019511f0f88411e0641649261806492610064926000680003307409568000649260806501016c3fb49263806492630064926280649262006836720060a0e01956b000682b73082b83882b92882ba20d49808d4a707d4870751070628b71438092001024926d8054926d0054926c8059567e0059568c0057b6918017b69c005501018be54956b000582baf80082b9f00082b8e80082b7e000956b00017bba107bb8d48a0ad49708d4a8089888207bb908d4a909979920d498085108062855147b67f8008268180150101a93fe83778168180133090a01018268180156183f072843149567a0058268f80050101cc2f98267b8058262b005826ba8057b67f000d4720988ba01949a520a06282814826aa0058263f80082641801c83404d83408c8a3037b631801d8a30a82690001c89b07649cc8a703d3b309d8b30bda9a0b64c9c88c0cd89c09da880982680801c8820ad82a00826710018262f000c87202c82000c89802c8ab0bd8ab09c8900ad88208c878087b64f0007b6440057b6ce8007b6c480582671801956c00057bc7607b6218017b6250057b68e0007bc8587b6368057bcb709567800595686005956940057bca7850101efe548269f800956b000182b70882b810d487071408e0ffffff00000000d8890882ba94a89478520806283213826798057b67a000826790057b679800826788057b67a800826780057b67b00083982095672005501020a3f8826238058268300582692805d4280a889b0194ab520b06281d13826a2005826bf800c8ab0bd8ab0a826c0001c89c0cc8ac0cd39c07d89c09da7a0982670801c88707c87909d8790ad8870782681001c88202c82707c87a0a8267f0007b67c0048267e8007b67c8047b6be00482671801956b00047bb7d0008267e0007bb7d8007bbce8007bb9f000956700059568e0049569c0047bbaf8005010220b54956800058287187b67708287107b67788287087b67800082877b67880033073001037b67180183777b6710010a0401826918018097108298829908d48707d49707520706286212492658064926500649264806492640069567a00495684006501024cef98267a0047b6700018267a8047b67f8008267b8047b67f0008267b0047b670801826710010a048269180182970881981082996f77977a206f88988820d4a8089877206f99979a20d4a707989920826a080198aa2097aa20d4a90949267806492670064926680649266006826af0007b6a98067b6990067b6788067b6880069567600695688006501026bdf9826710010a04956b000182b91882970881981082996f7a97a7206f88988820d4780298aa206f99979820d4a80898992082ba0897aa2098aa2049265804492678047b6a70048267f8007b67680482b77b6760043a0a0000023a0b0800023a0c1000023a071800027b6a9804956a00047bab90007bac88007ba780007ba9507ba84895698004956a6004956b40047b6240043307330850102838fa4926b8064926b0064926a8064926a006044926d8064926d0064926c8064926c006019567a0069568c00650102af4f88268b000826b9800d4b8078269a800826aa000d4a909d49707987720d4b909979920d497075107062886109567200450102c1af695670004827a388278308279288ea78e8bdba70b7b69d0008e977b68607b6ac800d4a8087b67587b6b90007b68c000db8b0751070628e710826720047b67684926f8064926f0064926e8064926e00601956700049568e00650102ee9f7956b000482b71082b80882b982ba18501230707d88920184807fd27c04d23c0bdb9800880820d2ac0c648994b9d4c4079479aa920628f210501232897e8267688877207b67b800510a13027b6bf0007b60f8007b6c00017b6410015012347a7e50103692f6390824010256181f0b200324010220019517e08479e07b69080164913307300102837783993308203300380a070182676895781fd87807826cd000c87c09d8c90ada770a826b60c8ba0a7b6ae80097aa3b989b05d4ab0b8267080150123ac57e8268b80094c8826ac00094a8948b9487c87402d84207c8790cc8cb0b7b6b1801d39b0cd89b0adac70a7b6ae0008267f80095701fd8700b826af000c8ba07d8a70cdabb0c82631001c8c303973b3b987a05d4ba0a97773b980b05d4b707c847077b67f800d847076424c8790bc8ab0bd39b0a7b6bf000d89b09daa709826be800826760d87b07826ac800c8a70798ba05977b3bd4ba0a826b080182b282bb08987705948a94876fb86f2b50123c3c7ec8a70282671001d87307826a0001c8a707983a05977c3bd4ca0a987705c8b707826b1801c88a0ad88a08c88707c8a9097b69e800d8a908c887077b67e0009517e08473e064317b63d800018267f800d874078269f000d39b08d89b09da8709826ce800d8c007826ae000d3a208d8a20ada870ad3c007d48707da790a7b347b3b087b30107b3218510a5f492618074926100749260807492600079568000764377b6410017b6b18017b6208017b60000150103e3af68263d80082620801826b180182641001954401884701c87b0bd4b40788770182680001c88707d88708c8820264702868ff8267b800857701826cd000826858dbc807826890008269c000db98078264c800d44c0982686098833f97440198c23f978a017b6a58826a6898a03f97cc0197ab0151074b027b69207b6c407b62487b60287b64307b63387b6b5084aae07b6a90004926b8034926b0034926a8039568a0034926a00301330750104020f49517e08477e07b67f000647133082033075010427ef79518e08488e07b68e8006481837783893308200a074926180120330c4926100149260801330b33004926f80049260001826ae80082a71882a81082a90882a26f736f886f9a6f2964928267f0007b79187b6ad0007b7a107b68e8007b7808643a7b7301642464a3826790007b6be000d87b07857b017b60d800940b01826700018269f800d49707947b018268b00082671801c87808826aa80064c2c8ca0a8269980082671001c879098267a000826c0801c8c707520b6901826b1801d8b80bc8ba00642ad32002d8a00cda2b0cc89c0cd89c02826b1001d8b909c89707c82707d4c809d47007d47909989920d4c707977720d497077b63c8007b64c0005207330c9567e0017b6ab800501044c2f18267f8018268f0018269e801826ae001956b00077bb7387bb8307bb9287bba20956820078267f0005010463bf48260c8009500018807018262e800c87202d420078877018268d000c87803d883088267c000c88707826818019589207b69c800d8890a8268b800c8a8097b69c000d8890bdaaa0b82681001c8b804d8840b82680801c8b8087b6808018268e000958b20d88b0c8269d800c8c908d89809dacc09826af800c8a909d8a90c826a0001c8ca0a7b6a0001642a7b6ae800826cf0007bca08640a7bc07bc31064727bc7187b63d0008267c8007b671801826cc0007b64100164807b69f800286dfed48a07d497078269b00052074c017b6b50492600014926f800492608014926100128ae016420826368826b9000d33b0b826c60d4cb0b826c20d4cb0b826c48826240510bc700826b1801d8b80bc8ba0ad30a02d80a0cda2b0cc89c0cd89c02826b1001d8b909c89707c82707501248a6795207c60a9567800350104a59f095680003828798007b671001828790007b670801828788007b670001828780007b67f80082676850124cc37950104ec27a7b67e8007b68d0003307ff3308ff82691801501050857a50125280795010547b7a501256cc768267f800e0a70782690001501258fd79956b00077bba587bb9507bb8487bb740956840078267f00050105a7bf2826240826c4801826738826830d48707826858d4c808826928d49209826a5095aa01492678074926700749266807956c0007491c60017bca80007bc988007bc890007bc7980095676007956880073300682825f28267a00082689800d487071408e0ffffff00000000d88908826aa80094a894785108c1097b6b508398209567c0037b63387b64307b60287b62487b6c4050105c3fef826c40826248826028826430826338826a68956800038287d800956900017b97108287d0007b97088287c8007b67f8008287c0007b9701826758d427077b67f000d434077b67e800d40c077b67e00097a8037b6818018d8980003307ff3308ff50105e74797b67c0007b68d8008267688a79033307ff3308ff50106035797b67d0007b68c8008268c000d487077b67c000826718018379803307ff3308ff5010621079826b180188b98000826ac000db9a07826cc800826ad8005012642277826bd000501266bd76826b50d4b707826be000d4b808826be800d4ba0a826bf000d4b909956c0007492ca000017bc9d0007bcad8007bc8c8007bc7c0004926b8074926b0074926a8079567a0079568c007501068d0f082688800826a78d4a80782698000826b70d4b909d49707987720d4a909979920d49707520767089567600350106afaed95670003827a788279708278688ea78e9bdba70b7b6898008e877b6990007b6a68d4a9097b67b8007b6bc0007b69d000db9b0752079909826760037b67a0004926f8074926f0074926e8074926e00702956740039568e00750106cc9ef956b000382b75082b84882b94082ba5850126e4f7588920184807fd27c04d23c0bdb9800880820d2ac0c648994b9d4c4079479ab92a2095012706a768267a0008877207b67c800510a44027b6bf0007b60f8007b6c00017b641001492638034926300349262803956820034926200302330750107260ee390824010256181f0b200324010220019517e08479e07b69080164913307300102837783993308200a078267a00095781fd87807826c9800c87c09d8c90ada770a826b9000c8ba0a7b6ae80097aa3b989b05d4ab0b8267080182721897993b827710988805d489096f246f778268c80094c8826ad00094a8948b9489c89402d84209c8970cc8cb0b7b6b1801d37b0cd87b0adac90a7b6ae0008269f80095901fd8900b826af000c8ba09d8a90cdabb0c82631001c8c303973b3b989a05d4ba0a97993b980b05d4b909c849097b69f800d8490b6424c8b709c8a909d3790a7b69f000d87909daab09826be80082679000d87b07826a68c8a70798ba05977b3bd4ba0a826b080182b282bb08987705948a94876fb86f2b501274fe75c8a70282671001d87307826a0001c8a707983a05977c3bd4ca0a987705c8b707826b1801c88a0ad88a08c88707c8a9097b69e800d8a908c887077b67e0009517e08473e064317b63d800018267f800d874078269f000d39b08d89b09da8709826ce800d8c007826ae000d3a208d8a20ada870ad3c007d48707da790a7b347b3b087b30107b3218510a7295670010492718f895670010492710f895670010492708f895670010492700f89568ff0795880164377b6410017b6b18017b6208017b600001501076e9ed8263d80082620801826b180182641001954401884701c87b0bd4b40788770182680001c88707d88708c8820264702855ff8267c800857701826c98008268b800dbc8078268c0008269d000db980751071b028267a0008477e07b67a8004926f8024926f0024926e8029568e0024926e00202330750107804ec9517e08477e07b6700016471330820330750107a62ef9518e08488e07b68f8006481837783893308200a07492610012049260801330349261801330b330c3309330a8267f80082741882781082700882726f446f886f006f227b62e800826700017b72187b60c0007b70107b68f0007b780864427b740164208267a8007b6bd000d87b07857b017b6cc80094cb017b6af8007b69e000d4a907947b018267880082681001c87808826a800082620801c8a2028264787b63d800c83409826370826c1801c8c303520b6001d87807c8720bd3ab02d8ab0cda270c50127c68727b60b800520748049567800250107edbe9956b000282b7980082b8900082b9880082ba8000956b00107bb738f8956700107b7830f8956700107b7928f8956700107b7a20f89568ff0795882182670001502080003dec826ab80095aa0188a7018262f000c87202d42a078877018268c000c87803d883088267e800c88707826810019589207b69b800d8890882690801c8890b7b6bb000d89b0bda880b8268d800c8b804d8840b82681801c8b8087b6818018268d000958b20d88b0c8269c800c8c908d89809dacc09826ce000c8c909d8c90c8260f800c8c0007b62f000826c00017bc20864a27bca643a7bca107b67e8007bc7187b6ac0008267b8007b671001640a8267b0007b6708016443648c288afe826ba00082699000d49b07826a68d4ac08d48707826288008263800082687852078a01492600014926f800492608014926100128cd01826ba800826ca000d3cb0b82609000d40b0b7b6b1801826c9800826b68d4bc0c826b1801d4cb0b510bcc00d87807c8720bd3ab02d8ab0cda270c50228200e1705207c4029567c0025020840057e8956800028287d8007b6710018287d0007b6708018287c8007b67f8008287c0007b67f0008267a00050228600bf7150208800bd727b67e8007b68d0003307ff3308ff8269180150208a007f7250228c00797150208e00737250229000c36e8267f000e0a7078269f80050229200f371956b00107bba58f8956a00107ba950f8956900107b9848f8956800107b8740f89568ff0795884182670001502094005dea826090000198073f826868978801d48707826a980098a83f970901d49808826ba00098b93f97aa01d4a90997ba0195aa01956b0010492b78f8956b0010492b70f8956b0010492b68f8956c0010492c60f802956b00107bba80f8956a00107ba988f89569ff07959991007b987b97089567ff079577619568ff07958881003300a20028d5e9826770d487071408e0ffffff00000000d882089438947851087a0183282095670003502096000ae7826a6882699000826c9800826ba000956800038287187b6710018287107b6708018287087b67f80082877b6700010198c73f979801d487077b67f00098973f97a801d487077b67e80098b73f97c801d487077b67e00097b7017b67d80097b8037b6818018d8980003307ff3308ff5020980030717b67b8007b68d0008267a0008a79033307ff3308ff50209a00ef707b67c8007b68c0008268b800d487077b67b800826718018379803307ff3308ff50209c00c970826b180188b98000826ab800db9a07826cc000826ad00050229e00da6e826bc8005022a000746e826bd800d4b707826be000d4b808826be800d4ba0a826bf000d4b909956cff0795cc9100491c10027bc9407bca487bc8387bc730491c28491c20491c189567ff079577a1009568ff079588c1005020a20081e89567a0023308405020a400cee5956b000282bab80082b8b00082b9a80082b7a000d49a0ad48709d4a909989920d4a808978820d4980851085602003308300102838833070133090a0b28313308300102838833070133090a0b28213308300102838833070133090a0b28113308300102838833070133090a0b01492650014926480149264001140700000000f7bd4f1e956840017b67580133075020a60075e649263801492630014926280133070495682001492620015020a80058e6390824010256183f12200324010240330830010228a6013308300102289e014926900149268801492680013302aa00140700000000717b484e01956880017b67980133075020ac000ee64926780149267001492660014133070495686001492668015020ae00f0e5390824010256183f122003240102403308300102283e0133083001022836014926d0014926c8014926c0013302b000140700000000717b484e019568c0017b67d80133075020b200a6e54926b8014926b0014926a001223307049568a0014926a8015020b40088e5390824010256183f12200324010240330830010228d600330830010228ce004926300249262802492620023302b600140700000000717b484e01956820027b67380233075020b8003ee54926180249261002492600024133070495680002492608025020ba0020e5390824010256183f112003240102403308300102286e330830010228674926700249266802492660023302bc00140700000000717b484e01956860027b67780233075020be00d8e44926580249265002492640022233070495684002492648025020c000bae4390824010256183f112003240102403308300102280833083001020183883307013309240a0b7b6718013300c20028fae77b6718015020c200f3e78377330833090a012822e38267180133085020c400dce78378330733090a0b28c5fd33072001027b67b80039072001025517040728a636956700208377e0f833083300c8000a0201956938188197c40052470556f5800a28571651475bcba58d6a02956a38205247419bd8950a28551051477d6d18b94f035247273d5dd80a28af195147c8c738e7680b51477775d9f7c504523717a3750928c11c514703defd06c40c5247b56d96130a289d1f5247317e42270a288c125247f7be092c0a28a91b5247301bcb2c0a28ee165147b5d6024d9b0852478cceb8610a28611152471e2152630a28dc0d51475fa8ce6d0a28b8144929a005492998054929900549298805956700208377c0fd0a0e01956a381895ab000582b7980082b8a00082b9900082ba8800d49808d4a707d4870751070628d62a8267b80081775617230728da2a9567ff079577c1055020ca00b4419567ff07957739827890057b68b000827888057b68b800807798057b67a8005020cc00305f8267b8008268a800d487078268b000d4870751070628a02a9567ff07957741053308405020ce00a9e1956aff0795aa3982a2200595a80005828c18828b10828708d42b09d4c708d49808988820d4c909979920d4980851080628392a64a9492af804492af004492ae804140a00000000a079c3089568ff07958821057b9a00057b67b8007b6bb0007b62a0007b6ca8005020d00076e28268b8008267a800826aa000d47a0a5022d200046752070628e4298387049569ff079599394929e0044929d8044929c804209568ff07958801054929d0047b6aa8007b6ba0005020d4002ae25022d600576852070628a729838724956aff0795aa39492ac004492ab804492aa804089568ff079588e104492ab0045020d800f5e15022da0048665207062872298397443a08900002956aff0795aa39492a9804492a90047ba8a0049568ff079588c104492a880433000e0228b8e14929a007492998074929900749298807956700208377c00a0e01956a381895ac000782c7980082c8a00082c9900064ab82ca8800d49808d4a707d48707510706281f2a8267b80081775617030728232a492bc007492bb807492bb007492ba807956720109568e01f5020dc003fe295673810957900ff8298f8007b68a8008298f0007b68b8008297e8007b67b000956700103308405020de00e6df956aff0795aa3995ac000782cbe00082c8d80082c9d00082c7c8005022e000df665108062882288268a800978820988920492ac0078268b00095ab00077bb8a8008268b8007bb8b0009568ff079588e1077bb9b8007b67b8003300fe0128bde0491a20491a18491a10491a08956700208377400a0e01956a382082a71882a82082a91082aa08d49808d4a707d487075107062854298267b800817756172307285829956700208377603308040a02956a382082a72882a83082a93882aa40956b381095bc00027bca80007bc9787bc8709568a0127bc76833075020e20041e03302e400956838100149286002492858024928480206648933072095688012492950025020e60018e0390824010256183f0b200324010240019517e08479e07b69b80064913307300102837783993308403300e8000a07826ab8003302ea0028a064826ab8005022ea0099647bba607bb9587bb8507bb74895676012956880205020ec00ade03302ee009568381001958900028297407b67b8008297387b67b0008297307b67a8008297287b67a000956740123308405020f0004bde956a381095ac000282c72082c81882c91082cb085022f200ba6551070628ee268267a00095a800017b87e8008267a8007b87f0008267b0007b87f800956820128267b8007ba7000264b77b6bb8003300fe01282ddf492aa001492a9801492a9001492a8801956700208377c0013300f4000a0e3302f6002813685022f600106882b7980082b8a00082b9900082ba8800d49808d4a707d4870751070628d1278267b80081775617430728d527956700208377e0013308040a0295683820958900018297c0007b67a0008297b8007b67a8008297b0007b67b0008297a8007b67b8009517e08477e07b679800647195670020837700023308243300f8000a023302fa002888675022fa00856782b7e00082b8d80082b9d00082bac8007b6768826b98007bb7187b68607bb8107b69587bb9087b6a507bba956938188267a0007b9780008267a8007b97788267b0007b97709567a0188268b8007b98685020fc001c5995673820492700024927f8014927f0014927e80195678018956820225020fe00f4de956838188287507b6788008287487b6780008087587b677833073001037b67900083777b6770330000010a043302020128cb6250220201c86251075a95683820492820024928180249281002492808020995676018956840225020040195de956738188278307b6888008278287b6880008077387b6778826770330006010a043302080128776250220801746251070628031c956938108267b800959a00077ba7688267b0007ba7708267a8007ba7789568a0178267a0007ba78000330750200a013edd33020c019568381001492860074928580749284807066489330720956880174929500750200e0115dd3308240102390724010256173f0b200324010240019517e08479e07b69800064913307300102837783997b6888003308407b679000330010010a07826a800033021201289061826a800050221201896195bc00027bca407bc9387bc8307bc72895676022826898005020140113de956938108267a000959a00077ba7408267a8007ba7388267b0007ba730956860178267b8007ba72833075020160177dc95683810502218018565956840174929100750201a015fdc826888009517e08477e07b6798006471818756173f08480840019517e08477e07b678800647183793308408267900033001c010a0733021e0128e76250221e01e462956720175020200105dd956a3810502222017b6483bb38c86b0b95bc00027bc9607bca587bc8507bc74895688022826798005020240151dd95670017330840502026019eda956a381095ac000682c7e00082c8d80082c9d00082cbc800502228010962510706283d2382675095a900067b97a8008267587b97b0008267607b97b8009568e0168267687b97c00064b77b6b980050202a0184db8267a000956b381095bc00067bc780008267a8007bc7788267b0007bc7703a072800023a083000023a09380002826ab8007bca687bc7a0007bc898007bc990003a074000023308209569c016956aa0167bc788008267980050202c01fbdc33078268900033090a0b28912d4929200349291803492910034929080395670020837740fb33002e010a0e3302300128ef6350223001ec6350223201636251070628ef238267b80081775617430728f3239517e08477e07b67b800647195670020837760fb330804330034010a023302360128ac6350223601a96382b74082b83882b93082ba287b679000826bb8007bb7187b6888007bb8107b6980007bb9087b6a787bba95670020837780fb3308240a02019569381882985803829a600314070000000001000000d38707d4a7077b68b0009888208888017b6aa80094a89378520806286e23829750037b679800829748037b67a000502038014d5695683818492880034928780349287003492868030a9567a01b8268b80050203a0172db956738184927a0034927980349279003492788030b9567ff07957741029568c01b50203c01d1da9568ff0795883980871c02828820029777208269b000d497078269a800d49808956938184929c0034929b8034929b003959b0003492ba8000b826a98007bbad000826aa0007bbac8007bb8e0007bb7d8009567e01b9568001c50203e01ecda9567ff07957721023308405020400135d8956aff0795aa3982a7000295ac000182c8f80082c9f00082cbe800502242019d5f51070628d12082677895a900017b97c800826780007b97d000826788007b97d8009568ff0795880102826790007b97e00064b77b6bb8005020440111d98267a800956bff0795bb3995bc00017bc7a0008267b0007bc79800826798007bc790003a07b800023a08c000023a09c80002826aa0007bca88007bc7c0007bc8b8007bc9b0003a07d000023308209569ff079599e101956aff0795aac1017bc7a8008267b800502046017ada33083001028388330733090a0b280d2b492ac000492ab800492ab000492aa800956700208377e0000a0e01956a382082a7b80082a8c00082a9b00082aaa800d49808d4a707d487075107062897218267b800817756172307289b2195670020837700013308040a02956a382082a7c80082a8d00082a9d80082aae000956b381095bc00057bca80007bc9787bc8709568a0157bc76833075020480108d833024a019568381001492860054928580549284805076489330720956880154929500550204c01dfd7390824010256183f0b200324010240019517e08479e07b69b800649133073001028377839933084033004e010a07826ab8003302500128675c826ab80050225001605c7bba00017bb9f8007bb8f0007bb7e80095676015956820215020520170d895673810827728057b67b80095674015330840502054012bd6956a381095ac000582cb2082c81882c91082c708502256012b5d51080628ce1e7c68b8008e88492a0005492af8047ba8e80495682015492af0047b67b8003300fe01281dd74929400149293801492930014929280195670020837760f90a0e01956a381895ab000182b73882b84082b93082ba28d49808d4a707d487075107062844208267b80081775617030728482095678004330840502058018ed5826798047b6718826790047b6720826788047b6728826780047b6730956838184928600149285801492850014928480101956760049568801950205a017bd7956b000482b77882b87082b96882ba607b67b0007bb7387b68a8007bb8307b69a0007bb92895674004956820047b6ab8007bba2050205c01ef3650225e01405c51080628cc1d956c000482c95882ca5082c84882cb407b6b607bcb7b68707bc8087b6a687bca10956800047b69787bc9185020600112d6826ab80084a70151070628e615502262016d5b52080628821d84a800ff83b720826aa000956900037b9a88007b9880008268a8007b98900095688003826ab0007b9a980050206401c8d5502266013a5a28851a4929c0044929b8044929b0044929a804956700208377e0fc0a0e01956a381895ab000482b7b80082b8c00082b9b00082baa800d49808d4a707d4870751070628011f8267b80081775617230728051f95670020837700fd3308040a0295673818957800048289c8007b69b800828ad0007b6ab000828bd8007b6ba800828ce0007b6ca0009568ff079588397b8c0004958c00037bcbf8007bcaf0009567ff07957721047bc9e800502068010a509567ff079577398268a000957a00037ba8e0008268a8007ba8d8008268b0007ba8d0009568ff07958801048269b8007ba9c800330750206a01d7d49568ff079588394928c0034928b8034928a8030864893307209568ff079588e1034929b00350206c01acd4390824010256183f0b200324010240019517e08479e07b69b800649133073001028377839933084033006e010a073302700128635b50227001605b7bba000595ba00047ba9f8007ba8f0007ba7e8009567ff079577c1039568201d502072013dd59568ff0795883995890003829798007b67a800829790007b67b800829788007b67b0009567ff079577a10333084050207401ddd2956aff0795aa3995ac000382cb800082c87882c97082c76850227601d959510806287c1b8268a800978820988920492a60038268b00095ab00037bb8488268b8007bb8509568ff07958881037bb9587b67b8003300fe0128bad34929e0074929d8074929d0074929c8079567002083770a0e01956a381895ab000782b7d80082b8e00082b9d00082bac800d49808d4a707d4870751070628231d8267b80081775617030728271d956700123308405020780129d295683810958900018297e0007b67188297d8007b67208297d0007b67288297c8007b67309568382049084918f84918f04918e8029567e0119568202050207a0113d4956b381095bc000182c7c00082c8b80082c9b00082caa8007b67b0007bc780007b68a8007bc8787b69a0007bc9709567c0119568a0117b6ab8007bca6850207c017e3350227e01cf58510806285b1a956c381082c9a00182ca980182c8900182cb88017b6b607bcb48017b687095cb00017bb8507b6a687bba58956880117b69787bb9605020800197d2826ab80084a70151070628fa1350228201f25752080628071a84a800ff83b72095693810826aa0007b9ad0007b98c8008268a8007b98d80095680011826ab0007b9ae000502084014dd250228601bf5628e41749298004492978044929700449296804956700208377a0fc0a0e01956a381895ac000482c77882c8800082c97064ab82ca68d49808d4a707d4870751070628cb1b8267b80081775617030728cf1b492ba004492b9804492b9004492b8804049567ff07957761039568c01c50208801c5d29568ff07958839958900038297407b67b8008297387b67b0008297307b67a8008297287b67a0009567ff079577410333084050208a0161d0956aff0795aa3995ac000382c72082c81882c91082cb0850228c01cd575107062801198267a00095a800027b87e8008267a8007b87f0008267b0007b87f8009568ff07958821038267b8007ba7000364b77b6bb8003300fe01283cd14929c0014929b8014929b0014929a801956700208377e0f90a0e01956a381895ab000182b7b80082b8c00082b9b00082baa800d49808d4a707d4870751070628e71a8267b80081775617230728eb1a95670020837700fa3308040a0295673818957b000182b8c8007b68b80082b9d0007b69b00082bad8007b6aa80082b7e0007b67a0007b6738077b6a30077b692807956720077b68200750208e01994b8267a000956900077b97188267a8007b97108267b0007b9708956800078267b8007b9733075020900176d04926f8064926f0064926e006053307209568e0064926e8065020920158d09517e08477e07b67b80064713309240102390724010256173f0b200324010240017b69a8009517e08479e07b69b00064913307300102837783993308407b67a0000a07826ab00082a71882a81082a90882aa6f7b6f886f996fa77b67b000826ab8007ba7187b6988007ba9107b6890007ba8087b6b98007bab9567c0063308405020940198ce8267d8067b67188267d0067b67208267c8067b67288267c0067b67309567a0068268b800502096019ad0956b000682b7b80082b8b00082b9a80082baa0007b6780007bb7787b68587bb8707b69507bb96895678006956860067b6ab8007bba60502098010c3050229a015d5551080628e916956c000682c9980082ca900082c8880082cb80007b6b607bcb407b68707bc8487b6a687bca50956840067b69787bc95850209c012acf826ab80084a70151070628321250229e018554520806289a1684a800ff83b720826a50956900057b9ac8007b98c0008268587b98d0009568c005826a80007b9ad8005020a001e2ce5022a2015453284f155147360c5b760a28db184929a006492998064929900649298806956700208377c0fe0a0e01956a381895ac000682c7980082c8a00082c9900064ab82ca8800d49808d4a707d4870751070628e5188267b80081775617030728e918492bc006492bb806492bb006492ba8060b9567ff079577a1069568e01e5020a4014dcf9568ff07958839958900068297787b67a8008297707b67b8008297687b67b0009567ff07957781063308405020a601f0cc956aff0795aa3995ac000682cb6082c85882c95082c7485022a801ed535108062890158268a800978820988920492a40068268b00095ab00067bb8288268b8007bb8309568ff07958861067bb9387b67b8003300fe0128cecd4929e0064929d8064929d0064929c80695670020837700ff0a0e01956a381895ac000682c7d80082c8e00082c9d00064ab82cac800d49808d4a707d487075107062809188267b800817856180307280d18492b0007492bf806492bf006492be806039567ff07957701079568201f5020aa014fce9568ff07958839958900068297d8007b67a8008297d0007b67b8008297c8007b67b0009567ff079577e1063308405020ac01efcb956aff0795aa3995ac000682cbc00082c8b80082c9b00082c7a8005022ae01e852510806288b148268a800978820988920492aa0068268b00095ab00067bb888008268b8007bb890009568ff079588c1067bb998007b67b8003300fe0128c6cc4929400249293802492930024929280295670020837760fa0a0e01956a381895ab000282b73882b84082b93082ba28d49808d4a707d487075107062829178267b800817756174307282d179567ff079577a1015020b001f32a9568ff07958839958900018297787b67a8008297707b67b0008297687b67b80095670020837780fa3308240a0295683818958900028297607b67688297587b67708297507b67788297487b678000492880024928780249287002491968039567ff07957781019568a01a5020b201f2cc9568ff07958839828750017b67a000828748017b679800808758017b67900033073001037b67880083773300b4010a04018269880082970882988199105022b601a24f82699000d3980882699800d39707d487078268a000d3a808d48707510706285c168267a800977720987a208267b0008268b800d48707d4a707510706288e169567ff079577213308405020b80134ca9567ff07957739827b827cf895670010827a28f895670010827720f8d4ba09d4c708d49808988820d4c909979920d4980851080628c01295680010492810f895680010492808f895680010492800f8140900000000a079c3089568ff07958801956200107b2918f87b67b8007b6ab0007b6ba8007b6ca0005020ba01f0ca8268b8008267a800826aa000d47a0a5022bc017e4f520706285e128387044926f8074926f0074926e007209568e0074926e8077b6aa8007b6ba0005020be01afca5022c001dc50520706282c128387244926d8074926d0074926c007049568c0074926c8075020c20185ca5022c401d84e5207062802128397444926b0074926a807140800000000303d6f747b68b8079568a0074926a00733000e02284eca8267b800817756172307285218956700208377a0003308040a0201956c382082c7800082c87882c970d4780a889b0194ab520b0628391882ca68826bb80080b295ac04d8ac0ac8a90bd89b09daaa09c88909d88908c8870a956738104927800449277804492770047b726804957800047b8c88007b8b90007b899800647b9567e0149568c0149569a0147bbaa0045020c601b32895683810958900048297e0007b67b0008297d8007b67a8008297d0007b67a0008297c8007b6798008297c0007b6790008297b8007b67788297b0007b6780008297a8007b6788009568382049288800034928a0004928980049289000956780149568c0205020c80145ca956b381080b7580482b8480482b95004d48707d4970752070106956740133308405020ca01f2c7956938108292200395980003828c18828b10828708d42b0ad4c708d4a808988820d4ca0a97aa20d4a8085108062885104929f8024929f0024929e802140a00000000a079c308956820137b9a00037b67b8007b6bb0007b62a0007b6ca8005020cc01c8c88268b8008267a800826aa000d47a0a5022ce01564d520706283610838704956938104929e0024929d8024929c80220956800134929d0027b6aa8007b6ba0005020d00183c85022d201b04e520706280010838724956a3810492ac002492ab802492aa8020c9568e012492ab0025020d40155c85022d601a84c52070628d20f8397443a08680002956a3810492a90027ba8a0021408000000007465736e7ba898029568c012492a880233000e022815c8492900024929f8014929f0014929e80195670020837720fa0a0e01956a381895ac000182c7f80082a8000282c9f00064ab82cae800d49808d4a707d487075107062804168267b800817756170307280816492b2002492b1802492b1002492b080209956780079568401a5020d8019ac8826790077b67a800826788077b67b800826780077b67b000956760073308405020da0149c6956b000782ba7882b87082b96882b760d49a0ad48709d4a909989920d4a808978820d4980851080628e10e8268a800978820988920492658078268b000956a00077ba8408268b8007ba848956840077ba9507b67b8003300fe012823c74929e0004929d8004929d0004929c80095670020837700f90a0e01956a381882a7d80082a8e00082a9d00082aac800d49808d4a707d48707510706283a158267b800817756174307283e159567a0025020dc015425956800028287b8007b6798008287b0007b67a0008287a8007b67a8008287a0007b67b00095670020837720f93308240a0201956c381882c7000182c8f80082c9f000d4780a889b0194ab520b0628f51482cae800826bb80080b295ac04d8ac0ac8a90bd89b09daaa09c88909d88908c8870a4926380249263002492628027b6220027b6c40027b6b48027b6950029567600295684002956920027b6a58025020de012325826798027b679000826790027b678800826788027b678000826780027b6778826778027b6770826770027b6758826768027b6760826760027b6768956738184927200149271801492710016478492808010395670002956840195020e001bfc6826708027b6750826700027b6748806710027b674033073001037b673883773300e2010a040182693882970882988199105022e4017b49826940d39808826948d39707d48707826850d3a808d4870751070628fd138267b80080774926780149267001492668017b6760018267587b67b0018267607b67a8018267687b67a0018267707b67b8018267787b678001826780007b678801826788007b6790019567c0019568a00195698001956a6001826b90007b6b98015020e601d62a8267c0018268c8018269d001826ad8017b6a18017b6910017b6808017b670001826798007b6738018267a0007b6730018267a8007b672801956740019568200195690001826ab0007b6a20015020e801852d956800018287587b67b8008287507b67b0008287487b67a8008287407b67a0009567e0003308405020ea0158c38267f8008268f0008269e800826ae000d49707d48a09d47909989920d48707977720d497075207f30b8267a0007b67c0008267a8007b67c8008267b0007b67d0009568c0008267b8007b67d80064a77b6ab8003300fe012835c449298001492978014929700149296801956700208377a0f90a0e01956a381895ac000182c77882c8800082c97064ab82ca68d49808d4a707d4870751070628c9128267b80081775617030728cd12492ba001492b9801492b9001492b88010a9567e0049568c0195020ec01bdc48267f8047b67b8008267f0047b67b0008267e8047b67a8008267e0047b67a0009567c0043308405020ee0164c2956b000482b7d80082b8d00082b9c80082bac000d49707d48a09d47909989920d48707977720d497075207fb0a8267a000956900047b97a0008267a8007b97a8008267b0007b97b0009568a0048267b8007b97b80064a77b6ab8003300fe012839c38267b8008077492be003492bd803492bd00395b800037b87c8008267787bb71804826780007bb71004826788007bb70804826790007bb72004826798007b87e8008267a0007b87f0008267a8007b87f800956760149568401495692014956a0014826cb0007bbc00045020f001922895673810827728047b67b80095673810827730047b67b00095673810827738047b67a80095673810827740047b67a00033073001037b67980083773300f2010a04018269980082970881981082995022f4012b4a95693810826ba0007b9b800395693810826ba8007b9b780395693810826bb0007b9b700395693810826bb8007b9b6803956938104929a003956938107b989803956838107b8790039567e0139568c0139569a013956b38107bba88035020f601dd2a956738108277c0037b67b800956738108277b8037b67b000956738108277b0037b67a800956738108277a8037b67a0005020f8010e3f956780133308405020fa019ac0956a381095ac000382c76082c85882c95082cb485022fc010948520740098267a00095a900037b97288267a8007b97308267b0007b9738956860138267b8007b974064b77b6bb8005020fe0186c13308208267b80050200002edc4837833092033070a0b01956740183308405020020228c095693818829220829c18829b10829a08d42b07d4ca08d47808988820d4c707977720d487075207c308956738104927f8074927f0074927e807140700000000a079c308956820187b9764a77b6ab8007b6bb0007b62a8007b6ca0005020040201c18268b8008267a800826aa000d47a0a502206028f4551077208838704956938104929e0074929d8074929c80720956800184929d0077b6aa8007b6ba00050200802bec0826ba800826ab0008268b8008267a0009577dcd8780794a794b751072a08838724956938104929c0074929b8074929a8070a9568e0174929b00750200a027ec050220c02d1445107fe078397443a08200002956a3810492a90077ba8a007140800000000000072657ba898079568c017492a880750200e0244c03308648267b80050201002abc38378330701330964330012020a0b3302140228024850221402ff475020160216c09517e08477e07b67586471390824010256181f133308203d0824010233021802281c495022180219493307300102837783993308200a0750221a027e43826258649a642c7bc9187b6080007b201064807bc80864797bc7826720c87b0b7b6b40d87b07826818c887077b6738017b6a88007b6090007b6998008267608268b800d87807826970d39408d89409da8709826b68d8b307826a788268b000d3a80cd8a80adac70ad3b307d4c707da790a510a21049567c00364287b63a8007b64a00050201c0242c050221e024c43d8c802826cb000826a38c8ac0cc82c0c50222002f4445208ba06956a000382a9d80082a8d00082acc80082abc0007baba0007baca8007ba8b0009568a0037ba9b8007b64b80050202202febe82629800952201882701826a9000c87a0ad4a20788770182688000c87804d8840882678800c887078268b800958320d88309826ba000c89b08d8b80bda990b8269a800c89b0bd89b09826cb000c89c0c7b6cb00064a0826c587bca0864297bc250222402c44564c228edfe9569381049294001492938014929300195686011492928010233075020260272be9517e08477e07b67586471390824010256181f133308203d08240102330228022878475022280275473307300102837783993308200a0750222a02da41826258649a642c7bc9187b6080007b201064807bc80864797bc7826720c87b0b7b6b40d87b07826818c887077b6738017b6a88007b6090007b6998008267608268b800d87807826970d39408d89409da8709826b68d8b307826a788268b000d3a80cd8a80adac70ad3b307d4c707da790a510a57039567401164287b63a8007b64a00050202c029ebe50222e02a841d8c802826cb000826a38c8ac0cc82c0c50223002504352081605956c381082c2200195ca000182a81882a91082ab087bcbe8007bc9f0007bc8f800956820117bc200017b64b8005020320259bd82629800952201882701826a9000c87a0ad4a20788770182688000c87804d8840882678800c887078268b800958320d88309826ba000c89b08d8b80bda990b8269a800c89b0bd89b09826cb000c89c0c7b6cb00064a0826c587bca0864297bc2502234021f4464c228ecfe82679800956900067b9720826790007b9728826788007b9730956820068267b0007b9738330750203602c2bc9517e08477e07b675864718269a800819756171f08480920019517e08477e07b67a800647183793308208267a0000a07502238023140826258649a642c7bc9187b6080007b201064807bc80864797bc7826720c87b0b7b6b40d87b07826818c887077b6738017b6a88007b6090007b6998008267608268b800d87807826970d39408d89409da8709826b68d8b307826a788268b000d3a80cd8a80adac70ad3b307d4c707da790a510a84029567000664287b63a8007b64a00050203a02f5bc50223c02ff3fd8c802826cb000826a38c8ac0cc82c0c50223e02a74152086d03956a000682a91882a81082ac0882ab956a00057babe0007bace8007ba8f0009568e0057ba9f8007b64b80050204002b2bb82629800952201882701826a9000c87a0ad4a20788770182688000c87804d8840882678800c887078268b800958320d88309826ba000c89b08d8b80bda990b8269a800c89b0bd89b09826cb000c89c0c7b6cb00064a0826c587bca0864297bc250224202784264c228eefe826c30330244022817405022440214407b6c60037b6740038267287b6768038267207b6770037b6948038267187b6778037b6a500395676003956840037b6b580350204602591c9567200333084050204802b9b9956700038279387b69b8008278307b68b000827a287b6aa800827b207b6ba000826718956c00027bc7d8008267207bc7d0008267287bc7c8008267307bc7c0007bc9f8007bc8f0007bcae800956700039568e0029569c0027bcbe00050204a02291d50224c02f1405207110264a2956c000382c70882c8187b6898008263000382ca1028a301826c3033024e02283d3f50224e023a3f956838107b8ca8007b8788008267287b87b0008267207b87b8007b8990008267187b87c0007b8a980064899567e0109568c0107b9ba00050205002791b9567a01033084050205202d9b895673810827a80007b6ab8008279787b69b000827b707b6ba800827c687b6ca0008268187b78208268207b78188268287b78108268307b78087b7a407b79387b7b30647a9567801095686010956940107bac2850205402521c502256021a4052073a0164a295683810828750828a607b6a9800828348828a5828cd00826c303302580228673e50225802643e7b6ca0057b6780058267287b67a8058267207b67b0057b6988058267187b67b8057b6a90059567a005956880057b6b980550205a02a91a9567600533084050205c0209b8956c000582c9787b69b80082c8707b68b00082ca687b6aa80082cb607b6ba0008267187bc7188267207bc7108267287bc7088267307bc77bc9387bc8307bca289567400595682005956900057bcb2050205e02861b502260024e3f52076e64a2956c000582c74882c8587b6898008263400582ca5001d3b704d8b70cd89300da400cc92a08c9c804d8c8087b689000d82a0a826cb80082689800c9c80cc9ac0c82689000c98c0cc9b707c90707c99308d4c707d4480ad47a0ad4470798aa20977720d4a7075107c007003308300102838833070133090a0b28e00a3308300102838833070133090a0b28cf0a956838184928c0054928b8054928b0054928a805039567ff079577a1059568e01d5020620222b99568ff0795883980877c05977720828880058269a800d49707956938184929e0054929d8054929d005959b0005492bc80003826ab0007bbaf000826ab8007bbae8007b9800067bb7f8009567001e9568201e5020640244b99569ff07959939492940058267a800959a00057ba7388267b0007ba7303a077000028268b8007ba8283a087800027ba7603a078000027ba8583a088800027ba75064979569ff0795998105956aff0795aa61057b78480533073308502066024cb933083001028388330733090a0b28df098388330733090a0b28d4093308300102838833070133090a0b28c3093308300102838833070133090a0b28b2093308300102838833070133090a0b28a1093308300102838833070133090a0b2890093308300102838833070133090a0b287f093308300102838833070133090a0b286e093308300102838833070133090a0b285d093308300102838833070133090a0b284c093308300102838833070133090a0b283b093308300102838833070133090a0b282a093308300102838833070133090a0b2819093308300102838833070133090a0b2808093308300102838833070133090a0b28f7083308300102838833070133090a0b28e6083308300102838833070133090a0b28d5083308300102838833070133090a0b28c4083308300102838833070133090a0b28b3083308300102838833070133090a0b28a2083308300102838833070133090a0b2891083308300102838833070133090a0b2880083308300102838833070133090a0b286f0852471976b186e804956738184927200749271807492710074927080795670020837740ff330068020a0e01956a381895ab000750226a02393d51077d053308300102838833070133090a0b2821083308300102838833070133090a0b2810083308300102838833070133090a0b28ff073308300102838833070133090a0b28ee073308300102838833070133090a0b28dd073308300102838833070133090a0b28cc073308300102838833070133090a0b28bb079569ff07959939492938014929300114070000000069eabbc47b9740019568ff079588610149292801330750206c0212b5390824010256181f12200324010220330830010228c203330830010228ba037b6a90009568ff0795883982678000958a00017ba7088267787ba7108267707ba7189567ff07957741018269687ba92050206e02b52f9567ff079577398268687b7800018268707b78f8008268787b78f0009568ff0795882101826980007b79e80033075020700289b49568ff079588394928e0004928d8004928c8000864893307209568ff07958801014929d000502072025eb49517e08477e07b679800647133072401027b67a800390724010256173f0c8268a800480840019517e08479e07b69880064913307300102837783993308407b67a000330074020a073302760228d33a50227602d03a9567ff079577e10050207802edb49568ff079588398087bc009777208288c00082699000d4970795693818826ab000959b00027bba9000826ab8007bba88007bb8a0007bb798009568c01a8267980050207a0220b58267689569ff079599397b97a0008267707b9798008267787b9790009568ff079588c100826780007b978800330750207c0280b39568ff07958839492880004918784918680664893307209568ff079588a10049197050207e0258b38267a800817756173f0c8267a800480740019517e08477e07b67b800647183793308408267a000330080020a073302820228103a502282020d3a95bc00027bcac0007bc9b8007bc8b0007bc7a800492be002492bd802492bd002492bc8029567e01a9568001b5020840258b49569ff079599398267687b97608267707b97588267787b97509568ff0795888100826780007b9748330750208602bcb29568ff079588394918404918384918280764893307209568ff079588614919305020880296b29517e08477e07b67b80064718267a80081775517400c8267a800480740019517e08477e07b67b000647183793308408267a00033008a020a07826ab00033028c02288036826ab00050228c02793695774150208e0231b3956aff0795aa3982a70882a82082a91882aa10847700ff956b38187bb8000395b800027b89f8007b8af0007b87e8009568201b8267b800502090026eb333078268a00033090a0b286d043308300102838833070133090a0b285c043308300102838833070133090a0b284b043308300102838833070133090a0b283a043308300102838833070133090a0b2829043308300102838833070133090a0b2818043308300102838833070133090a0b2807043308300102838833070133090a0b28f6034926f0014926e8014926e00114070000000069eabbc49568e0017b67f80133075020920258b1390824010256181f112003240102203308300102280833083001020183883307013309040a0b013308300102838833070133090a0b2898033308300102838833070133090a0b28870352478be3fdf26a95673820492720014927180149271001492708019567002083774001330094020a0e3302960228e73950229602e439502298024e385107fb003308300102838833070133090a0b28360364977b68b80050209a0226b483788169b80033070a0b2839ef524788a4a55a7f95673818492700044927f8034927f0034927e80395670020837720fc33009c020a0e33029e0228703950229e026d3982b7f80082a8000482b9f00082bae800d49808d4a707d487075107cb023308300102838833070133090a0b28b9028267b80081775617237f3308300102838833070133090a0b289e0252473c1e79633502956738184927200549271805492710054927080595670020837740fd3300a0020a0e01956a381895ab00055022a2026837510730043308300102838833070133090a0b2850028267b800817756172359023308300102838833070133090a0b28340295670020837760ff3308040a0295683818958900078297407b6780008297387b6788008297307b6790008297287b679800492860074928580749285007491948039567ff079577c1079568801f5020a4025bb09567ff07957739827890077b68b800827888077b68b000807798077b67a80033073001037b67a00083773300a6020a04018269a00082970882988199105022a8020b338269a800d398088269b000d39707d487078268b800d3a808d487075207fe029568ff0795883982679800958a00077ba748826790007ba750826788007ba7589567ff0795778107826980007ba9605020aa02ca299567ff0795773982688000957a00077ba840826888007ba838826890007ba8309568ff0795886107826998007ba92833075020ac029bae9568ff079588395022ae02a6379568ff0795884107492910075020b0027cae9517e08477e07b67b8006471390824010256183f133308403d082401023302b2022881375022b2027e37330730010283777b67b00083993308403300b4020a07826aa8003302b602285f32826aa8005022b6025832957721075020b8020faf956aff0795aa395022ba02823683bb38f8c86b0b95bc00077bc980007bca787bc8707bc7683307a01f284104956938185247a6185071484929200649291806492910064929080695670020837740fe3300bc020a0e01956a381895ab00065022be02343551070f023308300102838833070133090a0b281c3308300102838833070133090a0b280c838833070133090a0b018267b8008177561723ee01330830010228e6956780165020c002f20b95673810827850067b68b000827848067b68b800807758067b67a8005020c20271298267b8008268a800d487078268b000d487075107a2031407ffffffff000000007b67a000956738204927400149273801492730014927280195676016956860215020c402f9ad95683810958a000682a9387b69880082a7307b67980082a7287b67900082a7409898209788208269a800d498089569382049296001492958014929500149294801826ab000959b00017bba70826ab8007bba687bb780007bb878956780219568a0215020c6020bae826790008477ff826998008498ff8269a000826a8800d2a909956b3810492be005826aa80095bc00057bcad800826ab0007bcad000826ab8007bcac800492b00067bc9f8007bc8f0003a084800023a095000023a0a5800027bc7e80095b700067b78207b79187b7a1064b83a0760000295694016956a2016956b00167b870806330733085020c80296ae330830010228a9f49569ff07959939492978074929700714070000000069eabbc47b9780079568ff079588a1074929680733075020ca02dcab390824010256181f122003240102203308300102288cfa33083001022884fa8267b80081775617238d0233083001022818fe8267b8008177561703910333083001022805fe95670020837740fc3308040a0295683818958900048297207b67a0008297187b67a8008297107b67b0008297087b67b800492840044928380449283004491928039567ff07957701039568601c5020cc0236ac9567ff079577398278d0027b6898008278c8027b6890008077d8027b67880033073001037b67800083773300ce020a04018269800082970882988199105022d002e62e82698800d3980882699000d39707d4870782689800d3a808d487075207e7039568ff079588398267b800958a00027ba788008267b0007ba790008267a8007ba798009567ff079577c1028269a0007ba9a0005020d202a1259567ff079577398268a000957a00027ba880008268a8007ba8788268b0007ba8709568ff079588a1028269b8007ba96833075020d40271aa9568ff079588394928600249285802492848020764893307209568ff0795888102492950025020d60246aa9517e08477e07b67b8006471390824010256183f133308403d082401023302d802284b335022d8024833330730010283777b67b00083993308403300da020a07826aa8003302dc0228292e826aa8005022dc02222e957761025020de02d9aa956aff0795aa3995ab000282b72882b84082b93882ba30847700ff956b381895bc00047bc8607bc9587bca507bc7483307801c01c876088267b8005020e00212ab33078268b00033090a0b2811fc956738104927b8054927b0054927a8056479140700000000f7bd4f1e9568e0157b97c00533075020e2026da9956738104927a005492798054927900564793307049568c015492988055020e4024aa9390824010256183f0b20032401024001330830010283883307013309240a0b019567ff079577a1045020e6029f079568ff07958839828768047b67b800828770047b67b000808778047b67a8005020e8021b259568381849284005492838054928300549282805099567ff07957781049568601d5020ea02c2a99568ff0795883980875c04977720828860048269a800d49707956a3818492a6005492a5805492a500595ab0005491b48098269b0007bb9708269b8007bb9687bb880007bb7789567801d9568a01d5020ec02e8a99569ff07959939492920048267a800959a00047ba7188267b0007ba7103a079800028268b8007ba8083a08a000027ba7403a07a800027ba8383a08b000027ba73064979569ff0795996104956aff0795aa41047b782804330733085020ee02f0a9330830010228aff05020f002312495673818492740064927380649273006492728069567ff07957741069568601e5020f202d9a89568ff07958839958a000682a9187b69a80082a7087b67b80082a7107b67b00082a720989820978820956938184929600649295806492950064929480649297006492968067b9780067b9878069567801e9568a01e5020f402f8a88267a800977720987720956aff0795aa39492ac005492ab805492ab005492aa805492ae00595ac00057bc7d8008267b0007bc7d0003a074800023a085000023a09580002826bb8007bcbc8007ba700067bc8f8007bc9f00064a83a076000029569ff0795992106956aff0795aa0106956bff0795bbe1057b87e805330733085020f60288a93308300102289bef9569ff079599394929b8024929b00214070000000069eabbc47b97c0029568ff079588e1024929a80233075020f802cea6390824010256181f122003240102203308300102287ef533083001022876f5951130ff7b10c8007b15c0007b16b8009515d0008411f08289187b19108289107b19088289087b1982867b1728951790003308405020fa023ba5821898008219900095671fd86700821ac80a0b8477e0c8b803c879027b1920d8920cc8c303d383067b1818d88309da6c098214a800d8ab0b8216a000da000b821708c87b0bd87b0cc86b0bc89b0a821710c84707c8c707d8ba0cd86b0bc8b707c8c70b8eb78eacdbb70cd4ba078e38db7c08520865d86a07d34b08d84b0cda870cd36a07d48707db7c0952094d7b12707b13787b1a80003307409518707b1b88007b14105020fc02cba58217288218107b78187b76108218187b78088218207b78955130ff8210c8008215c0008216b8009511d00032004911604911584911503302fe02140700000000717b484e019518507b176833075020000378a549114849114049113041330704951830491138502002035fa5390824010256183f0b2003240102400133083001028388330701330924330004030a0b01951170fe7b1088017b1580017b167801951590018411f08284829b088280088296954a1fd84a02c8200c7b1620d86a03d3bc0a7b1b28d8bc0bdaa30b828610d80c0ada220a829c18828218829310c86a0ad86a08c82808d3c8097b1c10d9c808d83a0cda9c08d33a0ad4a909db980b510bbf027b17087b1318d464077b10387b1230d42008d487079877207b1658d46808978820d4870752079602951750017b145064485020060357a3821a680182196001821b58018ea78e98dba7087b1980007b1a8800d4a9078eb9db7809520968028218500195871f7b1848d887087b1b78c8b8088488018477e0957920d87907c8780ad88a0bda770b492128017b1910017b1a180195173001951810017b1b2001502008037bfd82194801821a400182183801821730017b18407b1968d48909d4a708d498089888207b1a70d4a909979920d498085208e8018216487b16f0008218787b18f800821880007b1800019518f000821988007b1908017b176050200a03c7a3821750c8670ad87a09821438821778c84707c89707d3470bd84708dab90882135882198000c8390995ac20d8ac02c8270b821a20d8ca0c821a28d3ab06d8ba0adb6a0cd8390a82133082168800c83606c86a0ac89808d89809c8a909d87b07da2207c88707d88708c89808821a10d3a809d88a08821b18d87b0ada9a08d3b707d49707db780c520caa01821770821868d478081407e0ffffff00000000821b60d87b09821a4094a9948951090f0164ba821858d43808821c50d87c07944794878210880082198000821b788216485107eb00d49607d40b08d48707987720d49808978820d487075207d20083a72083c8207b1858646850200c033fa67b1750821758646850200e0331a66478821750646950201003f1a0821860c86807d88708821640821978c86909c88909d3690ad8690bdaa80b821c7082188000c8c808c88b0bd88b02d8c808821c8800821a68c8ac0cc8c808c82808d4b808140ae0ffffff00000000d8a70a949a948a510a4d8377204921e8004921e0004921d8009518d0004921d000502012033ba28217088218687b78188218707b78107b76088218607b78955170fe82108801821580018216780195119001320000330830010228774921c0004921b8004921b00033021403140700000000717b484e019518b0007b17c800330750201603dba14921a8004921a0004921900041330704951890004921980050201803bda1390824010256183f0b20032401024001330830010283883307013309240a0b330830010228083308300102018388330701330933001a030a0b019511c07b10387b15307b16289515408411e0647683173308040a020182171082181814090000000001000000d37909d48909987a2088aa01948a939a510a248219821a087b697b6a087b67107b68189551c0821038821530821628951140320033083001028388330701330933001c030a0b01951160ff7b1098007b1590007b1688009515a0008411e0828b829608828008829395ba1f7b1b58d8ba02c8200c7b1340d83a03d36c0a7b1648d86c0bdaa30b828410d80c0ada220a829218828318829610c84a0ad84a08c83808d32809d92808d86a0cda9c08d36a0ad4a909db980b510b19017b12287b16307b1738821758d447077b1318d43008d487079877207b1420d44808978820d487075207ed0064068118588317600a02018214788217708219687b1750d4470788980194785108d200821860821758957b20d87b0ac8a6037b1808c8b808d8b8027b1910c83909c82909d3390cd83907dac207d8630cdaaa0c821a20c8ca00d8a006821218c86202821648d3690cd89609821640d88608dbc908821950c80909d8090c7b1458c84206c86c0cc89707d89709c8c909821628d3690cd89609821430d87406dbc906d34707d4c707db760852084e8217388218087b78207b7b8218107b78287b73088218507b78307b70108218587b78387b7218955160ff8210980082159000821688009511a0003200003308300102280f330830010228083308300102018388330701330933001e030a0b019511a07b10587b15507b16489515608411f0828910828c08828b82881897923f98ca01d42a02978a3f989901d49a0a97cc3f98b901d49c0c98830184bb019ab888b60184c97fd2a804d2280adbbc09d2380b88982094a8d4b40c94c8ab86167b797b7a087b74107b7b18502220039e273200502222030b2750202403e89e491118491110490122330704641849110850202603d19e390824010256183f0b2003240102400133083001028388330701330924330028030a0b01951170ff7b1088007b1580007b1678951590008411f064728289827408828c088273959a1fd89a00c80c0984aae07b1308c8a303d8a30bc8490ac8ba0ad39a06d89a07da6b07822b18d8c90c828610822210828818da000cc86c0cd86c06c82c09c89707d8c90cd89709c8b808c86808c8c808c8980c8ec88e79dbc809d4c7088ea6db8906520657821808d88308d34a09d84a06da9806d82708d3bc09d8bc0bda980bd32708d49808da860b520b307b13507b1a587b17603307409518507b1c6850202a03e69d955170ff821088008215800082167895119000320049114049113849113033022c03140700000000717b484e019518307b1748330750202e03ab9d4911284911204911104133070495181049111850203003929d390824010256183f0b2003240102400133083001028388330701330924330032030a0b019511e0fe7b1018017b1510017b160801951520018411f0828b10828a18828c0882827b1a687b1c78d4ac08d4b20ad48a0a98aa207b1b70d4b808978820d4a8087b170852084b028297187b17488296108297087b175082977b17584921f8004921f0004921e8009518e0004921e0002064277b126050203403f39c821858d46807821948821a50d4a909d497079877207b1620d46909979920d497075207f2019517c000502036038a9b821770821868d47808140700000000010000007b17101407e0ffffff00000000821960d87907821a7894a77b181894875107b401821ad800821bd000821cc8008218c0008397207b18287b18a0007b1c307b1ca8007b1b387b1bb0009518a0007b1a407b1ab800649650203803559c8217109577c0d876078218789487821818948751076201821748821820d487071408e0ffffff00000000821a58d88a08821b5094b8947851083e016469821828821c38d4c807821b40821630d46b0bd4b707987720d4cb0b97bb20d4b7075207170183974083aa207b1a58648650203a03569f7b1750821758646850203c03489f6478821750646950203e03089a821760c86707d86708821978821b30c8b909c88909d3b90ad8b90bdaa80b821870821a38c8a808d8a80a821c68821640c86c0cc8ca0ac88b0bd88b08c8a808d4b808140ac0ffffff00000000d8a70a949a948a510a9400837740492198004921900049218800951880004921800050204003539b82162895661f1407e0ffffff01000000d26707821860c88707d88708821a78c88a09d8a90ada880a821870c88a0ad88a08821b68c8b808957b40d87b07c8790cd89c09da7709c8a909d8a907c887078218087b8b7b8c087b89107b87189551e0fe82101801821510018216080195112001320000828a18828b108282088eac8eb9dbac09d4ba0a8e2bdba90b520b30828895891fd88908c828088488018499e0959a20d89a09c8980bd88b08da99084917187b7a7b7b087b781032009511b07b10487b15409515508411f0502242039f22502044037c9a491118491110490141330704641849110850204603659a390824010256183f0b2003240102400133083001028388330701330924330048030a0b01951150fe7b10a8017b15a0017b1698019515b0018411f082ab187b1b2082ab107b1b2882ab087b1b1082aa7b1a18828a187b1a30828a107b1a38828a087b1a7082887b1868829a829808829b108299187b17087b1998007b1968017b1b90007b1b60017b1888007b18580195177001951850017b1a607b1a500150204a03e8fe821770017b1758821778017b1750821780017b1748821788017b17409517300133084050204c035e98821848017b18a800821940017b19a0008216380182173001821a407b1a0801647a7b1780008217487b1700018217507b17f8008217587b17f0007b1828017b1920017b161801951710019518f0007b1a100150204e0399fa821780007b16788219a800d46909821aa000d4a708d49808988820d4a909979920d498085208c8018216607b16d000821888007b18d800821890007b18e0009518d000821998007b19e80050205003ef98821868c86808d8680982177082148800c84707c8970ad34a0bd84a07dab907821b10d3ba09d8ab0a821b18d88b0882163882139000c8630bdb9a08d83b0982103082129800c8020ac8a909c8b707d8b70ac8a909821b20d3b90ad89b09821c28d87c0bdaab09d3c707d4a707db7908642b643a82126082136852082301d46307821870d40808d48707987720d46808978820d4870752070601d4a207d4b408d48707987720d4a808978820d48707821978821aa8005207e6008217a000d4a7071408e0ffffff00000000821b80007b1870d88b08949894785108c30083337b136883b7206428642650205203759b837783688219680a010182128000c86207d8270882198800821b78c8b909c88909d3b90ad8b90bdaa80b82189000821aa000c8a808d8a80a821c98008216a800c86c0cc8ca0ac88b0bd88b08c8a808d4b808821a70d8a70a949a948a510a5164268377204921c8004921c0004921b8009518b0004921b0005020540383978217088218a8007b78188218a0007b78108218787b78087b76955150fe8210a8018215a001821698019511b001320000330830010283883307013309330056030a0b01951140f8951a00077ba0b8007ba5b0007ba6a8009515c0078411e064167b67208297187b67b8008297107b67c0008297087b67c80082977b67d0008287107b6730018287087b675082877b67484926f8054926f0054926e8054926e005049567c0059568e00550205803c697956800058287c000828bd8008289c800828ad0007b67a0009577018878017b699800c89808d48709889901c8a9097b6a9000d8a90a7b6ba800c8ba0ad4a80bd4970cd4cb0b520b06287c10492618064926100649260806956c0006490c047bc7207bc8287bc9307bca38956700069568200650205a03c8978267a8007b67b805826790007b67b005826798007b67a8059568a0058267a0007b67a005330750205c03309649269805492690054926800508330720956880054926880550205e0312969517e08477e07b67380164713308240102390724010256173f0b200324010240019517e08479e07b6928016491330730010283777b686883993308407b6770330060030a0701826a280182a71882a81082a90882aa50226203b31d826b38017bba187bb9107bb8087bb764b8826730019777209877207b6740956760055020640381968067740597772082687805826940d49707826950956a00067ba9488269487ba9407ba8587ba750956840068267380150206603c6968267a8007b675805826790007b675005826798007b674805956840058267a0007b6740053307502068032e9549263805492630054926200505330720956820054926280550206a0310958268689517e08477e07b6780006471818756173f08480840019517e08477e07b673801647183793308408267700a070182673801827210827418647c8268d000826bc000d4b809826ac8008267b800d47a0ad4a909989920d4ba0a97aa20d49a0382ca0882c76f4c6f296fab6f7a826780007b6ae0007b7a187b6b307b7b107b69387b79087b6cd8007b7c5203740e9567000550206c033d9395670005827a188279108278088ea78e9bdba70b7b68608e877b69787b6a58d4a9097b67287b6bb0007b69f000db9b075207a00e826700057b6788009567e0048268800050206e031f958269e0048267e8048268f004826af8047b6ab8047b68b0047b67a8049567c0049568a0047b69a004502070039ff495670004827ad800827bd000827cc8008262c0048ea78eb8dba7088ec7882920859901dbc709d4ab07db7809826788008877207b67e800510944027b621001956700017b7c187b7b307b7a208267d800956900047b9780008267387b9788008267307b979000956880048267e0007b9798003307502072038593826968819756171f08480920019517e08477e07b67280164718379330820826770330074030a07018267880095781fd87807826c60c87c09d8c90ada770a826b78c8ba0a7b6a080197aa3b989b05d4ab0b8267280150227603bd1b8268e80094c8826af00094a8948b9487c87402d84207c8790cc8cb0b7b6b3801d39b0cd89b0adac70a7b6a00018267100195701fd8700b826a1801c8ba07d8a70cdabb0c82633001c8c303973b3b987a05d4ba0a97773b980b05d4b707c847077b671801d847076424c8790bc8ab0bd39b0a7b6b1001d89b09daa709826b0801826778d87b07826a58c8a70798ba05977b3bd4ba0a826b280182b282bb08987705948a94876fb86f2bc8b707c88a0ad88a0cc8c70782600001c8a000d8a00ac8a70282673001d87307826a2001c8a707983a05977c3bd4ca0a987705c8b707956c000182cb38c88a0ad88a08c88707c8a9097bc908d8a908c887077bc79517e08473e064317b63f8000182671801d8740782691001d39b08d89b09da8709826c0801d8c007826a0001d3a208d8a20ada870ad3c007d48707da790a7b347b3b087b30107b3218510a60492678064926700649266806492660069568600664377b6430017b6b38017b6228017b6020015020780321938263f80082622801826b380182643001954401884701c87b0bd4b40788770182682001c88707d88708c8820264702867ff8267e800857701826860826928db89078269b000826af000dba907826958d4980851073b027b6828826788008477e07b67b0008267d800956900047b97408267387b97488267307b9750956840048267e0007b9758330750207a0327919517e08477e07b6718016471330820330750207c0384949518e08488e07b6810016481837783893308200a0749263001204926380149262801330b3302330349262001826a100182a71882a81082a90882ac6f746f886f9a6fc9330c6490826718017b79187b6af0007b7a107b6810017b7808644a7b74017b60080164a48267b0007b6b0001d87b07857b017b62f800942b0182672001d47307947b018268d00082673001c87808826ac800c8ca0a8269c00082673801c879098267b80064c2826c2801c8c707642c520ba3017b63e000826b3001d8b80bc8ba0ad3ca027b6cd800d8ca0cda2b0cc89c0cd89c02826b3801d8b909c89707c8270750227e032c187b64e8005207110a9567c00150208003da8e8267d8018268d0018269c801826ac001956b00067bb798007bb890007bb988007bba80009568800682671801502082034e918260e80095000188070182621001c87202d420078877018268f000c87803d8830882670801c88707826830019589207b690801d8890a8268d800c8a8097b69e800d8890bdaaa0b82683801c8b804d8840b82682801c8b8087b68280182680001958b20d88b0c8269f800c8c908d89809dacc09826ae000c8a909d8a90c826a2001c8ca0a7b6a20017b621001826c18017bc208640a7bc07bc31064707bc7187b63f000826708017b673001826ce8007b64380164826493287cfe826a8800826778d4a707d487078269d0005107d8018267c0008268b800d487071408e0ffffff00000000d88908826ac80094a894785108e2088398209567600450208403a88d95680004828778956900017b97308287707b97288287687b97188287607b9720826a880028900164c482638800826bb000d33b0b826c78d4cb0b826c28d4cb0b510b1601826b3001d8b80bc8ba0ad34a02d84a0cda2b0cc89c0cd89c02826b3801d8b909c89707c827075022860378165207610895672004502088032a8d9568000450228a033e177b6710018267880097773b9878387b6838019a8980003307ff3308ff50208c0398177b6708017b68f0003307ff3308ff8269380150208e035a177b67f8007b6800018267f000d487077b67f000826738019579803307ff3308ff502090033417826b380188b98000826af000db9a08826cf800826a0801d4ca0ada970a93b8ff93baff826b0001939b939c82671001e0a70782692001e0890882692801e0c909826a3001e0ba0a956b00067bbab8007bb9b0007bb8a8007bb7a0009568a0068267180150209203fd8e826388000182697898973f826858978801d48707826a6098a83f979901d4980898393f97aa01d4a909973a0195aa01956b00067bbac0007bb9c8007bb8d0007bb7d8009568c0068267800033009c0328a88e492620014926180149262801492630010182696098973f826b7897b801d487077b67100198b73f826858978801d487077b67080198a73f979801d487077b67000197a7017b67f80097a8037b6838018d8980003307ff3308ff5020940340167b67d8007b68f000826788008a79033307ff3308ff50209603ff157b67e8007b68e0008268d800d487077b67d800826738018379803307ff3308ff50209803d915826b380188b98000826ad800db9a07826ce000826af00050229a03ea13826be800939b82681801e0a80882692001e0790782692801e0b909826a3001e0ca0a826bf800d4b707956c000182cbd4b80882cb08d4ba0a82cb10d4b909956b00067bb9f0007bbaf8007bb8e8007bb7e0009568e0068267800050209c038e8d82679000956900047b9710826798007b97088267a0007b97956800048267a8007b9718330750209e03f78b4926f8034926f0034926e003073307209568e0034926e8035020a003d98b9517e08477e07b6738016471826968819756173f08480940019517e08477e07b673001647183793308408267700a07826a300182a71882a81082a90882aa6f776f8b6f996faa826838017b8a187b89107b8b087b879567c0035020a2036c8c8267c0038268d8038269d003826ac803847700ff956b00077bb8187bb9107bba087bb795680007826738015020a403b58c9567a0033308405020a603028a8267b8037b6730018267b0037b6720018267a8037b6718018267a0037b67380133073001037b67280183770a04826828018187107b67100182877b6708018287087b6700018267b800956b00037bb7588267c0007bb7508267c8007bb7488267d0007bb740826730017bb778826720017bb770826718017bb768956780039568600395694003826a38017bba605020a80341ed956b000182b91882b730d4970782ba2082b838d4a808d47808988820d4a707977720d487075207730464a4956b000382b7880082b898007b68f8008263800382ba9000d3970bd8970c82623801d82308dab80cc94a0bc9cb00d8cb0b7b6bf000d84a0a826c3001826bf800c9cb0cc9ac0c826af000c9ac0cc99707c98707c92308d4c707d4080ad47a0ad4070798aa20977720d4a7078262a800826ca00082639800826490005207f203826700016f77987920826a08016faa97ab20d4b909977720826b10016fbb98bb20d47b0b98a7204926f8027b6be0027b6c00037b69e8027b6308033a09d800023a0ae000023a0be800023a0cf000027b693803956900037b9a307b9b287b9c207b67f0027b64100395692003956a0003956be0027b621803826738015020aa03fe8b49263807492630074926280749262007039567c002956820075020ac03508a8267d0027b6708018267c8027b6700018267c0027b6710019567a0023308405020ae03ff87956b000282b9b80082bab00082b8a80082b7a000956b00017bb8307bb920d48909d4a708d498089888207bba18d4a909979920d498085208f202492690024926880249268002140900000000688e807d956880027b6998027b6738015020b003d788956b000182b83882b72082ba18d47a0a140700000000010000007b67f0001407fcffffff00000000d8780782b93094977b6af80094a75107900283870449267802826848956a00027ba8608268507ba868956860028269407ba9705020b2037688826938018267f0009577dcd879078268300194878268f800948751074b028397248268a000956a00027ba840826898007ba848826890007ba850956840028269a8007ba9585020b4032b880a08826700016f77977820826908016f99989920d49808826910016f99979a20987720d4a707989920826a28017ba7087ba87aa91049265807492650074926480749264007330844826738015020b6034d8b7b671001330820826738015020b8033c8b956900074819602049299800ff49299000ff49298800ff49298000ff8268280197882098882014090000000008000000d498029568400797882098882095698007979920d4890a8268100197882098882014090000000044000000d4980b97772098772095686007978820d4780c3308ff3309ff64270a015207b3000a0a01330a20aea7080a0a647a01826920018267180182683001492628017b6a30017b6ae001826a3801956b00027bba4926e8017bb8084926f0017bb7104926f801956700029568e0017bb9185020ba0352e8826a28018ea782683001888820858801dba7088ea78ea9daa709d4aa07da78095109a4018267208268a0007b78826898007b7808826890007b78108268a8007b7818955140f8951700078270b8008275b0008276a8009511c0073200956720023308405020bc035685956800025022be036a0f7b6738010a0a01956b000182b83082b920d4980882ba2882b938d4a909d48909989920d4a808978820d4980852084998782052084364787b67280183777b673001826738015020c003af89826828017a68a00783778368a00733090a09018167a00782683001ac870f0a0a0164789877205107e900004926700149266801492660013302c203140700000000717b484e01956860017b67780133075020c403e5854926580149265001492640011133070495684001492648015020c603c785390824010256183f0b20032401024001330830010283883307013309240a0b014926b0014926a8014926a0013302c803140700000000717b484e019568a0017b67b80133075020ca037c854926980149269001492680014133070495688001492688015020cc035e85826768817756173f178268684808403307013309248268700a0b28183307013309248268700a0b280b3307018268700a0b01826738017b6830015020ce0392888378816930013307013300d0030a0b01951120ff7b10d8007b15d0007b16c8009515e0008411e064168279827808827a108277187b6798007b6a90007b688800956880007b69800033075020d203ce84491678491670491660083307209568604916685020d403b5843309240102390724010256173f0b200324010240017b69109517e08479e07b691864913307300102837783993308407b67083300d6030a0701826a1882a71882a81082a90882aa5022d803640c7b6ab8007b69b0007b68a8007b67a0009567409568a0005020da033d85806750826840826948d48707d49707510719955120ff8210d8008215d0008216c8009511e0003200491630491628491620140700000000084fd0b19568207b673833075020dc030284826710817756171f0b826810480820013307013309048268083300de030a0b01951140ff7b10b8007b15b0007b16a8009515c0008411e049219800492190004921880049218000951760951880005020e003a0848217687b17188217607b17108017707b1708330630010383677b173300e2030a040182670882688169105022e4036307821908d39808821910d39707d48707821818d3a808d48707520719955140ff8210b8008215b0008216a8009511c0003200491150491148491140140700000000a7da8c119518407b175833075020e6032c8382173300e8030a040182670881681082695022ea03c70a4911387b18307b17283307049518207b1a205020ec03fd82390824010256183f0b20032401024001330830010283883307013309243300ee030a0b01951160fb951700047b7098007b7590007b7688009515a0048411e0951800034918784918704918684918600a95174003951860035020f003918395170003827b58827950827648827a40d4b607d49a08d487075107db03951700034927b8004927b0004927a8004927a0008317a0037b19507b1a587b1b480a0e01951b000382b7b80082b8a80082b9a00082bab000821b48d3b707d36808d48707821850d3a808821a58d3a909d49808d487075207d703951800034928d8004928d0004928c8004928c0000b951780029518c0035020f203f782801990028218800282168802d49807d46707520732951700034927f8004927f0004927e8004927e000951760029518e0035020f403c082801970028216680282186002017b19307b1838951700044917184917104917084907831700040a0e9518000482877b17588287087b17508287107b17488287187b17400a086f68978920821a306faa98aa20d4a909821a386faa97ab20330c300103988820d4b80898aa203e083801033e093001033d0a400103821840951900047b98388218487b98308218507b98288218587b98204819408e77fc089a787b98787b98707b98687b986097cc2098cc20977723d4c707951820049788209888203309300102951a600497aa20d48a0a979920989b2095184004978820d4b80c3308ff3309ff0a64760a0a0151074b017b16180a0a6479951a0002491a38491a30491a2895174002951820027b19207ba9205020f603dde5951800028287407b17488287487b17408287507b17388287587b1730951700023308405020f803537fff951800028287187b17508286108289087b1958828a7b1a288218307b18d8018218387b18d0018218407b18c8018218487b18c0017b17f8017b16f0017b19e8019517e0019518c0017b1ae0015020fa0393e1821928821750821858d48707d46908d478089888207b1648d46707977720d48707520761034921b8014921b0014921a8019518a0018217207b17a001649764965020fc03f47fff0a0a01821850821948d498081409e0ffffff00000000d89609821b5894b9948951091b03646a64769877205207100383a72083687b185864685020fe0328837a16800483778318800433090a090181178004821618821858ac87e3025106280195178001330840502000044c7eff821998018216900182178801821880015022020401075207b702492170014921680149216001140700000000a079c308951860017b17780182175850200404447fff502206047f045107850282175883770449215801492150014921400120951840014921480150200804187fff50220a04c3055107590282165883672449213801492130014921200113951820014921280150200c04ec7eff50220e04ff0451072d028216588367443a080001023a090801027b1818017b1910011408000000000064656c7b18080195180001492100013300300428a97eff9517000349279800492790004927880049278000831780030a0e01951b000382b7900082b8980082b9880082ba8000d49808d4a707d4870752070c01955160fb951700048270980082759000827688009511a004320095172003330840502010040e7dff951a000382a93882a63082a72882a82050221204c30552077901951900034919104919084909140700000000a079c308951800037b971882175850201404077eff50221604420351074801821758837704951900024929f8004929f0004929e000209518e0024929e80050201804d77dff50221a04820451071801821658836724951900024929d8004929d0004929c0000c9518c0024929c80050201c04a77dff50221e04ba035107e8008216588367443a08f80002951900024929a8007b98b800140800000000656566207b98b0009518a0024929a0003300300428657dff9517e00033084050202004207cff8219f8008216f0008217e8008218e00050222204d50452078b004921d0004921c8004921c000140700000000a079c3089518c0007b17d80082175850202404187dff5022260453025107598217588377044921b8004921b0004921a000209518a0004921a80050202804ed7cff50222a04980351072e8216588367244921980049219000492180000f951880004921880050202c04c27cff50222e04d502520704008216588367443a081001023a091801027b18784911687b197095186049116050203004927cff330864646750203204fa7fff83783307013309640a0b3307330034042818803307502034041380330701502036040a804926b800330433034926b000826ca80082c7188268309589207b6950d88908826928c8890a7b6a48d89a0bda880b82c81082c90882ca6f776f886f906fa932026f77987a206f88978b20d4ba0a9777206f99989920d4970798882032028264b8008263a0008260a800826850c84807d88708826b48c83b09c88909d3b90cd8b90bdac80b826c40c80c08320282a71882a81082a90882aa6f776f8b6f996faa8268b8007b8a187b89107b8b087b879567ff0732028269b8001407bcffffff00000000d879078268b00094878268a80094873202826c30330433034926b000826768826860d48707826878826970d49808d487078e779777057b67b8003202140b00000000010000001407fcffffff00000000d878078269b000949794a7320282a71882a81082a90882aa6f776f886f996faa956b382032028268b800958720d88708c88409d8490ada880ac83a0ad83a08826bb000c88b0b32028269900082970882988199106f77987a206f88978b20d4ba0a9777206f99989920d49707988820826978d3980882698000d39707d4870782688800d3a808d487073202821948d46909140600000000010000001407fcffffff00000000821858d8780782185094877b194894973202826720826818d487071408e0ffffff00000000826b30d88b08826928949894783202826b180188b98000826ad000db9a08826cd800826ae800d4ca0ada970a3307ffdab708dab70a826be000939b939c3202c88b0bd88b08c8c808d49808d4b709d48909d4b808989920978820d498083202d49b0bd48709d4b909989920d4b808978820d498083202826730826818826928d48909826a20d4a708d49808988820d4a909979920d4980832021407bcffffff00000000d87607821850948782184894873202826aa8008269b0008268b8008267a0009577dcd87807949794a73202d49707d48b09d47909989920d48707977720d497073202826ba8008269a0008267b800d4b707826ab000d4a908d47808988820d4a707977720d487073202977b3f988c01d4bc0397ac3f987701d4c70797883f989c01d4c80898aa018499019a9c32029567dc821858d87807821850948782184894873202826a880082a71882a81082a90882aa6f776f8b6f996faa826898007b8a187b89107b8b087b873202826ab80082a71882a81082a90882aa6f776f886f996faa956b38183202939b8268f800e0a80882690001e0790782690801e0b909826a1001e0ca0a32027bc410647a7bc7187b6480007b63b800648464b33202c89c0cd89c0ad84909c89307c8a707d4c809d4b707d47909989920d4c707977720d497073202d4ca0ada980a3308ffdab807dab80a939c320282b71882b82082b91082ba08d49808d4a707d4870732027b17507b1948d497077b1858d46808d47808988820d46707977720d4870732026f77977a206f88988820d48a0a9877206f98978920d4970798882032028eb9858801dbb9088e498ecadac90ada780a32024926f8034926f0034926e8039568e0034926e00301330732026f776f886f996faa3202d4c809d4a707d47909989920d4c707977720d497073202491130491128491120140700000000717b484e9518207b1738330732027b67d8007b68e0008267d000d487077b67d000826718019579803307ff3308ff320297773b9878387b6818019a8980003307ff3308ff320295ab000682b7e80082b8f00082a9000782baf800847700ff867701330b0020320282731897993b827a10988805d498076f346fa932029551a08210588215508216489511603202c8b707c88a0ad88a0cc8c7078260e000c8a000d8a00a3202e0890882690801e0c909826a1001e0ba0a32028287387b6730018287307b6728018287287b672001828720320233073818c8760a95ab0003320233073820c8760a95ab0001320249282007492818074928080707648933072032029517e08479e07b69a80064913202849a40520a195109148d9a40cfa80ad09808d09707d4a707320032009597c0d0780733083200849a40520a195109148d9a40d0a70acf9707cf9808d4a808320032009598c0cf87083307320049922425494b2a252da9944c4949214225a952484992244992244992244992244992244992244992244992244992244992244992542529a524292949a84a494a922449922449922449922449922449922449922449929224294955494a922849699204490a4a9294a4245555494a92925492141111294992942449854a2925494a292549254544441111919224494a9224a5244992502a29292952a4489122458a14252922224a920421240ca54969482422222245449088484444448a0812112222a29124499210111111212222222549922411a1a811890811114949442489444a92924412912449121111918848242212229204902a89888888488488484a229248924492449288888888888888881049922842148d9424898888081111111151249592942492444444444444882249a52425491211114508214444441211512122424484881091882449920891a4122592882491880811219212922449a524241111112184082651a8a4492249124922445125492489482249244992444a12492491245152151289244922492289a4188924914892a4248988882222424444922492944824118924499224912449121111a19044292451a55044454492aa8a4422b522924844129128118948445292249224499288880811119124112192481249241289441249242289249144a288544a44441449221211911249922422499244921011222222222221442411420891089124112199244992888888888848221240a222892449489224221289882691482422091149122222114942442422444822914884888888880891449224890891a41245121189888808112192242449924a11221111111111a110229844a1522491241249224952515449124922924812499224919244129124499454854422499248924822294622492492242949222222222245448488882449242991884424221111110a49944212550a51544592aa221289d42292484412918824924824494244848888888888888844104924892412894422892412914492482211a9128988222a1149129188884844221149249224414410111111111104114904411044228888888888441093249244922422222242444444894444920052910812119148248a4922492489442292202292041191882441442422882012894422224992444404912022229224490ca50aa50aa50aa5464400110511918820441012121111c0888288908820441012121111c0888288908820441012121111c088828890882044100a45440430a220222422081184c29222124155a2a02a214224a2684420011148402001014102020924904002020924908888884644442449a2484410898888082212492212442292244992a48808202222228288489024121122222208924422424404419210898888884444441a11114592248a4444440411111111912012111141124944444444442449228d2449924491488a248988245210312294882044308942258a4804491211448c442291880411491224111111111145242222228a0411114992281291222222222292282251248888482449524444221109222222228844220951a2489088881011442291248a04494424128988828811a14404214430894245228a4804912411414424128948410411412451914954228a041144904492440491202222224812914844a208222222911042242242222282a212111111458220892249149128122449442291149146440049245149444410111122828888101141242291484444848888888820224124222282241111111111451091888888104244448444444404a12a1111118d888824491489481111111149a4206244281141886012854a149108222222828888041149122451444444242222a21149922489229120128944222242441049128944222241904492a42489248824411289888888882048444444232222922451242245444444444422222222884444444444444124229488084204932854a248101111111144222222222241242249904412118944242211115123222292245124124444229148944444101111111189444482208988884422492441240992484444444404412222221a9148499244918808111144229148242212442249822422222222228a484444442322229224512422454444444444444410914824a28288908820894288602451a84491a4aa88442251248844229188202222224912110982242222922489248824411249442422220812484444442322a248924491880811114422914844248844920449241191484422121111d18888289224512422424404918888888848108988882089242222222222121111d18824499244918820128944222245244992888888882012111111a268a404914822492289489248824889884892244944444400918888882022122489081111419024224404419288002222124522d288242949942449121111111145440411111111111191888808111111444424110922224992244922228088888820221224898810111104492222440441921011014444242222a21111512449a248448488202222221244922449922492884824129188888846444492248a44101111111111694444521251922449444444444404111111914824128988284404914824a4685282244992248a8848241289444444444444101111111111111111114124128944248888489224111111111145242222a211899424491489881011444444444482888848922411111111115144a288884844444444444444444404111111111111218a46521011111111111111111111114144444444444410092292248888442211298244506a248824499224111111405444441011092211112222828888a42211112282201222228088081241491409822485488804a152904aa4549224191189244992489224a28820482409222222222222824822492491482249249128a9a0444444284852888448102a05a9444a2549921191489224892449228a0882449220222249444444104924892412492489241225159488442211294852149944250a5289944a92242322912449124992441411048924414492222222228824924412892492441289920a4a224144221189888820124422914824229148444444441044914424890411914844228a882012444422914892244952442408a24822492241442211898888201244229148244992924444822045129149922412914492244992184a25944a44448888201289484444848888888820121189844848484811115141a84a5542a9845209a5124a25944a2895502aa15442a9845209a5124a25944a2895502aa15442a9845209a5124a25944a4044444444238208a5124a25944a2895502aa15442a94422028888280811848444242249129104914422111151108908252282240a112232894225a24810114422118988888888081289442222a22012891291208ac8242a11458288888888880822499244440a2249944882248a2232894a441189204124492222222222282aa15442a9845209a5124a25944a2895880820a22044100a4b1a4a25944a20222222a2481044289522282a8188888888224144449208a51245289580888888884604114a250aa1542252442291484444444410898888085134528248249144242291484424884424128988144482880892284442240845892212410491201291241281888888684410a154a154a546211441444444041189440011111111414422914812898888884422114124129188888888888810424492424444052191880022220a420421215108894248448a482412898888880822111111218a464a108924928844444444444410898848242252108908252282240a9110094251a2884410412492242292242682a21211510011051111252208110c258d08221111114144448888201289484444442412890822119148888484841411111584041111111141241289449288888888880822894444444444082122220a1111115141482422808888821041484844442449528904114949922449229124499224a9a4244992248924122449922222a22411c0a420892441886028894644444a4a922449922449922449224992244922521011958894882449922489888808222292244992482422222241922449924892244992489224499224491249024852519254441249922492142405a52049922449244924490248251111112449922222a2a18888004614448444042182a1a450588a26495269124092544a4992248552342222525292244992244992244912499224499228699224459224499224499224499224499224499224494a922449444434140a4bd124499292244992a42449524a49828220494a1022184aa2119148252549922449922449922449252549922449922449828848942402981424912408110c25d188884892922449924492a444448412244992248908920490009294222222894422120549528a240124a928499224492429480a4a41922449922449922401a422111111240124499224499224495292888868924a4a4a922449525292240892a4042182a1241a11114992a42449524a92888888884410894422912022222251241289888888201289244922111111114192449224499248924892244992a4924892248924499288480091549454506924912449441291244952291111112412498a88888652342222222591481489a44444880822222292489248244912119124890822222222a22022242248a210229844a1944423494124a948124124924492242288888888888288908820495464129534922212912449aa8a489244114124a9a42489484444041111111111414444544a92442222924444221111052932894aa291244912492288a24a924812914492489224899424924892245152952491241249924492244949311249229124494912111145440411114992485222492292442211912489484112a520892a85882a2249551589446a149144228948242251a488481249124982880822222222222288249244128944229144128948224924918848a5444444259244442480444522884492248914912489489224912488082288482292202289202212912488884424495424128944444444109324499224898888884844c42449244924894422922022920411918824414424228822914824122549222222228848248a484144484490442932894a8a24554592228888884852441009222222224254248a444422914824128988481049922449a2888888249224918824922449924444449428499424222242082122494444440411112282888888481011119124499244440410114124490011405214894492488288248a22118944221214254aa224899488884410892022841022092091441249004922493a9ad488888888229188481045924a1289229148444444912082682449922449521411441435222d3122228011051121114188602869444400230a224222821449924a5249238222d18888482589888882249204214430490a954493a42022221124491211112509202948914c128d8888444424822449424553822449924444444902480a8a26054992042182a1241a1111914812114124499288888848d288884892244922222244041191242222228288984492a22849925452921292841012499224519224492421922492648d542489488248922489042249521289442222222248922449121111890a344900494525520aa2a891444402111141444400110904914484884010494488080491841011404444444444342222924444444491402449109114402481209288081181209288081181209210110144444424101111444404109140902422440482241121221064124292249002251529481015912449922455554a529222224992244949aa8a24451140a2a85424499212051040a24a52551449922452a49492942489249292000248522a490049aa8848449224aa244992a42449529224499202484a454424559224292212499294244992a492a45424a92a925424a92a2a1289444a89a892244992a42449254992922449924a494a524925454484aa2a4992942480a4222211494a2292222222122549aa244949124989444a2412291245a288504aa29224492aa92449924a0a00"
            },
            "methodIdentifiers": {
              "contentOf(uint256)": "27427e31",
              "disableBuy(uint256)": "5aa5a488",
              "enableBuy(uint256)": "86b17619",
              "isBuyable(uint256)": "e738c7c8",
              "market()": "80f55605",
              "mint(string)": "d85d3d27",
              "mintFee()": "13966db5",
              "mintFeeRecipient()": "765b0c36",
              "mintTo(address,string)": "0075a317",
              "name()": "06fdde03",
              "nextId()": "61b8ce8c",
              "owner()": "8da5cb5b",
              "ownerOf(uint256)": "6352211e",
              "priceOf(uint256)": "b9186d7d",
              "priceSetter()": "2c09bef7",
              "renounceOwnership()": "715018a6",
              "setMarket(address)": "6dcea85f",
              "setMintFee(uint256,address)": "4d02d6b5",
              "setPrice(uint256,uint256)": "f7d97577",
              "setPriceSetter(address)": "63791e3c",
              "symbol()": "95d89b41",
              "transferOwnership(address)": "f2fde38b",
              "transferTo(address,uint256)": "2ccb1b30"
            }
          },
          "irOptimized": "/// @use-src 0:\"@openzeppelin/contracts/access/Ownable.sol\", 1:\"@openzeppelin/contracts/utils/Context.sol\", 3:\"contracts/AiTextNFT.sol\"\nobject \"AiTextNFT_747\" {\n    code {\n        {\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"AiTextNFT_747\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            let _1 := add(memoryDataOffset, argSize)\n            if slt(sub(_1, memoryDataOffset), 64)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            let offset := mload(memoryDataOffset)\n            if gt(offset, sub(shl(64, 1), 1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            let value0 := abi_decode_string_fromMemory(add(memoryDataOffset, offset), _1)\n            let offset_1 := mload(add(memoryDataOffset, 32))\n            if gt(offset_1, sub(shl(64, 1), 1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            let value1 := abi_decode_string_fromMemory(add(memoryDataOffset, offset_1), _1)\n            /// @src 0:1269:1364  \"if (initialOwner == address(0)) {...\"\n            if /** @src 0:1273:1299  \"initialOwner == address(0)\" */ iszero(/** @src 1:735:745  \"msg.sender\" */ caller())\n            /// @src 0:1269:1364  \"if (initialOwner == address(0)) {...\"\n            {\n                /// @src 0:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:1322:1353  \"OwnableInvalidOwner(address(0))\" */ shl(224, 0x1e4fbdf7))\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                mstore(/** @src 0:1322:1353  \"OwnableInvalidOwner(address(0))\" */ 4, /** @src -1:-1:-1 */ 0)\n                /// @src 0:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                revert(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 36)\n            }\n            let _2 := sload(/** @src -1:-1:-1 */ 0)\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            sstore(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ or(and(_2, not(sub(shl(160, 1), 1))), /** @src 1:735:745  \"msg.sender\" */ caller()))\n            /// @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n            log3(/** @src -1:-1:-1 */ 0, 0, /** @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ and(_2, sub(shl(160, 1), 1)), /** @src 1:735:745  \"msg.sender\" */ caller())\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            sstore(/** @src 3:593:594  \"1\" */ 0x04, 0x01)\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            let newLen := mload(value0)\n            if gt(newLen, sub(shl(64, 1), 1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 3:593:594  \"1\" */ 0x04, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x24)\n            }\n            let _3 := sload(/** @src 3:593:594  \"1\" */ 0x01)\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            let length := /** @src -1:-1:-1 */ 0\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            length := shr(/** @src 3:593:594  \"1\" */ 0x01, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ _3)\n            let outOfPlaceEncoding := and(_3, /** @src 3:593:594  \"1\" */ 0x01)\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 3:593:594  \"1\" */ 0x04, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x24)\n            }\n            if gt(length, 31)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:593:594  \"1\" */ 0x01)\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 32)\n                let deleteStart := add(data, shr(5, add(newLen, 31)))\n                if lt(newLen, 32) { deleteStart := data }\n                let _4 := add(data, shr(5, add(length, 31)))\n                let start := deleteStart\n                for { }\n                lt(start, _4)\n                {\n                    start := add(start, /** @src 3:593:594  \"1\" */ 0x01)\n                }\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                {\n                    sstore(start, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            let srcOffset := /** @src -1:-1:-1 */ 0\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            srcOffset := 32\n            switch gt(newLen, 31)\n            case 1 {\n                let loopEnd := and(newLen, not(31))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:593:594  \"1\" */ 0x01)\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                let dstPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ srcOffset)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                for { } lt(i, loopEnd) { i := add(i, 32) }\n                {\n                    sstore(dstPtr, mload(add(value0, srcOffset)))\n                    dstPtr := add(dstPtr, /** @src 3:593:594  \"1\" */ 0x01)\n                    /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                    srcOffset := add(srcOffset, 32)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(value0, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                }\n                sstore(/** @src 3:593:594  \"1\" */ 0x01, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ add(shl(/** @src 3:593:594  \"1\" */ 0x01, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ newLen), /** @src 3:593:594  \"1\" */ 0x01))\n            }\n            default /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            {\n                let value := /** @src -1:-1:-1 */ 0\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                if newLen\n                {\n                    value := mload(add(value0, srcOffset))\n                }\n                sstore(/** @src 3:593:594  \"1\" */ 0x01, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ or(and(value, not(shr(shl(3, newLen), not(0)))), shl(/** @src 3:593:594  \"1\" */ 0x01, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ newLen)))\n            }\n            let newLen_1 := mload(value1)\n            if gt(newLen_1, sub(shl(64, 1), 1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 3:593:594  \"1\" */ 0x04, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x24)\n            }\n            let _5 := sload(/** @src 3:1384:1400  \"symbol = symbol_\" */ 0x02)\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            let length_1 := /** @src -1:-1:-1 */ 0\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            length_1 := shr(/** @src 3:593:594  \"1\" */ 0x01, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ _5)\n            let outOfPlaceEncoding_1 := and(_5, /** @src 3:593:594  \"1\" */ 0x01)\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            if iszero(outOfPlaceEncoding_1)\n            {\n                length_1 := and(length_1, 0x7f)\n            }\n            if eq(outOfPlaceEncoding_1, lt(length_1, 32))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 3:593:594  \"1\" */ 0x04, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x24)\n            }\n            if gt(length_1, 31)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:1384:1400  \"symbol = symbol_\" */ 0x02)\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                let data_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 32)\n                let deleteStart_1 := add(data_1, shr(5, add(newLen_1, 31)))\n                if lt(newLen_1, 32) { deleteStart_1 := data_1 }\n                let _6 := add(data_1, shr(5, add(length_1, 31)))\n                let start_1 := deleteStart_1\n                for { }\n                lt(start_1, _6)\n                {\n                    start_1 := add(start_1, /** @src 3:593:594  \"1\" */ 0x01)\n                }\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                {\n                    sstore(start_1, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            let srcOffset_1 := /** @src -1:-1:-1 */ 0\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            srcOffset_1 := 32\n            switch gt(newLen_1, 31)\n            case 1 {\n                let loopEnd_1 := and(newLen_1, not(31))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:1384:1400  \"symbol = symbol_\" */ 0x02)\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                let dstPtr_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ srcOffset_1)\n                let i_1 := /** @src -1:-1:-1 */ 0\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, 32) }\n                {\n                    sstore(dstPtr_1, mload(add(value1, srcOffset_1)))\n                    dstPtr_1 := add(dstPtr_1, /** @src 3:593:594  \"1\" */ 0x01)\n                    /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                    srcOffset_1 := add(srcOffset_1, 32)\n                }\n                if lt(loopEnd_1, newLen_1)\n                {\n                    let lastValue_1 := mload(add(value1, srcOffset_1))\n                    sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(3, newLen_1), 248), not(0)))))\n                }\n                sstore(/** @src 3:1384:1400  \"symbol = symbol_\" */ 0x02, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ add(shl(/** @src 3:593:594  \"1\" */ 0x01, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ newLen_1), /** @src 3:593:594  \"1\" */ 0x01))\n            }\n            default /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            {\n                let value_1 := /** @src -1:-1:-1 */ 0\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                if newLen_1\n                {\n                    value_1 := mload(add(value1, srcOffset_1))\n                }\n                sstore(/** @src 3:1384:1400  \"symbol = symbol_\" */ 0x02, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ or(and(value_1, not(shr(shl(3, newLen_1), not(0)))), shl(/** @src 3:593:594  \"1\" */ 0x01, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ newLen_1)))\n            }\n            let _7 := mload(64)\n            let _8 := datasize(\"AiTextNFT_747_deployed\")\n            codecopy(_7, dataoffset(\"AiTextNFT_747_deployed\"), _8)\n            return(_7, _8)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n        }\n        function abi_decode_string_fromMemory(offset, end) -> array\n        {\n            if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n            let length := mload(offset)\n            if gt(length, sub(shl(64, 1), 1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x24)\n            }\n            let array_1 := allocate_memory(add(and(add(length, 0x1f), not(31)), 0x20))\n            mstore(array_1, length)\n            if gt(add(add(offset, length), 0x20), end)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            mcopy(add(array_1, 0x20), add(offset, 0x20), length)\n            mstore(add(add(array_1, length), 0x20), /** @src -1:-1:-1 */ 0)\n            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n            array := array_1\n        }\n    }\n    /// @use-src 0:\"@openzeppelin/contracts/access/Ownable.sol\", 1:\"@openzeppelin/contracts/utils/Context.sol\", 3:\"contracts/AiTextNFT.sol\"\n    object \"AiTextNFT_747_deployed\" {\n        code {\n            {\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x0075a317 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0 := abi_decode_address()\n                        let offset := calldataload(36)\n                        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n                        let value1, value2 := abi_decode_string_calldata(add(4, offset), calldatasize())\n                        /// @src 3:1445:1489  \"if (msg.sender != market) revert NotMarket()\"\n                        if /** @src 3:1449:1469  \"msg.sender != market\" */ iszero(eq(/** @src 3:1449:1459  \"msg.sender\" */ caller(), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ and(sload(/** @src 3:1463:1469  \"market\" */ 0x03), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 3:1445:1489  \"if (msg.sender != market) revert NotMarket()\"\n                        {\n                            /// @src 3:1478:1489  \"NotMarket()\"\n                            mstore(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0, /** @src 3:1478:1489  \"NotMarket()\" */ shl(224, 0xc4bbea69))\n                            revert(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0, 4)\n                        }\n                        /// @src 3:2393:2425  \"tokenId = _mint(seller, content)\"\n                        let var_tokenId := /** @src 3:2403:2425  \"_mint(seller, content)\" */ fun_mint(value0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ abi_decode_available_length_string(/** @src 3:2403:2425  \"_mint(seller, content)\" */ value1, value2, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ calldatasize()))\n                        let memPos := mload(64)\n                        mstore(memPos, var_tokenId)\n                        return(memPos, 32)\n                    }\n                    case 0x06fdde03 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPtr := 0\n                        memPtr := mload(64)\n                        let ret := 0\n                        let slotValue := sload(/** @src 3:492:510  \"string public name\" */ 1)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        let length := extract_byte_array_length(slotValue)\n                        mstore(memPtr, length)\n                        switch and(slotValue, /** @src 3:492:510  \"string public name\" */ 1)\n                        case /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0 {\n                            mstore(add(memPtr, 0x20), and(slotValue, not(255)))\n                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), 0x20)\n                        }\n                        case 1 {\n                            mstore(0, /** @src 3:492:510  \"string public name\" */ 1)\n                            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                            let dataPos := keccak256(0, 0x20)\n                            let i := 0\n                            for { } lt(i, length) { i := add(i, 0x20) }\n                            {\n                                mstore(add(add(memPtr, i), 0x20), sload(dataPos))\n                                dataPos := add(dataPos, /** @src 3:492:510  \"string public name\" */ 1)\n                            }\n                            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                            ret := add(add(memPtr, i), 0x20)\n                        }\n                        finalize_allocation(memPtr, sub(ret, memPtr))\n                        let memPos_1 := mload(64)\n                        return(memPos_1, sub(abi_encode_string(memPos_1, memPtr), memPos_1))\n                    }\n                    case 0x13966db5 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _1 := sload(/** @src 3:829:851  \"uint256 public mintFee\" */ 10)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, _1)\n                        return(memPos_2, 32)\n                    }\n                    case 0x27427e31 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value := calldataload(4)\n                        /// @src 3:2833:2840  \"tokenId\"\n                        fun_requireExists(value)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        mstore(0, value)\n                        mstore(32, /** @src 3:2858:2868  \"_contentOf\" */ 0x05)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        let dataSlot := keccak256(0, 64)\n                        let memPtr_1 := 0\n                        memPtr_1 := mload(64)\n                        let ret_1 := 0\n                        let slotValue_1 := sload(dataSlot)\n                        let length_1 := extract_byte_array_length(slotValue_1)\n                        mstore(memPtr_1, length_1)\n                        switch and(slotValue_1, 1)\n                        case 0 {\n                            mstore(add(memPtr_1, 32), and(slotValue_1, not(255)))\n                            ret_1 := add(add(memPtr_1, shl(/** @src 3:2858:2868  \"_contentOf\" */ 0x05, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ iszero(iszero(length_1)))), 32)\n                        }\n                        case 1 {\n                            mstore(0, dataSlot)\n                            let dataPos_1 := keccak256(0, 32)\n                            let i_1 := 0\n                            for { } lt(i_1, length_1) { i_1 := add(i_1, 32) }\n                            {\n                                mstore(add(add(memPtr_1, i_1), 32), sload(dataPos_1))\n                                dataPos_1 := add(dataPos_1, 1)\n                            }\n                            ret_1 := add(add(memPtr_1, i_1), 32)\n                        }\n                        finalize_allocation(memPtr_1, sub(ret_1, memPtr_1))\n                        let memPos_3 := mload(64)\n                        return(memPos_3, sub(abi_encode_string(memPos_3, memPtr_1), memPos_3))\n                    }\n                    case 0x2c09bef7 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_1 := and(sload(/** @src 3:797:823  \"address public priceSetter\" */ 9), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1))\n                        let memPos_4 := mload(64)\n                        mstore(memPos_4, value_1)\n                        return(memPos_4, 32)\n                    }\n                    case 0x2ccb1b30 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_1 := abi_decode_address()\n                        let value_2 := calldataload(36)\n                        /// @src 3:1445:1489  \"if (msg.sender != market) revert NotMarket()\"\n                        if /** @src 3:1449:1469  \"msg.sender != market\" */ iszero(eq(/** @src 3:1449:1459  \"msg.sender\" */ caller(), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ and(sload(/** @src 3:1463:1469  \"market\" */ 0x03), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 3:1445:1489  \"if (msg.sender != market) revert NotMarket()\"\n                        {\n                            /// @src 3:1478:1489  \"NotMarket()\"\n                            mstore(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0, /** @src 3:1478:1489  \"NotMarket()\" */ shl(224, 0xc4bbea69))\n                            revert(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0, 4)\n                        }\n                        if /** @src 3:3398:3414  \"to != address(0)\" */ iszero(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ and(/** @src 3:3398:3414  \"to != address(0)\" */ value0_1, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1)))\n                        {\n                            let memPtr_2 := mload(64)\n                            mstore(memPtr_2, shl(229, 4594637))\n                            mstore(add(memPtr_2, 4), 32)\n                            mstore(add(memPtr_2, 36), 4)\n                            mstore(add(memPtr_2, 68), \"to=0\")\n                            revert(memPtr_2, 100)\n                        }\n                        /// @src 3:3448:3455  \"tokenId\"\n                        fun_requireExists(value_2)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        mstore(0, value_2)\n                        mstore(32, /** @src 3:3466:3473  \"_owners\" */ 0x08)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        let dataSlot_1 := keccak256(0, 64)\n                        sstore(/** @src 3:3466:3482  \"_owners[tokenId]\" */ dataSlot_1, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ or(and(sload(/** @src 3:3466:3482  \"_owners[tokenId]\" */ dataSlot_1), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ shl(160, 0xffffffffffffffffffffffff)), and(/** @src 3:3466:3487  \"_owners[tokenId] = to\" */ value0_1, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1))))\n                        mstore(0, value_2)\n                        mstore(32, /** @src 3:3497:3504  \"priceOf\" */ 0x06)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        sstore(keccak256(0, 64), 0)\n                        mstore(0, value_2)\n                        mstore(32, /** @src 3:3527:3536  \"isBuyable\" */ 0x07)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        let dataSlot_2 := keccak256(0, 64)\n                        sstore(dataSlot_2, and(sload(dataSlot_2), not(255)))\n                        return(0, 0)\n                    }\n                    case 0x4d02d6b5 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value_3 := calldataload(4)\n                        let value_4 := 0\n                        value_4 := calldataload(36)\n                        let _2 := and(value_4, sub(shl(160, 1), 1))\n                        if iszero(eq(value_4, _2)) { revert(0, 0) }\n                        /// @src 0:1500:1562  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        sstore(/** @src 3:1749:1762  \"mintFee = fee\" */ 0x0a, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ value_3)\n                        sstore(/** @src 3:1772:1800  \"mintFeeRecipient = recipient\" */ 0x0b, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ or(and(sload(/** @src 3:1772:1800  \"mintFeeRecipient = recipient\" */ 0x0b), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ shl(160, 0xffffffffffffffffffffffff)), _2))\n                        /// @src 3:1815:1845  \"MintFeeUpdated(fee, recipient)\"\n                        let _3 := /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ mload(64)\n                        mstore(_3, value_3)\n                        /// @src 3:1815:1845  \"MintFeeUpdated(fee, recipient)\"\n                        log2(_3, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 32, /** @src 3:1815:1845  \"MintFeeUpdated(fee, recipient)\" */ 0x6c4a253e5611751265eb9b93389dde6384df867caa938f4a032a3be815cdf881, _2)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        return(0, 0)\n                    }\n                    case 0x5aa5a488 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_5 := calldataload(4)\n                        /// @src 3:1445:1489  \"if (msg.sender != market) revert NotMarket()\"\n                        if /** @src 3:1449:1469  \"msg.sender != market\" */ iszero(eq(/** @src 3:1449:1459  \"msg.sender\" */ caller(), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ and(sload(/** @src 3:1463:1469  \"market\" */ 0x03), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 3:1445:1489  \"if (msg.sender != market) revert NotMarket()\"\n                        {\n                            /// @src 3:1478:1489  \"NotMarket()\"\n                            mstore(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0, /** @src 3:1478:1489  \"NotMarket()\" */ shl(224, 0xc4bbea69))\n                            revert(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0, 4)\n                        }\n                        /// @src 3:3117:3124  \"tokenId\"\n                        fun_requireExists(value_5)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        mstore(0, value_5)\n                        mstore(32, /** @src 3:3135:3144  \"isBuyable\" */ 0x07)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        let dataSlot_3 := keccak256(0, 64)\n                        sstore(dataSlot_3, and(sload(dataSlot_3), not(255)))\n                        return(0, 0)\n                    }\n                    case 0x61b8ce8c {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _4 := sload(4)\n                        let memPos_5 := mload(64)\n                        mstore(memPos_5, _4)\n                        return(memPos_5, 32)\n                    }\n                    case 0x6352211e {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_6 := calldataload(4)\n                        /// @src 3:2981:2988  \"tokenId\"\n                        fun_requireExists(value_6)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        mstore(0, value_6)\n                        mstore(32, /** @src 3:3006:3013  \"_owners\" */ 0x08)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        let cleaned := and(sload(keccak256(0, 64)), sub(shl(160, 1), 1))\n                        let memPos_6 := mload(64)\n                        mstore(memPos_6, cleaned)\n                        return(memPos_6, 32)\n                    }\n                    case 0x63791e3c {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_2 := abi_decode_address()\n                        /// @src 0:1500:1562  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        let _5 := and(value0_2, sub(shl(160, 1), 1))\n                        sstore(/** @src 3:1927:1947  \"priceSetter = setter\" */ 0x09, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ or(and(sload(/** @src 3:1927:1947  \"priceSetter = setter\" */ 0x09), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ shl(160, 0xffffffffffffffffffffffff)), _5))\n                        /// @src 3:1962:1988  \"PriceSetterUpdated(setter)\"\n                        log2(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0, 0, /** @src 3:1962:1988  \"PriceSetterUpdated(setter)\" */ 0xe83e5b9f87ec16fe8db2c5d37c4f81ed374f6c9bf946a10330bf278826a97dc5, _5)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        return(0, 0)\n                    }\n                    case 0x6dcea85f {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_3 := abi_decode_address()\n                        /// @src 0:1500:1562  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        let _6 := and(/** @src 3:1580:1595  \"m != address(0)\" */ value0_3, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1))\n                        if /** @src 3:1580:1595  \"m != address(0)\" */ iszero(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ _6)\n                        {\n                            let memPtr_3 := mload(64)\n                            mstore(memPtr_3, shl(229, 4594637))\n                            mstore(add(memPtr_3, 4), 32)\n                            mstore(add(memPtr_3, 36), 8)\n                            mstore(add(memPtr_3, 68), \"market=0\")\n                            revert(memPtr_3, 100)\n                        }\n                        sstore(/** @src 3:1618:1628  \"market = m\" */ 0x03, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ or(and(sload(/** @src 3:1618:1628  \"market = m\" */ 0x03), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ shl(160, 0xffffffffffffffffffffffff)), _6))\n                        /// @src 3:1643:1655  \"MarketSet(m)\"\n                        log2(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0, 0, /** @src 3:1643:1655  \"MarketSet(m)\" */ 0xe307206b150a74b2a5d43a35703be791342ca123c12a507c5f679cf1d011d1b9, _6)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        return(0, 0)\n                    }\n                    case 0x715018a6 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        /// @src 0:1500:1562  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        let _7 := sload(0)\n                        sstore(0, and(_7, shl(160, 0xffffffffffffffffffffffff)))\n                        /// @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                        log3(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0, 0, /** @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ and(_7, sub(shl(160, 1), 1)), 0)\n                        return(0, 0)\n                    }\n                    case 0x765b0c36 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_7 := and(sload(/** @src 3:857:888  \"address public mintFeeRecipient\" */ 11), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1))\n                        let memPos_7 := mload(64)\n                        mstore(memPos_7, value_7)\n                        return(memPos_7, 32)\n                    }\n                    case 0x80f55605 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_8 := and(sload(/** @src 3:542:563  \"address public market\" */ 3), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1))\n                        let memPos_8 := mload(64)\n                        mstore(memPos_8, value_8)\n                        return(memPos_8, 32)\n                    }\n                    case 0x86b17619 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_9 := calldataload(4)\n                        /// @src 3:1445:1489  \"if (msg.sender != market) revert NotMarket()\"\n                        if /** @src 3:1449:1469  \"msg.sender != market\" */ iszero(eq(/** @src 3:1449:1459  \"msg.sender\" */ caller(), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ and(sload(/** @src 3:1463:1469  \"market\" */ 0x03), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 3:1445:1489  \"if (msg.sender != market) revert NotMarket()\"\n                        {\n                            /// @src 3:1478:1489  \"NotMarket()\"\n                            mstore(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0, /** @src 3:1478:1489  \"NotMarket()\" */ shl(224, 0xc4bbea69))\n                            revert(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0, 4)\n                        }\n                        /// @src 3:3255:3262  \"tokenId\"\n                        fun_requireExists(value_9)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        mstore(0, value_9)\n                        mstore(32, /** @src 3:3273:3282  \"isBuyable\" */ 0x07)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        let dataSlot_4 := keccak256(0, 64)\n                        sstore(dataSlot_4, or(and(sload(dataSlot_4), not(255)), 1))\n                        return(0, 0)\n                    }\n                    case 0x8da5cb5b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let cleaned_1 := and(sload(0), sub(shl(160, 1), 1))\n                        let memPos_9 := mload(64)\n                        mstore(memPos_9, cleaned_1)\n                        return(memPos_9, 32)\n                    }\n                    case 0x95d89b41 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPtr_4 := 0\n                        memPtr_4 := mload(64)\n                        let ret_2 := 0\n                        let slotValue_2 := sload(/** @src 3:516:536  \"string public symbol\" */ 2)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        let length_2 := extract_byte_array_length(slotValue_2)\n                        mstore(memPtr_4, length_2)\n                        switch and(slotValue_2, 1)\n                        case 0 {\n                            mstore(add(memPtr_4, 0x20), and(slotValue_2, not(255)))\n                            ret_2 := add(add(memPtr_4, shl(5, iszero(iszero(length_2)))), 0x20)\n                        }\n                        case 1 {\n                            mstore(0, /** @src 3:516:536  \"string public symbol\" */ 2)\n                            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                            let dataPos_2 := keccak256(0, 0x20)\n                            let i_2 := 0\n                            for { } lt(i_2, length_2) { i_2 := add(i_2, 0x20) }\n                            {\n                                mstore(add(add(memPtr_4, i_2), 0x20), sload(dataPos_2))\n                                dataPos_2 := add(dataPos_2, 1)\n                            }\n                            ret_2 := add(add(memPtr_4, i_2), 0x20)\n                        }\n                        finalize_allocation(memPtr_4, sub(ret_2, memPtr_4))\n                        let memPos_10 := mload(64)\n                        return(memPos_10, sub(abi_encode_string(memPos_10, memPtr_4), memPos_10))\n                    }\n                    case 0xb9186d7d {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, calldataload(4))\n                        mstore(32, /** @src 3:652:694  \"mapping(uint256 => uint256) public priceOf\" */ 6)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        let _8 := sload(keccak256(0, 64))\n                        let memPos_11 := mload(64)\n                        mstore(memPos_11, _8)\n                        return(memPos_11, 32)\n                    }\n                    case 0xd85d3d27 {\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let offset_1 := calldataload(4)\n                        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n                        let value0_4, value1_1 := abi_decode_string_calldata(add(4, offset_1), calldatasize())\n                        if /** @src 3:2129:2149  \"market != address(0)\" */ iszero(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ and(sload(/** @src 3:2129:2135  \"market\" */ 0x03), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1)))\n                        {\n                            let memPtr_5 := mload(64)\n                            mstore(memPtr_5, shl(229, 4594637))\n                            mstore(add(memPtr_5, 4), 32)\n                            mstore(add(memPtr_5, 36), 12)\n                            mstore(add(memPtr_5, 68), \"market unset\")\n                            revert(memPtr_5, 100)\n                        }\n                        /// @src 3:2176:2212  \"tokenId = _mint(msg.sender, content)\"\n                        let var_tokenId_1 := /** @src 3:2186:2212  \"_mint(msg.sender, content)\" */ fun_mint(/** @src 3:2192:2202  \"msg.sender\" */ caller(), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ abi_decode_available_length_string(/** @src 3:2186:2212  \"_mint(msg.sender, content)\" */ value0_4, value1_1, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ calldatasize()))\n                        /// @src 3:2176:2212  \"tokenId = _mint(msg.sender, content)\"\n                        fun_collectMintFee()\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        let memPos_12 := mload(64)\n                        mstore(memPos_12, var_tokenId_1)\n                        return(memPos_12, 32)\n                    }\n                    case 0xe738c7c8 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, calldataload(4))\n                        mstore(32, /** @src 3:700:741  \"mapping(uint256 => bool) public isBuyable\" */ 7)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        let value_10 := and(sload(keccak256(0, 64)), 0xff)\n                        let memPos_13 := mload(64)\n                        mstore(memPos_13, iszero(iszero(value_10)))\n                        return(memPos_13, 32)\n                    }\n                    case 0xf2fde38b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_5 := abi_decode_address()\n                        /// @src 0:1500:1562  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        let _9 := and(/** @src 0:2627:2649  \"newOwner == address(0)\" */ value0_5, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1))\n                        /// @src 0:2623:2714  \"if (newOwner == address(0)) {...\"\n                        if /** @src 0:2627:2649  \"newOwner == address(0)\" */ iszero(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ _9)\n                        /// @src 0:2623:2714  \"if (newOwner == address(0)) {...\"\n                        {\n                            /// @src 0:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                            mstore(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0, /** @src 0:2672:2703  \"OwnableInvalidOwner(address(0))\" */ shl(224, 0x1e4fbdf7))\n                            /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                            mstore(4, 0)\n                            /// @src 0:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                            revert(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0, 36)\n                        }\n                        let _10 := sload(0)\n                        sstore(0, or(and(_10, shl(160, 0xffffffffffffffffffffffff)), _9))\n                        /// @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                        log3(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0, 0, /** @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ and(_10, sub(shl(160, 1), 1)), /** @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ _9)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        return(0, 0)\n                    }\n                    case 0xf7d97577 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value_11 := calldataload(4)\n                        let value_12 := calldataload(36)\n                        /// @src 3:2522:2529  \"tokenId\"\n                        fun_requireExists(value_11)\n                        /// @src 3:2548:2598  \"msg.sender == owner() || msg.sender == priceSetter\"\n                        let expr := /** @src 3:2548:2569  \"msg.sender == owner()\" */ eq(/** @src 3:2548:2558  \"msg.sender\" */ caller(), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ and(sload(0), sub(shl(160, 1), 1)))\n                        /// @src 3:2548:2598  \"msg.sender == owner() || msg.sender == priceSetter\"\n                        if iszero(expr)\n                        {\n                            expr := /** @src 3:2573:2598  \"msg.sender == priceSetter\" */ eq(/** @src 3:2548:2558  \"msg.sender\" */ caller(), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ and(sload(/** @src 3:2587:2598  \"priceSetter\" */ 0x09), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1)))\n                        }\n                        if iszero(expr)\n                        {\n                            let memPtr_6 := mload(64)\n                            mstore(memPtr_6, shl(229, 4594637))\n                            mstore(add(memPtr_6, 4), 32)\n                            mstore(add(memPtr_6, 36), 10)\n                            mstore(add(memPtr_6, 68), \"not setter\")\n                            revert(memPtr_6, 100)\n                        }\n                        mstore(0, value_11)\n                        mstore(32, /** @src 3:2623:2630  \"priceOf\" */ 0x06)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        sstore(keccak256(0, 64), value_12)\n                        mstore(0, value_11)\n                        mstore(32, /** @src 3:2657:2666  \"isBuyable\" */ 0x07)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        let dataSlot_5 := keccak256(0, 64)\n                        sstore(dataSlot_5, or(and(sload(dataSlot_5), not(255)), 1))\n                        /// @src 3:2697:2721  \"PriceSet(tokenId, price)\"\n                        let _11 := /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ mload(64)\n                        mstore(_11, value_12)\n                        /// @src 3:2697:2721  \"PriceSet(tokenId, price)\"\n                        log2(_11, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 32, /** @src 3:2697:2721  \"PriceSet(tokenId, price)\" */ 0xa0f1665b7b659537b52deec61ea64d134a3bccda74c7f4e79f2246e7a8187a8a, value_11)\n                        /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                        return(0, 0)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_string_calldata(offset, end) -> arrayPos, length\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                length := calldataload(offset)\n                if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                arrayPos := add(offset, 0x20)\n                if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                mstore(headStart, 32)\n                let length := mload(value0)\n                mstore(add(headStart, 32), length)\n                mcopy(add(headStart, 64), add(value0, 32), length)\n                mstore(add(add(headStart, length), 64), 0)\n                tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n            }\n            function array_allocation_size_string(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                size := add(and(add(length, 31), not(31)), 0x20)\n            }\n            function abi_decode_available_length_string(src, length, end) -> array\n            {\n                let _1 := array_allocation_size_string(length)\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, _1)\n                array := memPtr\n                mstore(memPtr, length)\n                if gt(add(src, length), end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                calldatacopy(add(memPtr, 0x20), src, length)\n                mstore(add(add(memPtr, length), 0x20), /** @src -1:-1:-1 */ 0)\n            }\n            /// @ast-id 671 @src 3:3566:3914  \"function _mint(address seller, string memory content) internal returns (uint256 tokenId) {...\"\n            function fun_mint(var_seller, var_content_mpos) -> var_tokenId\n            {\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                let _1 := sload(/** @src 3:3675:3683  \"nextId++\" */ 0x04)\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                if eq(_1, not(0))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ shl(224, 0x4e487b71))\n                    mstore(/** @src 3:3675:3683  \"nextId++\" */ 0x04, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x11)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x24)\n                }\n                sstore(/** @src 3:3675:3683  \"nextId++\" */ 0x04, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ add(_1, 1))\n                /// @src 3:3665:3683  \"tokenId = nextId++\"\n                var_tokenId := _1\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ _1)\n                mstore(0x20, /** @src 3:3693:3700  \"_owners\" */ 0x08)\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                let dataSlot := keccak256(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x40)\n                sstore(/** @src 3:3693:3709  \"_owners[tokenId]\" */ dataSlot, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ or(and(sload(/** @src 3:3693:3709  \"_owners[tokenId]\" */ dataSlot), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ shl(160, 0xffffffffffffffffffffffff)), and(/** @src 3:3693:3718  \"_owners[tokenId] = seller\" */ var_seller, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1))))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ _1)\n                mstore(0x20, /** @src 3:3728:3738  \"_contentOf\" */ 0x05)\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                let dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x40)\n                let newLen := mload(var_content_mpos)\n                if gt(newLen, 0xffffffffffffffff)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ shl(224, 0x4e487b71))\n                    mstore(/** @src 3:3675:3683  \"nextId++\" */ 0x04, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x24)\n                }\n                let _2 := extract_byte_array_length(sload(dataSlot_1))\n                if gt(_2, 31)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ dataSlot_1)\n                    let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x20)\n                    let deleteStart := add(data, shr(/** @src 3:3728:3738  \"_contentOf\" */ 0x05, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ add(newLen, 31)))\n                    if lt(newLen, 0x20) { deleteStart := data }\n                    let _3 := add(data, shr(/** @src 3:3728:3738  \"_contentOf\" */ 0x05, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ add(_2, 31)))\n                    let start := deleteStart\n                    for { } lt(start, _3) { start := add(start, 1) }\n                    {\n                        sstore(start, /** @src -1:-1:-1 */ 0)\n                    }\n                }\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                let srcOffset := /** @src -1:-1:-1 */ 0\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                srcOffset := 0x20\n                switch gt(newLen, 31)\n                case 1 {\n                    let loopEnd := and(newLen, not(31))\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ dataSlot_1)\n                    let dstPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ srcOffset)\n                    let i := /** @src -1:-1:-1 */ 0\n                    /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                    for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                    {\n                        sstore(dstPtr, mload(add(var_content_mpos, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, 0x20)\n                    }\n                    if lt(loopEnd, newLen)\n                    {\n                        let lastValue := mload(add(var_content_mpos, srcOffset))\n                        sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                    }\n                    sstore(dataSlot_1, add(shl(1, newLen), 1))\n                }\n                default {\n                    let value := /** @src -1:-1:-1 */ 0\n                    /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                    if newLen\n                    {\n                        value := mload(add(var_content_mpos, srcOffset))\n                    }\n                    sstore(dataSlot_1, or(and(value, not(shr(shl(3, newLen), not(0)))), shl(1, newLen)))\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ _1)\n                mstore(0x20, /** @src 3:3767:3776  \"isBuyable\" */ 0x07)\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                let dataSlot_2 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x40)\n                sstore(dataSlot_2, and(sload(dataSlot_2), not(255)))\n                /// @src 3:3809:3845  \"Minted(tokenId, msg.sender, content)\"\n                let _4 := /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ mload(0x40)\n                /// @src 3:3809:3845  \"Minted(tokenId, msg.sender, content)\"\n                log3(_4, sub(abi_encode_string(_4, var_content_mpos), _4), 0x3b8a974a6971dbe70c8718ec80406b2790d2aa5477b6a5bed3d94fa19e06d60d, _1, /** @src 3:3825:3835  \"msg.sender\" */ caller())\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                let cleaned := and(sload(/** @src 3:3868:3874  \"market\" */ 0x03), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1))\n                /// @src 3:3855:3907  \"IAiLaunchpad(market).autoListMinted(seller, tokenId)\"\n                let _5 := /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ mload(0x40)\n                /// @src 3:3855:3907  \"IAiLaunchpad(market).autoListMinted(seller, tokenId)\"\n                mstore(_5, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ shl(227, 0x0fb011cd))\n                mstore(/** @src 3:3855:3907  \"IAiLaunchpad(market).autoListMinted(seller, tokenId)\" */ add(_5, /** @src 3:3675:3683  \"nextId++\" */ 0x04), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ and(var_seller, sub(shl(160, 1), 1)))\n                mstore(add(/** @src 3:3855:3907  \"IAiLaunchpad(market).autoListMinted(seller, tokenId)\" */ _5, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 36), _1)\n                /// @src 3:3855:3907  \"IAiLaunchpad(market).autoListMinted(seller, tokenId)\"\n                let _6 := call(gas(), cleaned, /** @src -1:-1:-1 */ 0, /** @src 3:3855:3907  \"IAiLaunchpad(market).autoListMinted(seller, tokenId)\" */ _5, 68, _5, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x20)\n                /// @src 3:3855:3907  \"IAiLaunchpad(market).autoListMinted(seller, tokenId)\"\n                if iszero(_6)\n                {\n                    /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                    let pos := mload(0x40)\n                    returndatacopy(pos, /** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ returndatasize())\n                    revert(pos, returndatasize())\n                }\n                /// @src 3:3855:3907  \"IAiLaunchpad(market).autoListMinted(seller, tokenId)\"\n                if _6\n                {\n                    let _7 := /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x20\n                    /// @src 3:3855:3907  \"IAiLaunchpad(market).autoListMinted(seller, tokenId)\"\n                    if gt(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x20, /** @src 3:3855:3907  \"IAiLaunchpad(market).autoListMinted(seller, tokenId)\" */ returndatasize()) { _7 := returndatasize() }\n                    finalize_allocation(_5, _7)\n                    /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                    if slt(sub(/** @src 3:3855:3907  \"IAiLaunchpad(market).autoListMinted(seller, tokenId)\" */ add(_5, _7), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ _5), 0x20)\n                    {\n                        revert(/** @src -1:-1:-1 */ 0, 0)\n                    }\n                }\n            }\n            /// @ast-id 746 @src 3:4340:4473  \"function _requireExists(uint256 tokenId) internal view {...\"\n            function fun_requireExists(var_tokenId)\n            {\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ var_tokenId)\n                mstore(0x20, /** @src 3:4409:4416  \"_owners\" */ 0x08)\n                /// @src 3:4405:4466  \"if (_owners[tokenId] == address(0)) revert NonexistentToken()\"\n                if /** @src 3:4409:4439  \"_owners[tokenId] == address(0)\" */ iszero(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ and(sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 0x40)), sub(shl(160, 1), 1)))\n                /// @src 3:4405:4466  \"if (_owners[tokenId] == address(0)) revert NonexistentToken()\"\n                {\n                    /// @src 3:4448:4466  \"NonexistentToken()\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 3:4448:4466  \"NonexistentToken()\" */ shl(227, 0x163a09e1))\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 3:4448:4466  \"NonexistentToken()\" */ 4)\n                }\n            }\n            /// @ast-id 84 @src 0:1796:1958  \"function _checkOwner() internal view virtual {...\"\n            function fun_checkOwner()\n            {\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                let cleaned := and(sload(/** @src 0:1710:1716  \"_owner\" */ 0x00), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1))\n                /// @src 0:1851:1952  \"if (owner() != _msgSender()) {...\"\n                if /** @src 0:1855:1878  \"owner() != _msgSender()\" */ iszero(eq(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ cleaned, /** @src 1:735:745  \"msg.sender\" */ caller()))\n                /// @src 0:1851:1952  \"if (owner() != _msgSender()) {...\"\n                {\n                    /// @src 0:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                    mstore(/** @src 0:1710:1716  \"_owner\" */ 0x00, /** @src 0:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\" */ shl(224, 0x118cdaa7))\n                    /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                    mstore(/** @src 0:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\" */ 4, /** @src 1:735:745  \"msg.sender\" */ caller())\n                    /// @src 0:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                    revert(/** @src 0:1710:1716  \"_owner\" */ 0x00, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ 36)\n                }\n            }\n            /// @ast-id 728 @src 3:3920:4334  \"function _collectMintFee() internal {...\"\n            function fun_collectMintFee()\n            {\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                let _1 := sload(/** @src 3:3970:3977  \"mintFee\" */ 0x0a)\n                /// @src 3:3966:4071  \"if (mintFee == 0) {...\"\n                if /** @src 3:3970:3982  \"mintFee == 0\" */ iszero(_1)\n                /// @src 3:3966:4071  \"if (mintFee == 0) {...\"\n                {\n                    /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                    if iszero(/** @src 3:4006:4020  \"msg.value == 0\" */ iszero(/** @src 3:4006:4015  \"msg.value\" */ callvalue()))\n                    /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                    {\n                        let memPtr := mload(64)\n                        mstore(memPtr, shl(229, 4594637))\n                        mstore(add(memPtr, 4), 32)\n                        mstore(add(memPtr, 36), 15)\n                        mstore(add(memPtr, 68), \"no fee required\")\n                        revert(memPtr, 100)\n                    }\n                    /// @src 3:4054:4061  \"return;\"\n                    leave\n                }\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                if iszero(/** @src 3:4088:4108  \"msg.value == mintFee\" */ eq(/** @src 3:4088:4097  \"msg.value\" */ callvalue(), /** @src 3:4088:4108  \"msg.value == mintFee\" */ _1))\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                {\n                    let memPtr_1 := mload(64)\n                    mstore(memPtr_1, shl(229, 4594637))\n                    mstore(add(memPtr_1, 4), 32)\n                    mstore(add(memPtr_1, 36), 12)\n                    mstore(add(memPtr_1, 68), \"bad mint fee\")\n                    revert(memPtr_1, 100)\n                }\n                let cleaned := and(sload(/** @src 3:4155:4171  \"mintFeeRecipient\" */ 0x0b), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1))\n                /// @src 3:4155:4214  \"mintFeeRecipient == address(0) ? owner() : mintFeeRecipient\"\n                let expr := /** @src -1:-1:-1 */ 0\n                /// @src 3:4155:4214  \"mintFeeRecipient == address(0) ? owner() : mintFeeRecipient\"\n                switch /** @src 3:4155:4185  \"mintFeeRecipient == address(0)\" */ iszero(/** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ cleaned)\n                case /** @src 3:4155:4214  \"mintFeeRecipient == address(0) ? owner() : mintFeeRecipient\" */ 0 { expr := cleaned }\n                default {\n                    expr := /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ and(sload(/** @src -1:-1:-1 */ 0), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1))\n                }\n                /// @src 3:4238:4283  \"payable(recipient).call{value: msg.value}(\\\"\\\")\"\n                let expr_component := call(gas(), /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ and(/** @src 3:4238:4256  \"payable(recipient)\" */ expr, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ sub(shl(160, 1), 1)), /** @src 3:4088:4097  \"msg.value\" */ callvalue(), /** @src -1:-1:-1 */ 0, 0, 0, 0)\n                /// @src 3:4238:4283  \"payable(recipient).call{value: msg.value}(\\\"\\\")\"\n                let data := /** @src -1:-1:-1 */ 0\n                /// @src 3:456:4475  \"contract AiTextNFT is Ownable {...\"\n                switch returndatasize()\n                case 0 { data := 96 }\n                default {\n                    let _2 := returndatasize()\n                    let _3 := array_allocation_size_string(_2)\n                    let memPtr_2 := mload(64)\n                    finalize_allocation(memPtr_2, _3)\n                    mstore(memPtr_2, _2)\n                    data := memPtr_2\n                    returndatacopy(add(memPtr_2, 0x20), /** @src -1:-1:-1 */ 0, /** @src 3:456:4475  \"contract AiTextNFT is Ownable {...\" */ returndatasize())\n                }\n                if iszero(expr_component)\n                {\n                    let memPtr_3 := mload(64)\n                    mstore(memPtr_3, shl(229, 4594637))\n                    mstore(add(memPtr_3, 4), 32)\n                    mstore(add(memPtr_3, 36), 19)\n                    mstore(add(memPtr_3, 68), \"fee transfer failed\")\n                    revert(memPtr_3, 100)\n                }\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220f12846ff1da9cded548c9602eb6f14478f3813754eed0e4e81c5b4b40b54966364736f6c634300081c0033\"\n    }\n}\n",
          "hash": "8cb463c0c23ed23b1379ff70e98c8d587352a5ebf08656540af2009264dc1b6f",
          "factoryDependencies": {}
        },
        "IAiLaunchpad": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "seller",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "autoListMinted",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "listingId",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"autoListMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AiTextNFT.sol\":\"IAiLaunchpad\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"contracts/AiTextNFT.sol\":{\"keccak256\":\"0xe8516d102b7dd4163237aad7dc943cdf154f8dce5f9d64981ac25d4fb8b78fb5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://804d5a7dae15c7f7b90664f27ecfa58fb83f4ca8c19e7e64c8a1c660311bc70b\",\"dweb:/ipfs/QmPtfWRcFaVSU49PLotpmjR5iJmeR25QuaFVAPndXHam4d\"]}},\"version\":1}",
          "evm": {
            "methodIdentifiers": {
              "autoListMinted(address,uint256)": "7d808e68"
            }
          },
          "irOptimized": ""
        }
      },
      "contracts/Luanchpad.sol": {
        "AiLaunchpad": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "nft_",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "feeRecipient_",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeBps_",
                  "type": "uint96"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "OwnableInvalidOwner",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "OwnableUnauthorizedAccount",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "ReentrancyGuardReentrantCall",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "listingId",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "buyer",
                  "type": "address"
                }
              ],
              "name": "Bought",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "listingId",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "name": "Listed",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "seller",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "autoListMinted",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "listingId",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "listingId",
                  "type": "uint256"
                }
              ],
              "name": "buy",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "feeBps",
              "outputs": [
                {
                  "internalType": "uint96",
                  "name": "",
                  "type": "uint96"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "feeRecipient",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "listings",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "seller",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "nft",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "bps",
                  "type": "uint96"
                }
              ],
              "name": "setFee",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "metadata": {
            "llvm_arguments": [],
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Default",
              "level_middle_end_size": "Z"
            },
            "revive_pallet_version": null,
            "revive_version": "0.2.0+commit.e94432e.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient_\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeBps_\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Listed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"autoListMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBps\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"bps\",\"type\":\"uint96\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Luanchpad.sol\":\"AiLaunchpad\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a\",\"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA\"]},\"contracts/AiTextNFT.sol\":{\"keccak256\":\"0xe8516d102b7dd4163237aad7dc943cdf154f8dce5f9d64981ac25d4fb8b78fb5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://804d5a7dae15c7f7b90664f27ecfa58fb83f4ca8c19e7e64c8a1c660311bc70b\",\"dweb:/ipfs/QmPtfWRcFaVSU49PLotpmjR5iJmeR25QuaFVAPndXHam4d\"]},\"contracts/Luanchpad.sol\":{\"keccak256\":\"0x1c3566bd4410a613eb368ba2137499aee6120efcdd8c3b779bf2b01ade6cf523\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5038a2cc7de47c2148c7ba5612d6dc08a1ca5ae296bfb72cff78dcacb912919c\",\"dweb:/ipfs/QmcXL2XVtimkuEGxq2YVbiYv3wrQtBVDnqQUWS82pn5M5t\"]}},\"version\":1}",
            "solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 204/65824 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 5327\n// Code size = 18770 bytes\n\n      : @0 (gas: 7)\n     0: sp = sp + 0xffffffffffffffe8\n     3: u64 [sp + 0x10] = ra\n     6: u64 [sp + 0x8] = s0\n     9: u64 [sp] = s1\n    11: s1 = 0x200c8\n    16: s0 = i32 [0x200c8]\n    21: jump @3 if s0 == 0\n      : @1 (gas: 5)\n    24: a0 = 0x30100\n    29: i32 a0 = a0 + 0\n    31: i32 a1 = s1 + 0\n    33: ecalli 7 // 'get_immutable_data'\n    35: fallthrough\n      : @2 (gas: 3)\n    36: a0 = i32 [0x200c8]\n    41: u32 [0x200c8] = 0\n    46: jump @4 if a0 <u s0\n      : @3 (gas: 5)\n    49: ra = u64 [sp + 0x10]\n    52: s0 = u64 [sp + 0x8]\n    55: s1 = u64 [sp]\n    57: sp = sp + 0x18\n    60: ret\n      : @4 (gas: 1)\n    62: trap\n      : @5 (gas: 2)\n    63: a1 = i32 [0x200c8]\n    68: jump @70 if a1 == 0\n      : @6 (gas: 4)\n    72: a0 = 0x30100\n    77: i32 a0 = a0 + 0\n    79: ecalli 14 // 'set_immutable_data'\n    81: jump @70\n      : @7 (gas: 8)\n    84: sp = sp + 0xfffffffffffffff0\n    87: u64 [sp + 0x8] = ra\n    90: u64 [sp] = s0\n    92: a2 = a1\n    94: s0 = a0\n    96: a1 = 0x20\n    99: a0 = a2\n   101: ra = 2, jump @16\n      : @8 [@dyn 1] (gas: 100)\n   106: a1 = u8 [a0 + 0x1]\n   109: a2 = u8 [a0]\n   111: a3 = u8 [a0 + 0x2]\n   114: a4 = u8 [a0 + 0x3]\n   117: a1 = a1 << 0x8\n   120: a1 = a1 | a2\n   123: a3 = a3 << 0x10\n   126: a4 = a4 << 0x18\n   129: a3 = a3 | a4\n   132: a1 = a1 | a3\n   135: a2 = u8 [a0 + 0x5]\n   138: a3 = u8 [a0 + 0x4]\n   141: a4 = u8 [a0 + 0x6]\n   144: a5 = u8 [a0 + 0x7]\n   147: a2 = a2 << 0x8\n   150: a2 = a2 | a3\n   153: a4 = a4 << 0x10\n   156: a5 = a5 << 0x18\n   159: a4 = a4 | a5\n   162: a2 = a2 | a4\n   165: a2 = a2 << 0x20\n   168: t0 = a2 | a1\n   171: a2 = u8 [a0 + 0x9]\n   174: a3 = u8 [a0 + 0x8]\n   177: a4 = u8 [a0 + 0xa]\n   180: a5 = u8 [a0 + 0xb]\n   183: a2 = a2 << 0x8\n   186: a2 = a2 | a3\n   189: a4 = a4 << 0x10\n   192: a5 = a5 << 0x18\n   195: a4 = a4 | a5\n   198: a2 = a2 | a4\n   201: a3 = u8 [a0 + 0xd]\n   204: a4 = u8 [a0 + 0xc]\n   207: a5 = u8 [a0 + 0xe]\n   210: a1 = u8 [a0 + 0xf]\n   213: a3 = a3 << 0x8\n   216: a3 = a3 | a4\n   219: a5 = a5 << 0x10\n   222: a1 = a1 << 0x18\n   225: a1 = a1 | a5\n   228: a1 = a1 | a3\n   231: a1 = a1 << 0x20\n   234: t1 = a1 | a2\n   237: a1 = u8 [a0 + 0x11]\n   240: a3 = u8 [a0 + 0x10]\n   243: a4 = u8 [a0 + 0x12]\n   246: a5 = u8 [a0 + 0x13]\n   249: a1 = a1 << 0x8\n   252: a1 = a1 | a3\n   255: a4 = a4 << 0x10\n   258: a5 = a5 << 0x18\n   261: a4 = a4 | a5\n   264: a1 = a1 | a4\n   267: a3 = u8 [a0 + 0x15]\n   270: a4 = u8 [a0 + 0x14]\n   273: a5 = u8 [a0 + 0x16]\n   276: a2 = u8 [a0 + 0x17]\n   279: a3 = a3 << 0x8\n   282: a3 = a3 | a4\n   285: a5 = a5 << 0x10\n   288: a2 = a2 << 0x18\n   291: a2 = a2 | a5\n   294: a2 = a2 | a3\n   297: a2 = a2 << 0x20\n   300: a3 = a2 | a1\n   303: a1 = u8 [a0 + 0x19]\n   306: a2 = u8 [a0 + 0x18]\n   309: a4 = u8 [a0 + 0x1a]\n   312: a5 = u8 [a0 + 0x1b]\n   315: a1 = a1 << 0x8\n   318: a1 = a1 | a2\n   321: a4 = a4 << 0x10\n   324: a5 = a5 << 0x18\n   327: a4 = a4 | a5\n   330: a1 = a1 | a4\n   333: a2 = u8 [a0 + 0x1d]\n   336: a4 = u8 [a0 + 0x1c]\n   339: a5 = u8 [a0 + 0x1e]\n   342: a0 = u8 [a0 + 0x1f]\n   345: a2 = a2 << 0x8\n   348: a2 = a2 | a4\n   351: a5 = a5 << 0x10\n   354: a0 = a0 << 0x18\n   357: a0 = a0 | a5\n   360: a0 = a0 | a2\n   363: a0 = a0 << 0x20\n   366: a0 = a0 | a1\n   369: a0 = reverse a0\n   371: a1 = reverse a3\n   373: a2 = reverse t1\n   375: a3 = reverse t0\n   377: u64 [s0 + 0x18] = a3\n   380: u64 [s0 + 0x10] = a2\n   383: u64 [s0 + 0x8] = a1\n   386: u64 [s0] = a0\n   388: ra = u64 [sp + 0x8]\n   391: s0 = u64 [sp]\n   393: sp = sp + 0x10\n   396: ret\n      : @9 (gas: 12)\n   398: sp = sp + 0xffffffffffffffd8\n   401: u64 [sp + 0x20] = ra\n   404: u64 [sp + 0x18] = s0\n   407: u64 [sp + 0x10] = s1\n   410: a2 = u64 [a1]\n   412: u64 [sp + 0x8] = a2\n   415: a2 = u64 [a1 + 0x8]\n   418: u64 [sp] = a2\n   420: s0 = u64 [a1 + 0x10]\n   423: s1 = u64 [a1 + 0x18]\n   426: a1 = 0x20\n   429: ra = 4, jump @16\n      : @10 [@dyn 2] (gas: 71)\n   434: a1 = reverse s1\n   436: a2 = reverse s0\n   438: a3 = u64 [sp]\n   440: a3 = reverse a3\n   442: a4 = u64 [sp + 0x8]\n   445: a4 = reverse a4\n   447: u8 [a0 + 0x18] = a4\n   450: u8 [a0 + 0x10] = a3\n   453: u8 [a0 + 0x8] = a2\n   456: u8 [a0] = a1\n   458: a5 = a4 >> 0x38\n   461: u8 [a0 + 0x1f] = a5\n   464: a5 = a4 >> 0x30\n   467: u8 [a0 + 0x1e] = a5\n   470: a5 = a4 >> 0x28\n   473: u8 [a0 + 0x1d] = a5\n   476: a5 = a4 >> 0x20\n   479: u8 [a0 + 0x1c] = a5\n   482: a5 = a4 >> 0x18\n   485: u8 [a0 + 0x1b] = a5\n   488: a5 = a4 >> 0x10\n   491: u8 [a0 + 0x1a] = a5\n   494: a4 = a4 >> 0x8\n   497: u8 [a0 + 0x19] = a4\n   500: a4 = a3 >> 0x38\n   503: u8 [a0 + 0x17] = a4\n   506: a4 = a3 >> 0x30\n   509: u8 [a0 + 0x16] = a4\n   512: a4 = a3 >> 0x28\n   515: u8 [a0 + 0x15] = a4\n   518: a4 = a3 >> 0x20\n   521: u8 [a0 + 0x14] = a4\n   524: a4 = a3 >> 0x18\n   527: u8 [a0 + 0x13] = a4\n   530: a4 = a3 >> 0x10\n   533: u8 [a0 + 0x12] = a4\n   536: a3 = a3 >> 0x8\n   539: u8 [a0 + 0x11] = a3\n   542: a3 = a2 >> 0x38\n   545: u8 [a0 + 0xf] = a3\n   548: a3 = a2 >> 0x30\n   551: u8 [a0 + 0xe] = a3\n   554: a3 = a2 >> 0x28\n   557: u8 [a0 + 0xd] = a3\n   560: a3 = a2 >> 0x20\n   563: u8 [a0 + 0xc] = a3\n   566: a3 = a2 >> 0x18\n   569: u8 [a0 + 0xb] = a3\n   572: a3 = a2 >> 0x10\n   575: u8 [a0 + 0xa] = a3\n   578: a2 = a2 >> 0x8\n   581: u8 [a0 + 0x9] = a2\n   584: a2 = a1 >> 0x38\n   587: u8 [a0 + 0x7] = a2\n   590: a2 = a1 >> 0x30\n   593: u8 [a0 + 0x6] = a2\n   596: a2 = a1 >> 0x28\n   599: u8 [a0 + 0x5] = a2\n   602: a2 = a1 >> 0x20\n   605: u8 [a0 + 0x4] = a2\n   608: a2 = a1 >> 0x18\n   611: u8 [a0 + 0x3] = a2\n   614: a2 = a1 >> 0x10\n   617: u8 [a0 + 0x2] = a2\n   620: a1 = a1 >> 0x8\n   623: u8 [a0 + 0x1] = a1\n   626: ra = u64 [sp + 0x20]\n   629: s0 = u64 [sp + 0x18]\n   632: s1 = u64 [sp + 0x10]\n   635: sp = sp + 0x28\n   638: ret\n      : @11 (gas: 48)\n   640: sp = sp + 0xffffffffffffffa0\n   643: u64 [sp + 0x58] = ra\n   646: u64 [sp + 0x50] = s0\n   649: u64 [sp + 0x48] = s1\n   652: s0 = sp + 0x60\n   655: sp = sp & 0xffffffffffffffe0\n   658: s1 = a0\n   660: a0 = u64 [a1 + 0x18]\n   663: a2 = u64 [a1 + 0x10]\n   666: a3 = u64 [a1 + 0x8]\n   669: a1 = u64 [a1]\n   671: a0 = reverse a0\n   673: a2 = reverse a2\n   675: a3 = reverse a3\n   677: a1 = reverse a1\n   679: u64 [sp + 0x18] = a1\n   682: u64 [sp + 0x10] = a3\n   685: u64 [sp + 0x8] = a2\n   688: u64 [sp] = a0\n   690: u64 [sp + 56] = 0\n   693: u64 [sp + 48] = 0\n   696: u64 [sp + 40] = 0\n   699: u64 [sp + 32] = 0\n   702: u32 [sp + 64] = 0x20\n   706: i32 a1 = sp + 0\n   708: i32 a3 = sp + 0x20\n   711: i32 a4 = sp + 0x40\n   714: a2 = 0xffffffffffffffff\n   717: a0 = 0\n   719: ecalli 8 // 'get_storage'\n   721: a0 = u64 [sp + 0x38]\n   724: a1 = u64 [sp + 0x30]\n   727: a2 = u64 [sp + 0x28]\n   730: a3 = u64 [sp + 0x20]\n   733: a0 = reverse a0\n   735: a1 = reverse a1\n   737: a2 = reverse a2\n   739: a3 = reverse a3\n   741: u64 [s1 + 0x18] = a3\n   744: u64 [s1 + 0x10] = a2\n   747: u64 [s1 + 0x8] = a1\n   750: u64 [s1] = a0\n   752: sp = s0 + 0xffffffffffffffa0\n   755: ra = u64 [sp + 0x58]\n   758: s0 = u64 [sp + 0x50]\n   761: s1 = u64 [sp + 0x48]\n   764: sp = sp + 0x60\n   767: ret\n      : @12 (gas: 40)\n   769: sp = sp + 0xffffffffffffffa0\n   772: u64 [sp + 0x58] = ra\n   775: u64 [sp + 0x50] = s0\n   778: s0 = sp + 0x60\n   781: sp = sp & 0xffffffffffffffe0\n   784: t0 = u64 [a0]\n   786: a3 = u64 [a0 + 0x8]\n   789: a4 = u64 [a0 + 0x10]\n   792: a0 = u64 [a0 + 0x18]\n   795: t1 = u64 [a1]\n   797: a2 = u64 [a1 + 0x8]\n   800: a5 = u64 [a1 + 0x10]\n   803: a1 = u64 [a1 + 0x18]\n   806: t2 = reverse a0\n   808: a4 = reverse a4\n   810: a3 = reverse a3\n   812: a0 = reverse t0\n   814: t0 = reverse a1\n   816: a5 = reverse a5\n   818: a2 = reverse a2\n   820: a1 = reverse t1\n   822: u64 [sp + 0x18] = a0\n   825: u64 [sp + 0x10] = a3\n   828: u64 [sp + 0x8] = a4\n   831: u64 [sp] = t2\n   833: u64 [sp + 0x38] = a1\n   836: u64 [sp + 0x30] = a2\n   839: u64 [sp + 0x28] = a5\n   842: u64 [sp + 0x20] = t0\n   845: i32 a1 = sp + 0\n   847: i32 a3 = sp + 0x20\n   850: a2 = 0xffffffffffffffff\n   853: a4 = 0x20\n   856: a0 = 0\n   858: ecalli 15 // 'set_storage'\n   860: sp = s0 + 0xffffffffffffffa0\n   863: ra = u64 [sp + 0x58]\n   866: s0 = u64 [sp + 0x50]\n   869: sp = sp + 0x60\n   872: ret\n      : @13 (gas: 33)\n   874: sp = sp + 0xffffffffffffff20\n   878: u64 [sp + 0xd8] = ra\n   882: u64 [sp + 0xd0] = s0\n   886: u64 [sp + 0xc8] = s1\n   890: s0 = sp + 0xe0\n   894: sp = sp & 0xffffffffffffffe0\n   897: a5 = u64 [a4]\n   899: u64 [sp + 0x40] = a5\n   902: a5 = u64 [a4 + 0x8]\n   905: u64 [sp + 0x48] = a5\n   908: a5 = u64 [a4 + 0x10]\n   911: u64 [sp + 0x50] = a5\n   914: a4 = u64 [a4 + 0x18]\n   917: u64 [sp + 0x58] = a4\n   920: t0 = 0x6\n   923: a4 = u64 [a3]\n   925: u64 [sp + 0x18] = a4\n   928: a4 = u64 [a3 + 0x8]\n   931: u64 [sp + 0x20] = a4\n   934: a4 = u64 [a3 + 0x10]\n   937: u64 [sp + 0x28] = a4\n   940: a3 = u64 [a3 + 0x18]\n   943: u64 [sp + 0x30] = a3\n   946: s1 = u64 [a2]\n   948: a3 = u64 [a2 + 0x8]\n   951: u64 [sp] = a3\n   953: a3 = u64 [a2 + 0x10]\n   956: u64 [sp + 0x8] = a3\n   959: a2 = u64 [a2 + 0x18]\n   962: u64 [sp + 0x10] = a2\n   965: u64 [sp + 0x38] = a1\n   968: ra = 0x8\n   971: jump @16\n      : @14 [@dyn 3] (gas: 2)\n   974: u64 [sp + 0x38] = a1\n   977: ra = 8, jump @16\n      : @15 [@dyn 4] (gas: 46)\n   982: a1 = reverse s1\n   984: u64 [sp + 0x78] = a1\n   987: a1 = u64 [sp]\n   989: a1 = reverse a1\n   991: u64 [sp + 0x70] = a1\n   994: a1 = u64 [sp + 0x8]\n   997: a1 = reverse a1\n   999: u64 [sp + 0x68] = a1\n  1002: a1 = u64 [sp + 0x10]\n  1005: a1 = reverse a1\n  1007: u64 [sp + 0x60] = a1\n  1010: a1 = u64 [sp + 0x18]\n  1013: a1 = reverse a1\n  1015: u64 [sp + 0x98] = a1\n  1019: a1 = u64 [sp + 0x20]\n  1022: a1 = reverse a1\n  1024: u64 [sp + 0x90] = a1\n  1028: a1 = u64 [sp + 0x28]\n  1031: a1 = reverse a1\n  1033: u64 [sp + 0x88] = a1\n  1037: a1 = u64 [sp + 0x30]\n  1040: a1 = reverse a1\n  1042: u64 [sp + 0x80] = a1\n  1046: a1 = u64 [sp + 0x40]\n  1049: a1 = reverse a1\n  1051: u64 [sp + 0xb8] = a1\n  1055: a1 = u64 [sp + 0x48]\n  1058: a1 = reverse a1\n  1060: u64 [sp + 0xb0] = a1\n  1064: a1 = u64 [sp + 0x50]\n  1067: a1 = reverse a1\n  1069: u64 [sp + 0xa8] = a1\n  1073: a1 = u64 [sp + 0x58]\n  1076: a1 = reverse a1\n  1078: u64 [sp + 0xa0] = a1\n  1082: i32 a2 = a0 + 0\n  1084: a3 = i32 [sp + 0x38]\n  1087: i32 a0 = sp + 0x60\n  1090: a1 = 0x3\n  1093: ecalli 6 // 'deposit_event'\n  1095: sp = s0 + 0xffffffffffffff20\n  1099: ra = u64 [sp + 0xd8]\n  1103: s0 = u64 [sp + 0xd0]\n  1107: s1 = u64 [sp + 0xc8]\n  1111: sp = sp + 0xe0\n  1115: ret\n      : @16 (gas: 2)\n  1117: i32 a2 = a0 >> 0x10\n  1120: jump @21 if a2 != 0\n      : @17 (gas: 4)\n  1123: a1 = a1 + a0\n  1126: i32 a1 = a1 + 0x1f\n  1129: a1 = a1 & 0xffffffffffffffe0\n  1132: jump @21 if a1 >u 65536\n      : @18 (gas: 3)\n  1138: a2 = 0x200d0\n  1143: a3 = i32 [0x200d0]\n  1148: jump @20 if a3 >=u a1\n      : @19 (gas: 2)\n  1151: u32 [0x200d0] = a1\n  1156: fallthrough\n      : @20 (gas: 4)\n  1157: a1 = 0x200e0\n  1162: i32 a0 = a0 + 0\n  1164: a0 = a0 + a1\n  1167: ret\n      : @21 (gas: 1)\n  1169: trap\n      : @22 (gas: 6)\n  1170: sp = sp + 0xfffffffffffffff0\n  1173: u64 [sp + 0x8] = ra\n  1176: u64 [sp] = s0\n  1178: s0 = a0 & 0x1\n  1181: ecalli 3 // 'call_data_size'\n  1183: fallthrough\n      : @23 (gas: 2)\n  1184: u32 [0x200cc] = a0\n  1189: jump @25 if s0 == 0\n      : @24 (gas: 1)\n  1192: ra = 10, jump @26\n      : @25 [@dyn 5] (gas: 21)\n  1196: ra = 0xc\n  1199: sp = sp + 0xfffffffffffff808\n  1203: a0 = sp + 0x700\n  1207: u64 [a0 + 0xf0] = ra\n  1211: u64 [a0 + 0xe8] = s0\n  1215: u64 [a0 + 0xe0] = s1\n  1219: s0 = sp + 0x7f8\n  1223: sp = sp + 0xfffffffffffff800\n  1227: sp = sp + 0xfffffffffffff8f8\n  1231: sp = sp & 0xffffffffffffffe0\n  1234: s1 = sp\n  1236: a2 = s1 + 0x7ff\n  1240: a2 = a2 + 0xf9\n  1244: u64 [a2 + 1824] = 0\n  1248: u64 [a2 + 1816] = 0\n  1252: u64 [a2 + 1800] = 0x80\n  1258: a0 = 0x40\n  1261: a1 = s1 + 0x1000\n  1265: u64 [a2 + 1808] = 0\n  1269: ra = 0x3c\n  1272: jump @9\n      : @26 [@dyn 6] (gas: 15)\n  1275: sp = sp + 0xfffffffffffffbc0\n  1279: a0 = sp + 0x400\n  1283: u64 [a0 + 0x38] = ra\n  1286: u64 [a0 + 0x30] = s0\n  1289: u64 [a0 + 0x28] = s1\n  1292: s0 = sp + 0x440\n  1296: sp = sp & 0xffffffffffffffe0\n  1299: a0 = sp + 0x300\n  1303: u64 [a0 + 56] = 0\n  1306: u64 [a0 + 48] = 0\n  1309: u64 [a0 + 40] = 0\n  1312: u64 [a0 + 32] = 0\n  1315: i32 a0 = sp + 0x320\n  1319: ecalli 16 // 'value_transferred'\n  1321: fallthrough\n      : @27 (gas: 9)\n  1322: a4 = sp + 0x300\n  1326: a0 = u64 [a4 + 0x30]\n  1329: a1 = u64 [a4 + 0x38]\n  1332: a2 = u64 [a4 + 0x28]\n  1335: a3 = u64 [a4 + 0x20]\n  1338: a1 = a1 | a2\n  1341: a0 = a0 | a3\n  1344: a0 = a0 | a1\n  1347: jump @59 if a0 != 0\n      : @28 (gas: 16)\n  1351: s1 = i32 [0x200cc]\n  1356: a0 = s1 << 0x20\n  1359: a0 = a0 >> 0x20\n  1362: a0 = a0 + 0x1f\n  1365: a0 = a0 & 0xffffffffffffffe0\n  1368: a1 = a0 + 0xa0\n  1372: a0 = a1 <u a0\n  1375: a2 = sp + 0x300\n  1379: u64 [a2] = a1\n  1381: u64 [a2 + 0x8] = a0\n  1384: a0 = 0 if a0 != 0\n  1386: u64 [a2 + 0x10] = a0\n  1389: a0 = 0x40\n  1392: a1 = sp + 0x300\n  1396: u64 [a2 + 24] = 0\n  1399: ra = 14, jump @9\n      : @29 [@dyn 7] (gas: 3)\n  1404: a0 = 0xa0\n  1408: a1 = s1\n  1410: ra = 16, jump @16\n      : @30 [@dyn 8] (gas: 5)\n  1415: i32 a0 = a0 + 0\n  1417: a1 = s1\n  1419: a2 = 0\n  1421: ecalli 1 // 'call_data_copy'\n  1423: fallthrough\n      : @31 (gas: 1)\n  1424: jump @60 if s1 <=u 95\n      : @32 (gas: 8)\n  1429: a2 = sp + 0x200\n  1433: u64 [a2 + 216] = 0\n  1437: u64 [a2 + 208] = 0\n  1441: u64 [a2 + 192] = 0xa0\n  1447: a0 = sp + 0x2e0\n  1451: a1 = sp + 0x2c0\n  1455: u64 [a2 + 200] = 0\n  1459: ra = 18, jump @513\n      : @33 [@dyn 9] (gas: 16)\n  1464: a2 = sp + 0x200\n  1468: a0 = u64 [a2 + 0xf8]\n  1472: u64 [sp + 0x48] = a0\n  1475: a0 = u64 [a2 + 0xf0]\n  1479: u64 [sp + 0x80] = a0\n  1483: a0 = u64 [a2 + 0xe8]\n  1487: u64 [sp + 0x78] = a0\n  1490: a0 = u64 [a2 + 0xe0]\n  1494: u64 [sp + 0x70] = a0\n  1497: u64 [a2 + 152] = 0\n  1501: u64 [a2 + 144] = 0\n  1505: u64 [a2 + 128] = 0xc0\n  1511: a0 = sp + 0x2a0\n  1515: a1 = sp + 0x280\n  1519: u64 [a2 + 136] = 0\n  1523: ra = 20, jump @513\n      : @34 [@dyn 10] (gas: 10)\n  1528: a1 = sp + 0x200\n  1532: a0 = u64 [a1 + 0xb0]\n  1536: u64 [sp + 0x40] = a0\n  1539: a0 = u64 [a1 + 0xa8]\n  1543: u64 [sp + 0x38] = a0\n  1546: a0 = u64 [a1 + 0xa0]\n  1550: u64 [sp + 0x30] = a0\n  1553: a0 = sp + 0x260\n  1557: a1 = 0xe0\n  1561: ra = 22, jump @7\n      : @35 [@dyn 11] (gas: 10)\n  1566: a3 = sp + 0x200\n  1570: a0 = u64 [a3 + 0x78]\n  1573: a1 = u64 [a3 + 0x70]\n  1576: a2 = u64 [a3 + 0x68]\n  1579: a0 = a0 | a1\n  1582: u64 [sp + 0x28] = a2\n  1585: a1 = a2 >> 0x20\n  1588: a1 = a1 <u 0x1\n  1591: a1 = 0 if a0 != 0\n  1593: jump @61 if a1 == 0\n      : @36 (gas: 7)\n  1597: a0 = u64 [sp + 0x260]\n  1601: u64 [sp + 0x20] = a0\n  1604: s1 = 0x300e0\n  1609: i32 a0 = s1 + 0\n  1611: u64 [sp + 0x98] = a0\n  1615: ecalli 4 // 'caller'\n  1617: fallthrough\n      : @37 (gas: 6)\n  1618: a0 = u32 [0x300f0]\n  1623: a1 = u64 [0x300e0]\n  1628: a2 = u64 [0x300e8]\n  1633: a0 = a0 | a1\n  1636: a0 = a0 | a2\n  1639: jump @62 if a0 == 0\n      : @38 (gas: 8)\n  1643: a0 = sp + 0x300\n  1647: u64 [a0 + 88] = 0\n  1650: u64 [a0 + 80] = 0\n  1653: u64 [a0 + 72] = 0\n  1656: u64 [a0 + 64] = 0\n  1659: a0 = sp + 0x240\n  1663: a1 = sp + 0x340\n  1667: ra = 24, jump @11\n      : @39 [@dyn 12] (gas: 41)\n  1672: a1 = sp + 0x200\n  1676: a0 = u64 [a1 + 0x40]\n  1679: u64 [sp + 0x68] = a0\n  1682: a0 = u64 [a1 + 0x48]\n  1685: u64 [sp + 0x60] = a0\n  1688: a0 = u64 [a1 + 0x58]\n  1691: u64 [sp + 0x88] = a0\n  1695: a0 = u64 [a1 + 0x50]\n  1698: u64 [sp + 0x90] = a0\n  1702: a0 = u64 [sp + 0x98]\n  1706: ecalli 4 // 'caller'\n  1708: a0 = u64 [s1 + 0x8]\n  1711: a1 = i32 [s1 + 0x10]\n  1714: a2 = u64 [s1]\n  1716: a0 = reverse a0\n  1718: a3 = a0 << 0x20\n  1721: a1 = reverse a1\n  1723: a1 = a1 >> 0x20\n  1726: a1 = a1 | a3\n  1729: a0 = a0 >> 0x20\n  1732: a2 = reverse a2\n  1734: a3 = a2 << 0x20\n  1737: a0 = a0 | a3\n  1740: a2 = a2 >> 0x20\n  1743: a3 = u64 [sp + 0x90]\n  1747: a3 = a3 >> 0x20\n  1750: a3 = a3 << 0x20\n  1753: a2 = a2 | a3\n  1756: a4 = sp + 0x300\n  1760: u64 [a4 + 120] = 0\n  1763: u64 [a4 + 112] = 0\n  1766: u64 [a4 + 104] = 0\n  1769: u64 [a4 + 96] = 0\n  1772: a3 = u64 [sp + 0x88]\n  1776: u64 [a4 + 0x98] = a3\n  1780: u64 [a4 + 0x90] = a2\n  1784: u64 [a4 + 0x88] = a0\n  1788: u64 [a4 + 0x80] = a1\n  1792: a0 = sp + 0x360\n  1796: a1 = sp + 0x380\n  1800: ra = 26, jump @12\n      : @40 [@dyn 13] (gas: 3)\n  1805: a0 = sp + 0x220\n  1809: a1 = 0x40\n  1812: ra = 28, jump @7\n      : @41 [@dyn 14] (gas: 52)\n  1817: a1 = sp + 0x200\n  1821: a0 = u64 [a1 + 0x38]\n  1824: u64 [sp + 0x18] = a0\n  1827: a0 = u64 [a1 + 0x30]\n  1830: u64 [sp + 0x50] = a0\n  1833: a0 = u64 [a1 + 0x28]\n  1836: u64 [sp + 0x58] = a0\n  1839: a0 = u64 [a1 + 0x20]\n  1842: u64 [sp + 0x88] = a0\n  1846: a0 = u64 [sp + 0x98]\n  1850: ecalli 4 // 'caller'\n  1852: a0 = u64 [s1 + 0x8]\n  1855: a1 = i32 [s1 + 0x10]\n  1858: a2 = u64 [s1]\n  1860: a3 = reverse a0\n  1862: a0 = a3 << 0x20\n  1865: a1 = reverse a1\n  1867: a1 = a1 >> 0x20\n  1870: a0 = a0 | a1\n  1873: a3 = a3 >> 0x20\n  1876: a2 = reverse a2\n  1878: a1 = a2 << 0x20\n  1881: a1 = a1 | a3\n  1884: a2 = a2 >> 0x20\n  1887: a3 = u64 [sp + 0x90]\n  1891: a3 = a3 << 0x20\n  1894: a3 = a3 >> 0x20\n  1897: u64 [sp + 472] = 0\n  1901: u64 [sp + 504] = 0\n  1905: u64 [sp + 0x1f0] = a3\n  1909: a3 = u64 [sp + 0x60]\n  1912: u64 [sp + 0x1e8] = a3\n  1916: a3 = u64 [sp + 0x68]\n  1919: u64 [sp + 0x1e0] = a3\n  1923: a3 = u64 [0x20000]\n  1928: a4 = u64 [0x20008]\n  1933: a5 = u64 [0x20010]\n  1938: s1 = u64 [0x20018]\n  1943: u64 [sp + 0x218] = a3\n  1947: a3 = sp + 0x200\n  1951: u64 [a3 + 0x10] = a4\n  1954: u64 [a3 + 0x8] = a5\n  1957: u64 [a3] = s1\n  1959: u64 [sp + 0x1d0] = a2\n  1963: u64 [sp + 0x1c8] = a1\n  1967: a2 = sp + 0x200\n  1971: a3 = sp + 0x1e0\n  1975: a4 = sp + 0x1c0\n  1979: u64 [sp + 0x1c0] = a0\n  1983: a0 = 0\n  1985: a1 = 0\n  1987: ra = 30, jump @13\n      : @42 [@dyn 15] (gas: 12)\n  1992: a1 = sp + 0x300\n  1996: u64 [a1 + 184] = 0\n  2000: u64 [a1 + 176] = 0\n  2004: u64 [a1 + 168] = 0\n  2008: u64 [a1 + 160] = 0x1\n  2013: u64 [a1 + 216] = 0\n  2017: u64 [a1 + 208] = 0\n  2021: u64 [a1 + 200] = 0\n  2025: u64 [a1 + 192] = 0x1\n  2030: a0 = sp + 0x3a0\n  2034: a1 = sp + 0x3c0\n  2038: ra = 32, jump @12\n      : @43 [@dyn 16] (gas: 8)\n  2043: a2 = u64 [sp + 0x80]\n  2047: a0 = a2 << 0x20\n  2050: a0 = a0 >> 0x20\n  2053: a3 = u64 [sp + 0x78]\n  2056: a4 = u64 [sp + 0x70]\n  2059: a1 = a4 | a3\n  2062: a0 = a0 | a1\n  2065: jump @54 if a0 != 0\n      : @44 (gas: 12)\n  2069: a0 = u64 [sp + 0x88]\n  2073: a2 = u64 [sp + 0x50]\n  2076: a0 = a0 | a2\n  2079: a1 = u64 [sp + 0x58]\n  2082: s1 = u64 [sp + 0x18]\n  2085: a1 = a1 | s1\n  2088: a0 = a0 | a1\n  2091: a0 = a0 >> 0x20\n  2094: a1 = a1 | a2\n  2097: a1 = a1 << 0x20\n  2100: a0 = a0 | a1\n  2103: jump @58 if a0 != 0\n      : @45 (gas: 8)\n  2107: u64 [sp + 336] = 0\n  2111: u64 [sp + 328] = 0\n  2115: u64 [sp + 320] = 0\n  2119: a0 = 0x8c379a000000000\n  2129: a1 = sp + 0x140\n  2133: u64 [sp + 0x158] = a0\n  2137: a0 = u64 [sp + 0x88]\n  2141: ra = 34, jump @9\n      : @46 [@dyn 17] (gas: 10)\n  2146: a0 = u64 [sp + 0x50]\n  2149: a2 = a0 | s1\n  2152: s1 = 0x100000000\n  2162: a0 = 0xfffffffc\n  2172: a1 = u64 [sp + 0x88]\n  2176: a0 = a1 <u a0\n  2179: a1 = u64 [sp + 0x58]\n  2182: a0 = 0 if a1 != 0\n  2184: a0 = 0 if a2 != 0\n  2186: jump @58 if a0 == 0\n      : @47 (gas: 9)\n  2190: a0 = u64 [sp + 0x88]\n  2194: i32 a0 = a0 + 0x4\n  2197: u64 [sp + 312] = 0\n  2201: u64 [sp + 304] = 0\n  2205: u64 [sp + 288] = 0x20\n  2210: a1 = sp + 0x120\n  2214: u64 [sp + 296] = 0\n  2218: u64 [sp + 0x98] = a2\n  2222: ra = 36, jump @9\n      : @48 [@dyn 18] (gas: 8)\n  2227: a2 = u64 [sp + 0x98]\n  2231: a0 = s1 + 0xffffffffffffffdc\n  2234: a1 = u64 [sp + 0x88]\n  2238: a0 = a1 <u a0\n  2241: a1 = u64 [sp + 0x58]\n  2244: a0 = 0 if a1 != 0\n  2246: a0 = 0 if a2 != 0\n  2248: jump @58 if a0 == 0\n      : @49 (gas: 8)\n  2252: s1 = u64 [sp + 0x88]\n  2256: i32 a0 = s1 + 0x24\n  2259: u64 [sp + 280] = 0\n  2263: u64 [sp + 272] = 0\n  2267: u64 [sp + 256] = 0x5\n  2272: a1 = sp + 0x100\n  2276: u64 [sp + 264] = 0\n  2280: ra = 38, jump @9\n      : @50 [@dyn 19] (gas: 7)\n  2285: a0 = 0xffffffbc\n  2295: a0 = s1 <u a0\n  2298: a1 = u64 [sp + 0x58]\n  2301: a0 = 0 if a1 != 0\n  2303: a1 = u64 [sp + 0x98]\n  2307: a0 = 0 if a1 != 0\n  2309: jump @58 if a0 == 0\n      : @51 (gas: 9)\n  2313: s1 = u64 [sp + 0x88]\n  2317: i32 a0 = s1 + 0x44\n  2320: u64 [sp + 240] = 0\n  2324: u64 [sp + 232] = 0\n  2328: a1 = 0x6e66743d30000000\n  2338: u64 [sp + 0xf8] = a1\n  2342: a1 = sp + 0xe0\n  2346: u64 [sp + 224] = 0\n  2350: ra = 40, jump @9\n      : @52 [@dyn 20] (gas: 3)\n  2355: a1 = 0x64\n  2358: a0 = s1\n  2360: ra = 42, jump @16\n      : @53 [@dyn 21] (gas: 5)\n  2365: i32 a1 = a0 + 0\n  2367: a0 = 0x1\n  2370: a2 = 0x64\n  2373: ecalli 13 // 'seal_return'\n  2375: fallthrough\n      : @54 (gas: 11)\n  2376: s1 = 0xffffffffffffffff\n  2379: a0 = 0xffffffff\n  2389: u64 [sp + 0x98] = a0\n  2393: u64 [sp + 0x1a0] = a4\n  2397: u64 [sp + 0x1a8] = a3\n  2401: u64 [sp + 0x1b0] = a2\n  2405: a0 = 0x80\n  2409: a1 = sp + 0x1a0\n  2413: a2 = u64 [sp + 0x48]\n  2416: u64 [sp + 0x1b8] = a2\n  2420: ra = 44, jump @9\n      : @55 [@dyn 22] (gas: 27)\n  2425: a2 = u64 [sp + 0x20]\n  2428: a0 = a2 >> 0x20\n  2431: a1 = u64 [sp + 0x28]\n  2434: a1 = a1 << 0x20\n  2437: a0 = a0 | a1\n  2440: a1 = a2 << 0x20\n  2443: a2 = u64 [sp + 0x30]\n  2446: a2 = a2 & s1\n  2449: a3 = u64 [sp + 0x38]\n  2452: a3 = a3 & s1\n  2455: a4 = u64 [sp + 0x40]\n  2458: a5 = u64 [sp + 0x98]\n  2462: a4 = a4 & a5\n  2465: a1 = a1 | a4\n  2468: a5 = sp + 0x300\n  2472: u64 [a5 + 248] = 0\n  2476: u64 [a5 + 240] = 0\n  2480: u64 [a5 + 232] = 0\n  2484: u64 [a5 + 224] = 0x2\n  2489: a4 = sp + 0x400\n  2493: u64 [a4 + 0x18] = a0\n  2496: u64 [a4 + 0x10] = a1\n  2499: u64 [a4 + 0x8] = a3\n  2502: u64 [a4] = a2\n  2504: a0 = sp + 0x3e0\n  2508: a1 = sp + 0x400\n  2512: ra = 46, jump @12\n      : @56 [@dyn 23] (gas: 3)\n  2517: a0 = sp + 0x180\n  2521: a1 = 0x40\n  2524: ra = 48, jump @7\n      : @57 [@dyn 24] (gas: 12)\n  2529: a0 = u64 [sp + 0x198]\n  2533: a1 = u64 [sp + 0x190]\n  2537: a2 = u64 [sp + 0x188]\n  2541: s1 = u64 [sp + 0x180]\n  2545: a0 = a0 | a2\n  2548: a2 = s1 | a1\n  2551: a2 = a2 | a0\n  2554: a2 = a2 >> 0x20\n  2557: a0 = a0 | a1\n  2560: a0 = a0 << 0x20\n  2563: a0 = a0 | a2\n  2566: jump @67 if a0 == 0\n      : @58 (gas: 1)\n  2570: trap\n      : @59 (gas: 6)\n  2571: a1 = 0x200e0\n  2576: i32 a1 = a1 + 0\n  2578: a0 = 0x1\n  2581: a2 = 0\n  2583: ecalli 13 // 'seal_return'\n  2585: jump @62\n      : @60 (gas: 6)\n  2587: a1 = 0x200e0\n  2592: i32 a1 = a1 + 0\n  2594: a0 = 0x1\n  2597: a2 = 0\n  2599: ecalli 13 // 'seal_return'\n  2601: jump @62\n      : @61 (gas: 6)\n  2603: a1 = 0x200e0\n  2608: i32 a1 = a1 + 0\n  2610: a0 = 0x1\n  2613: a2 = 0\n  2615: ecalli 13 // 'seal_return'\n  2617: fallthrough\n      : @62 (gas: 8)\n  2618: u64 [sp + 208] = 0\n  2622: u64 [sp + 200] = 0\n  2626: u64 [sp + 192] = 0\n  2630: a0 = 0x1e4fbdf700000000\n  2640: a1 = sp + 0xc0\n  2644: u64 [sp + 0xd8] = a0\n  2648: a0 = 0\n  2650: ra = 50, jump @9\n      : @63 [@dyn 25] (gas: 7)\n  2655: u64 [sp + 184] = 0\n  2659: u64 [sp + 176] = 0\n  2663: u64 [sp + 168] = 0\n  2667: a0 = 0x4\n  2670: a1 = sp + 0xa0\n  2674: u64 [sp + 160] = 0\n  2678: ra = 52, jump @9\n      : @64 [@dyn 26] (gas: 2)\n  2683: a1 = i32 [0x200d0]\n  2688: jump @66 if a1 >u 63\n      : @65 (gas: 2)\n  2692: u32 [0x200d0] = 0x40\n  2698: fallthrough\n      : @66 (gas: 6)\n  2699: a1 = 0x200e0\n  2704: i32 a1 = a1 + 0\n  2706: a0 = 0x1\n  2709: a2 = 0x24\n  2712: ecalli 13 // 'seal_return'\n  2714: fallthrough\n      : @67 (gas: 3)\n  2715: a0 = s1\n  2717: a1 = 0\n  2719: ra = 54, jump @16\n      : @68 [@dyn 27] (gas: 7)\n  2724: i32 a0 = a0 + 0\n  2726: a1 = 0\n  2728: a2 = 0\n  2730: ecalli 1 // 'call_data_copy'\n  2732: a0 = sp + 0x160\n  2736: a1 = 0x80\n  2740: ra = 56, jump @7\n      : @69 [@dyn 28] (gas: 9)\n  2745: a0 = u64 [sp + 0x178]\n  2749: a2 = u64 [sp + 0x170]\n  2753: a3 = u64 [sp + 0x168]\n  2757: a4 = u64 [sp + 0x160]\n  2761: u64 [0x30118] = a0\n  2766: u64 [0x30110] = a2\n  2771: u64 [0x30108] = a3\n  2776: u64 [0x30100] = a4\n  2781: jump @5\n      : @70 (gas: 3)\n  2784: a0 = s1\n  2786: a1 = 0\n  2788: ra = 58, jump @16\n      : @71 [@dyn 29] (gas: 5)\n  2793: i32 a1 = a0 + 0\n  2795: a0 = 0\n  2797: a2 = 0\n  2799: ecalli 13 // 'seal_return'\n  2801: jump @62\n      : @72 [@dyn 30] (gas: 4)\n  2804: a0 = 0x200cc\n  2809: u64 [s1 + 0x178] = a0\n  2813: a0 = i32 [0x200cc]\n  2818: jump @74 if a0 >=u 4\n      : @73 (gas: 1)\n  2822: jump @470\n      : @74 (gas: 14)\n  2825: a0 = sp + 0xffffffffffffffe0\n  2828: a0 = a0 & 0xffffffffffffffe0\n  2831: sp = a0\n  2833: u64 [a0 + 24] = 0\n  2836: u64 [a0 + 16] = 0\n  2839: u64 [a0 + 8] = 0\n  2842: u64 [s1 + 0xe8] = a0\n  2846: u64 [a0 + 0] = 0\n  2848: a0 = s1 + 0x1000\n  2852: i32 a0 = a0 + 0x20\n  2855: a1 = 0\n  2857: ra = 0x3e\n  2860: ecalli 2 // 'call_data_load'\n  2862: fallthrough\n      : @75 [@dyn 31] (gas: 4)\n  2863: a3 = s1 + 0x7ff\n  2867: a3 = a3 + 0xf9\n  2871: a0 = i32 [a3 + 0x744]\n  2875: jump @177 if a0 == 2376452955\n      : @76 (gas: 1)\n  2883: jump @145 if a0 == 3647605066\n      : @77 (gas: 1)\n  2891: jump @91 if a0 == 3732202875\n      : @78 (gas: 2)\n  2899: a2 = s1 + 0x10f8\n  2903: jump @119 if a0 == 615110739\n      : @79 (gas: 1)\n  2911: jump @109 if a0 == 1183860800\n      : @80 (gas: 1)\n  2919: jump @129 if a0 != 1204603394\n      : @81 (gas: 8)\n  2927: u64 [a2 + 96] = 0\n  2930: u64 [a2 + 88] = 0\n  2933: u64 [a2 + 80] = 0\n  2936: u64 [a2 + 72] = 0\n  2939: a0 = s1 + 0x1000\n  2943: i32 a0 = a0 + 0x140\n  2947: ecalli 16 // 'value_transferred'\n  2949: fallthrough\n      : @82 (gas: 9)\n  2950: a3 = s1 + 0x10f8\n  2954: a0 = u64 [a3 + 0x58]\n  2957: a1 = u64 [a3 + 0x60]\n  2960: a2 = u64 [a3 + 0x50]\n  2963: a3 = u64 [a3 + 0x48]\n  2966: a1 = a1 | a2\n  2969: a0 = a0 | a3\n  2972: a0 = a0 | a1\n  2975: jump @84 if a0 == 0\n      : @83 (gas: 1)\n  2978: jump @435\n      : @84 (gas: 3)\n  2981: a0 = u64 [s1 + 0x178]\n  2985: a0 = i32 [a0]\n  2987: jump @86 if a0 >u 3\n      : @85 (gas: 1)\n  2991: jump @436\n      : @86 (gas: 3)\n  2994: a0 = s1 + 0x280\n  2998: a1 = 0x40\n  3001: ra = 64, jump @7\n      : @87 [@dyn 32] (gas: 10)\n  3006: a1 = s1 + 0x200\n  3010: a0 = u64 [a1 + 0x98]\n  3014: u64 [s1 + 0x178] = a0\n  3018: a0 = u64 [a1 + 0x90]\n  3022: u64 [s1 + 0x170] = a0\n  3026: a0 = u64 [a1 + 0x88]\n  3030: u64 [s1 + 0x160] = a0\n  3034: a0 = u64 [a1 + 0x80]\n  3038: u64 [s1 + 0x168] = a0\n  3042: ra = 66, jump @0\n      : @88 [@dyn 33] (gas: 14)\n  3047: a4 = s1 + 0x100\n  3051: a0 = u64 [a4 + 0x78]\n  3054: a1 = u64 [a4 + 0x60]\n  3057: a0 = a0 | a1\n  3060: a1 = u64 [a4 + 0x68]\n  3063: a3 = a1\n  3065: a2 = u64 [a4 + 0x70]\n  3068: a1 = a1 | a2\n  3071: a1 = a1 | a0\n  3074: a1 = a1 >> 0x20\n  3077: a0 = a0 | a2\n  3080: a0 = a0 << 0x20\n  3083: a0 = a0 | a1\n  3086: jump @187 if a0 != 0\n      : @89 (gas: 11)\n  3090: a2 = u64 [0x30100]\n  3095: a1 = u64 [0x30108]\n  3100: a0 = u32 [0x30110]\n  3105: u64 [s1 + 632] = 0\n  3109: a4 = s1 + 0x200\n  3113: u64 [a4 + 0x70] = a0\n  3116: u64 [a4 + 0x68] = a1\n  3119: a1 = s1 + 0x260\n  3123: u64 [a4 + 0x60] = a2\n  3126: a0 = a3\n  3128: ra = 68, jump @9\n      : @90 [@dyn 34] (gas: 4)\n  3133: a1 = 0x20\n  3136: a0 = u64 [s1 + 0x168]\n  3140: ra = 0x1b4\n  3144: jump @16\n      : @91 (gas: 11)\n  3147: a0 = s1 + 0x10f8\n  3151: u64 [a0 + 1376] = 0\n  3155: u64 [a0 + 1368] = 0\n  3159: u64 [a0 + 1360] = 0\n  3163: u64 [a0 + 1352] = 0\n  3167: a0 = s1 + 0x1000\n  3171: i32 a0 = a0 + 0x640\n  3175: ra = 0x46\n  3178: ecalli 16 // 'value_transferred'\n  3180: t0 = 0x48\n  3183: jump @665\n      : @92 [@dyn 35] (gas: 1)\n  3186: t0 = 72, jump @665\n      : @93 [@dyn 36] (gas: 8)\n  3191: a0 = u64 [a4 + 0x58]\n  3194: a1 = u64 [a4 + 0x60]\n  3197: a2 = u64 [a4 + 0x50]\n  3200: a3 = u64 [a4 + 0x48]\n  3203: a1 = a1 | a2\n  3206: a0 = a0 | a3\n  3209: a0 = a0 | a1\n  3212: jump @95 if a0 == 0\n      : @94 (gas: 1)\n  3215: jump @446\n      : @95 (gas: 3)\n  3218: a0 = u64 [s1 + 0x178]\n  3222: a0 = i32 [a0]\n  3224: jump @97 if a0 >u 35\n      : @96 (gas: 1)\n  3228: jump @446\n      : @97 (gas: 7)\n  3231: a0 = s1 + 0x1000\n  3235: i32 a0 = a0 + 0x660\n  3239: a1 = 0x4\n  3242: ra = 0x4a\n  3245: ecalli 2 // 'call_data_load'\n  3247: t0 = 0x4c\n  3250: jump @665\n      : @98 [@dyn 37] (gas: 1)\n  3253: t0 = 76, jump @665\n      : @99 [@dyn 38] (gas: 15)\n  3258: a0 = u64 [a4 + 0x68]\n  3261: a1 = u64 [a4 + 0x70]\n  3264: a2 = u64 [a4 + 0x78]\n  3267: a3 = u64 [a4 + 0x80]\n  3271: a4 = s1 + 0x7ff\n  3275: a4 = a4 + 0xf9\n  3279: a5 = a4 + 0x600\n  3283: u64 [a5 + 0x20] = a3\n  3286: u64 [a5 + 0x18] = a2\n  3289: u64 [a5 + 0x10] = a1\n  3292: a1 = s1 + 0x7ff\n  3296: a1 = a1 + 0x701\n  3300: u64 [a5 + 0x8] = a0\n  3303: a0 = 0\n  3305: ra = 78, jump @9\n      : @100 [@dyn 39] (gas: 10)\n  3310: a2 = s1 + 0x7ff\n  3314: a2 = a2 + 0xf9\n  3318: u64 [a2 + 1536] = 0\n  3322: u64 [a2 + 1528] = 0\n  3326: u64 [a2 + 1512] = 0x3\n  3331: a0 = 0x20\n  3334: a1 = s1 + 0x7ff\n  3338: a1 = a1 + 0x6e1\n  3342: u64 [a2 + 1520] = 0\n  3346: ra = 80, jump @9\n      : @101 [@dyn 40] (gas: 3)\n  3351: a1 = 0x40\n  3354: a0 = 0\n  3356: ra = 82, jump @16\n      : @102 [@dyn 41] (gas: 1)\n  3361: t0 = 84, jump @664\n      : @103 [@dyn 42] (gas: 4)\n  3366: ra = 0x56\n  3369: ecalli 9 // 'hash_keccak_256'\n  3371: t0 = 0x58\n  3374: jump @652\n      : @104 [@dyn 43] (gas: 1)\n  3377: t0 = 88, jump @652\n      : @105 [@dyn 44] (gas: 9)\n  3382: a5 = a4 + 0x500\n  3386: u64 [a5 + 0xa0] = a3\n  3390: u64 [a5 + 0x98] = a2\n  3394: u64 [a5 + 0x90] = a1\n  3398: u64 [a5 + 0x88] = a0\n  3402: a0 = s1 + 0x7ff\n  3406: a0 = a0 + 0x6c1\n  3410: a1 = s1 + 0x1680\n  3414: ra = 90, jump @11\n      : @106 [@dyn 45] (gas: 14)\n  3419: a0 = s1 + 0x7ff\n  3423: a0 = a0 + 0xf9\n  3427: a2 = a0 + 0x500\n  3431: a1 = u64 [a2 + 0xd8]\n  3435: a0 = s1 + 0x100\n  3439: u64 [a0 + 0x68] = a1\n  3442: a1 = u64 [a2 + 0xd0]\n  3446: u64 [a0 + 0x78] = a1\n  3449: a1 = u64 [a2 + 0xc8]\n  3453: u64 [a0 + 0x70] = a1\n  3456: a0 = s1 + 0x7ff\n  3460: a0 = a0 + 0x6a1\n  3464: a1 = 0x40\n  3467: ra = 92, jump @7\n      : @107 [@dyn 46] (gas: 15)\n  3472: a3 = s1 + 0x7ff\n  3476: a3 = a3 + 0xf9\n  3480: a5 = a3 + 0x500\n  3484: a4 = u64 [a5 + 0xc0]\n  3488: a1 = u64 [a5 + 0xb8]\n  3492: a2 = u64 [a5 + 0xb0]\n  3496: a0 = u64 [a5 + 0xa8]\n  3500: a4 = a4 | a2\n  3503: a2 = a0 | a1\n  3506: a2 = a2 | a4\n  3509: a2 = a2 >> 0x20\n  3512: a1 = a1 | a4\n  3515: a1 = a1 << 0x20\n  3518: a1 = a1 | a2\n  3521: jump @187 if a1 != 0\n      : @108 (gas: 16)\n  3525: a4 = s1 + 0x100\n  3529: a1 = u64 [a4 + 0x68]\n  3532: a1 = a1 << 0x20\n  3535: a2 = a1 >> 0x20\n  3538: u64 [a3 + 1440] = 0\n  3542: a1 = u64 [a4 + 0x70]\n  3545: a5 = a3 + 0x500\n  3549: u64 [a5 + 0x88] = a1\n  3553: a1 = u64 [a4 + 0x78]\n  3556: u64 [a5 + 0x90] = a1\n  3560: a1 = s1 + 0x7ff\n  3564: a1 = a1 + 0x681\n  3568: u64 [a5 + 0x98] = a2\n  3572: u64 [s1 + 0x178] = a0\n  3576: ra = 0x1b2\n  3580: jump @9\n      : @109 (gas: 8)\n  3583: u64 [a2 + 32] = 0\n  3586: u64 [a2 + 24] = 0\n  3589: u64 [a2 + 16] = 0\n  3592: u64 [a2 + 8] = 0\n  3595: a0 = s1 + 0x1000\n  3599: i32 a0 = a0 + 0x100\n  3603: ecalli 16 // 'value_transferred'\n  3605: fallthrough\n      : @110 (gas: 9)\n  3606: a4 = s1 + 0x10f8\n  3610: a0 = u64 [a4 + 0x18]\n  3613: a1 = u64 [a4 + 0x20]\n  3616: a2 = u64 [a4 + 0x10]\n  3619: a3 = u64 [a4 + 0x8]\n  3622: a1 = a1 | a2\n  3625: a0 = a0 | a3\n  3628: a0 = a0 | a1\n  3631: jump @112 if a0 == 0\n      : @111 (gas: 1)\n  3634: jump @437\n      : @112 (gas: 3)\n  3637: a0 = u64 [s1 + 0x178]\n  3641: a0 = i32 [a0]\n  3643: jump @114 if a0 >u 3\n      : @113 (gas: 1)\n  3647: jump @438\n      : @114 (gas: 7)\n  3650: u64 [a4 + 64] = 0\n  3653: u64 [a4 + 56] = 0\n  3656: u64 [a4 + 48] = 0\n  3659: u64 [a4 + 40] = 0x2\n  3663: a0 = s1 + 0x240\n  3667: a1 = s1 + 0x1120\n  3671: ra = 94, jump @11\n      : @115 [@dyn 47] (gas: 10)\n  3676: a0 = u64 [s1 + 0x250]\n  3680: a1 = s1 + 0x100\n  3684: u64 [a1 + 0x68] = a0\n  3687: a0 = u64 [s1 + 0x248]\n  3691: u64 [a1 + 0x78] = a0\n  3694: a0 = u64 [s1 + 0x240]\n  3698: u64 [a1 + 0x70] = a0\n  3701: a0 = s1 + 0x220\n  3705: a1 = 0x40\n  3708: ra = 96, jump @7\n      : @116 [@dyn 48] (gas: 6)\n  3713: a4 = s1 + 0x200\n  3717: a3 = u64 [a4 + 0x38]\n  3720: a1 = u64 [a4 + 0x30]\n  3723: a2 = u64 [a4 + 0x28]\n  3726: a0 = u64 [a4 + 0x20]\n  3729: t0 = 98, jump @653\n      : @117 [@dyn 49] (gas: 1)\n  3734: jump @187 if a1 != 0\n      : @118 (gas: 15)\n  3738: a3 = s1 + 0x100\n  3742: a1 = u64 [a3 + 0x68]\n  3745: a1 = a1 << 0x20\n  3748: a2 = a1 >> 0x20\n  3751: u64 [s1 + 536] = 0\n  3755: a1 = u64 [a3 + 0x70]\n  3758: a4 = s1 + 0x200\n  3762: u64 [a4] = a1\n  3764: a1 = u64 [a3 + 0x78]\n  3767: u64 [a4 + 0x8] = a1\n  3770: a1 = s1 + 0x200\n  3774: u64 [a4 + 0x10] = a2\n  3777: u64 [s1 + 0x178] = a0\n  3781: ra = 0x1b2\n  3785: jump @9\n      : @119 (gas: 8)\n  3788: u64 [a3 + 2016] = 0\n  3792: u64 [a3 + 2008] = 0\n  3796: u64 [a3 + 2000] = 0\n  3800: u64 [a3 + 1992] = 0\n  3804: a0 = s1 + 0x1000\n  3808: i32 a0 = a0 + 0xc0\n  3812: ecalli 16 // 'value_transferred'\n  3814: fallthrough\n      : @120 (gas: 11)\n  3815: a3 = s1 + 0x7ff\n  3819: a3 = a3 + 0xf9\n  3823: a4 = a3 + 0x700\n  3827: a0 = u64 [a4 + 0xd8]\n  3831: a1 = u64 [a4 + 0xe0]\n  3835: a2 = u64 [a4 + 0xd0]\n  3839: a3 = u64 [a4 + 0xc8]\n  3843: a1 = a1 | a2\n  3846: a0 = a0 | a3\n  3849: a0 = a0 | a1\n  3852: jump @122 if a0 == 0\n      : @121 (gas: 1)\n  3855: jump @439\n      : @122 (gas: 4)\n  3858: a0 = u64 [s1 + 0x178]\n  3862: a0 = i32 [a0]\n  3864: a2 = s1 + 0x10f8\n  3868: jump @124 if a0 >u 3\n      : @123 (gas: 1)\n  3872: jump @440\n      : @124 (gas: 7)\n  3875: u64 [a2 + 0] = 0\n  3877: u64 [a2 + 4294967288] = 0\n  3880: u64 [a2 + 4294967280] = 0\n  3883: u64 [a2 + 4294967272] = 0x2\n  3887: a0 = s1 + 0x1e0\n  3891: a1 = s1 + 0x10e0\n  3895: ra = 100, jump @11\n      : @125 [@dyn 50] (gas: 7)\n  3900: a0 = u64 [s1 + 0x1f8]\n  3904: u64 [s1 + 0x178] = a0\n  3908: a0 = u64 [s1 + 0x1f0]\n  3912: u64 [s1 + 0x170] = a0\n  3916: a0 = s1 + 0x1c0\n  3920: a1 = 0x40\n  3923: ra = 102, jump @7\n      : @126 [@dyn 51] (gas: 6)\n  3928: a4 = s1 + 0x100\n  3932: a3 = u64 [a4 + 0xd8]\n  3936: a1 = u64 [a4 + 0xd0]\n  3940: a2 = u64 [a4 + 0xc8]\n  3944: a0 = u64 [a4 + 0xc0]\n  3948: t0 = 104, jump @653\n      : @127 [@dyn 52] (gas: 1)\n  3953: jump @187 if a1 != 0\n      : @128 (gas: 15)\n  3957: a4 = s1 + 0x100\n  3961: a2 = u64 [a4 + 0x70]\n  3964: a2 = a2 >> 0x20\n  3967: a3 = u64 [a4 + 0x78]\n  3970: a1 = a3 << 0x20\n  3973: a2 = a2 | a1\n  3976: a1 = a3 >> 0x20\n  3979: u64 [s1 + 440] = 0\n  3983: u64 [s1 + 432] = 0\n  3987: u64 [a4 + 0xa8] = a1\n  3991: a1 = s1 + 0x1a0\n  3995: u64 [a4 + 0xa0] = a2\n  3999: u64 [s1 + 0x178] = a0\n  4003: ra = 0x1b2\n  4007: jump @9\n      : @129 (gas: 1)\n  4010: jump @131 if a0 == 2105577064\n      : @130 (gas: 1)\n  4017: jump @441\n      : @131 (gas: 8)\n  4020: u64 [a2 + 256] = 0\n  4024: u64 [a2 + 248] = 0\n  4028: u64 [a2 + 240] = 0\n  4032: u64 [a2 + 232] = 0\n  4036: a0 = s1 + 0x1000\n  4040: i32 a0 = a0 + 0x1e0\n  4044: ecalli 16 // 'value_transferred'\n  4046: fallthrough\n      : @132 (gas: 9)\n  4047: a3 = s1 + 0x10f8\n  4051: a0 = u64 [a3 + 0xf8]\n  4055: a1 = u64 [a3 + 0x100]\n  4059: a2 = u64 [a3 + 0xf0]\n  4063: a3 = u64 [a3 + 0xe8]\n  4067: a1 = a1 | a2\n  4070: a0 = a0 | a3\n  4073: a0 = a0 | a1\n  4076: jump @134 if a0 == 0\n      : @133 (gas: 1)\n  4079: jump @449\n      : @134 (gas: 3)\n  4082: a0 = u64 [s1 + 0x178]\n  4086: a0 = i32 [a0]\n  4088: jump @136 if a0 >u 67\n      : @135 (gas: 1)\n  4092: jump @450\n      : @136 (gas: 2)\n  4095: a0 = s1 + 0x460\n  4099: ra = 106, jump @521\n      : @137 [@dyn 53] (gas: 10)\n  4104: a1 = s1 + 0x400\n  4108: a0 = u64 [a1 + 0x78]\n  4111: u64 [s1 + 0x140] = a0\n  4115: a0 = u64 [a1 + 0x70]\n  4118: u64 [s1 + 0x148] = a0\n  4122: a0 = u64 [a1 + 0x68]\n  4125: u64 [s1 + 0x150] = a0\n  4129: a0 = u64 [a1 + 0x60]\n  4132: u64 [s1 + 0x158] = a0\n  4136: ra = 108, jump @0\n      : @138 [@dyn 54] (gas: 12)\n  4141: a1 = u64 [0x30108]\n  4146: u64 [s1 + 0x178] = a1\n  4150: a1 = u64 [0x30100]\n  4155: u64 [s1 + 0x170] = a1\n  4159: a0 = u32 [0x30110]\n  4164: u64 [s1 + 0x168] = a0\n  4168: a0 = 0x300e0\n  4173: u64 [s1 + 0x160] = a0\n  4177: i32 a0 = a0 + 0\n  4179: ra = 0x6e\n  4182: ecalli 4 // 'caller'\n  4184: fallthrough\n      : @139 [@dyn 55] (gas: 6)\n  4185: a5 = s1 + 0x100\n  4189: a2 = u64 [a5 + 0x60]\n  4192: a0 = u64 [a2 + 0x8]\n  4195: a1 = u64 [a2]\n  4197: a2 = i32 [a2 + 0x10]\n  4200: t0 = 112, jump @655\n      : @140 [@dyn 56] (gas: 9)\n  4205: a2 = u64 [a5 + 0x68]\n  4208: a1 = a1 ^ a2\n  4211: a2 = u64 [a5 + 0x70]\n  4214: a0 = a0 ^ a2\n  4217: a0 = a0 | a1\n  4220: a1 = u64 [a5 + 0x78]\n  4223: a1 = a1 ^ a3\n  4226: a0 = a0 | a1\n  4229: jump @188 if a0 != 0\n      : @141 (gas: 31)\n  4233: a0 = s1 + 0x1000\n  4237: i32 a0 = a0 + 0x200\n  4241: a1 = 0x24\n  4244: ecalli 2 // 'call_data_load'\n  4246: a0 = s1 + 0x10f8\n  4250: a4 = a0 + 0x100\n  4254: a1 = u64 [a4 + 0x20]\n  4257: a2 = u64 [a4 + 0x18]\n  4260: a3 = u64 [a4 + 0x10]\n  4263: a0 = u64 [a4 + 0x8]\n  4266: a4 = s1 + 0x100\n  4270: u64 [a4 + 0x78] = a1\n  4273: u64 [s1 + 0x378] = a1\n  4277: u64 [a4 + 0x70] = a2\n  4280: u64 [s1 + 0x370] = a2\n  4284: u64 [a4 + 0x68] = a3\n  4287: u64 [s1 + 0x368] = a3\n  4291: u64 [a4 + 0x60] = a0\n  4294: u64 [s1 + 0x360] = a0\n  4298: a0 = u64 [a4 + 0x40]\n  4301: u64 [s1 + 0x398] = a0\n  4305: a0 = u64 [a4 + 0x48]\n  4308: u64 [s1 + 0x390] = a0\n  4312: a0 = u64 [a4 + 0x50]\n  4315: u64 [s1 + 0x388] = a0\n  4319: a0 = s1 + 0x3a0\n  4323: a1 = s1 + 0x380\n  4327: a2 = s1 + 0x360\n  4331: a3 = u64 [a4 + 0x58]\n  4334: u64 [s1 + 0x380] = a3\n  4338: ra = 114, jump @572\n      : @142 [@dyn 57] (gas: 3)\n  4343: a0 = s1 + 0x340\n  4347: a1 = 0x40\n  4350: ra = 116, jump @7\n      : @143 [@dyn 58] (gas: 13)\n  4355: a4 = s1 + 0x300\n  4359: a0 = u64 [a4 + 0x58]\n  4362: a1 = u64 [a4 + 0x50]\n  4365: a2 = u64 [a4 + 0x48]\n  4368: a3 = u64 [a4 + 0x40]\n  4371: a0 = a0 | a2\n  4374: a2 = a3 | a1\n  4377: a2 = a2 | a0\n  4380: a2 = a2 >> 0x20\n  4383: a0 = a0 | a1\n  4386: a0 = a0 << 0x20\n  4389: a0 = a0 | a2\n  4392: jump @187 if a0 != 0\n      : @144 (gas: 15)\n  4396: a2 = s1 + 0x100\n  4400: a0 = u64 [a2 + 0x60]\n  4403: a4 = s1 + 0x300\n  4407: u64 [a4 + 0x20] = a0\n  4410: a0 = u64 [a2 + 0x68]\n  4413: u64 [a4 + 0x28] = a0\n  4416: a0 = u64 [a2 + 0x70]\n  4419: u64 [a4 + 0x30] = a0\n  4422: a1 = s1 + 0x320\n  4426: a0 = u64 [a2 + 0x78]\n  4429: u64 [a4 + 0x38] = a0\n  4432: a0 = a3\n  4434: u64 [a2 + 0x78] = a3\n  4437: ra = 0x1b2\n  4441: jump @9\n      : @145 (gas: 3)\n  4444: a0 = u64 [s1 + 0x178]\n  4448: a0 = i32 [a0]\n  4450: jump @147 if a0 >u 35\n      : @146 (gas: 1)\n  4454: jump @451\n      : @147 (gas: 22)\n  4457: a0 = s1 + 0x1000\n  4461: i32 a0 = a0 + 0x260\n  4465: a1 = 0x4\n  4468: ecalli 2 // 'call_data_load'\n  4470: a1 = s1 + 0x10f8\n  4474: a2 = a1 + 0x100\n  4478: a0 = u64 [a2 + 0x80]\n  4482: u64 [s1 + 0xc8] = a0\n  4486: a0 = u64 [a2 + 0x78]\n  4489: u64 [s1 + 0xd0] = a0\n  4493: a0 = u64 [a2 + 0x70]\n  4496: u64 [s1 + 0xd8] = a0\n  4500: a0 = u64 [a2 + 0x68]\n  4503: u64 [s1 + 0xe0] = a0\n  4507: u64 [a1 + 416] = 0\n  4511: u64 [a1 + 408] = 0\n  4515: u64 [a1 + 400] = 0\n  4519: u64 [a2 + 136] = 0x1\n  4524: a0 = s1 + 0x7ff\n  4528: a0 = a0 + 0x661\n  4532: a1 = s1 + 0x1280\n  4536: ra = 118, jump @11\n      : @148 [@dyn 59] (gas: 12)\n  4541: a3 = s1 + 0x7ff\n  4545: a3 = a3 + 0xf9\n  4549: a4 = a3 + 0x500\n  4553: a0 = u64 [a4 + 0x80]\n  4557: a1 = u64 [a4 + 0x70]\n  4560: a2 = u64 [a4 + 0x68]\n  4563: a3 = u64 [a4 + 0x78]\n  4566: a0 = a0 | a1\n  4569: a1 = a2 ^ 0x2\n  4572: a1 = a1 | a3\n  4575: a0 = a0 | a1\n  4578: jump @150 if a0 != 0\n      : @149 (gas: 1)\n  4581: jump @452\n      : @150 (gas: 12)\n  4584: a1 = s1 + 0x10f8\n  4588: u64 [a1 + 448] = 0\n  4592: u64 [a1 + 440] = 0\n  4596: u64 [a1 + 432] = 0\n  4600: u64 [a1 + 424] = 0x1\n  4605: u64 [a1 + 480] = 0\n  4609: u64 [a1 + 472] = 0\n  4613: u64 [a1 + 464] = 0\n  4617: u64 [a1 + 456] = 0x2\n  4622: a0 = s1 + 0x12a0\n  4626: a1 = s1 + 0x12c0\n  4630: ra = 120, jump @12\n      : @151 [@dyn 60] (gas: 15)\n  4635: a2 = s1 + 0x7ff\n  4639: a2 = a2 + 0xf9\n  4643: a0 = u64 [s1 + 0xc8]\n  4647: a3 = a2 + 0x500\n  4651: u64 [a3 + 0x60] = a0\n  4654: a0 = u64 [s1 + 0xd0]\n  4658: u64 [a3 + 0x58] = a0\n  4661: a0 = u64 [s1 + 0xd8]\n  4665: u64 [a3 + 0x50] = a0\n  4668: a1 = s1 + 0x7ff\n  4672: a1 = a1 + 0x641\n  4676: a0 = u64 [s1 + 0xe0]\n  4680: u64 [a3 + 0x48] = a0\n  4683: a0 = 0\n  4685: ra = 122, jump @9\n      : @152 [@dyn 61] (gas: 11)\n  4690: a1 = s1 + 0x7ff\n  4694: a1 = a1 + 0xf9\n  4698: u64 [a1 + 1344] = 0\n  4702: u64 [a1 + 1336] = 0\n  4706: u64 [a1 + 1320] = 0x3\n  4711: a2 = a1\n  4713: a0 = 0x20\n  4716: a1 = s1 + 0x7ff\n  4720: a1 = a1 + 0x621\n  4724: u64 [a2 + 1328] = 0\n  4728: ra = 124, jump @9\n      : @153 [@dyn 62] (gas: 7)\n  4733: a0 = sp + 0xffffffffffffffe0\n  4736: a0 = a0 & 0xffffffffffffffe0\n  4739: u64 [s1 + 0x178] = a0\n  4743: sp = a0\n  4745: a2 = 0x200d0\n  4750: a0 = i32 [0x200d0]\n  4755: jump @155 if a0 >u 63\n      : @154 (gas: 2)\n  4759: u32 [0x200d0] = 0x40\n  4765: fallthrough\n      : @155 (gas: 16)\n  4766: u64 [s1 + 0xa8] = a2\n  4770: a0 = sp + 0xffffffffffffffe0\n  4773: a2 = a0 & 0xffffffffffffffe0\n  4776: u64 [s1 + 0x170] = a2\n  4780: sp = a2\n  4782: a0 = 0x200e0\n  4787: u64 [s1 + 0xb8] = a0\n  4791: i32 a0 = a0 + 0\n  4793: i32 a2 = a2 + 0\n  4795: a1 = 0x40\n  4798: u64 [s1 + 0xb0] = a0\n  4802: ra = 0x7e\n  4805: ecalli 9 // 'hash_keccak_256'\n  4807: a3 = u64 [s1 + 0x170]\n  4811: t0 = 0x80\n  4815: jump @659\n      : @156 [@dyn 63] (gas: 2)\n  4818: a3 = u64 [s1 + 0x170]\n  4822: t0 = 128, jump @659\n      : @157 [@dyn 64] (gas: 9)\n  4828: a4 = u64 [s1 + 0x178]\n  4832: u64 [a4 + 0x18] = a3\n  4835: u64 [a4 + 0x10] = a2\n  4838: u64 [a4 + 0x8] = a1\n  4841: u64 [a4] = a0\n  4843: a0 = s1 + 0x7ff\n  4847: a0 = a0 + 0x601\n  4851: a1 = 0x40\n  4854: ra = 130, jump @7\n      : @158 [@dyn 65] (gas: 19)\n  4860: a1 = s1 + 0x7ff\n  4864: a1 = a1 + 0xf9\n  4868: a5 = a1 + 0x500\n  4872: a0 = u64 [a5 + 0x20]\n  4875: u64 [s1 + 0x170] = a0\n  4879: a2 = u64 [a5 + 0x18]\n  4882: u64 [s1 + 0x168] = a2\n  4886: a3 = u64 [a5 + 0x10]\n  4889: u64 [s1 + 0x160] = a3\n  4893: a4 = u64 [a5 + 0x8]\n  4896: u64 [s1 + 0xc0] = a4\n  4900: u64 [a5] = a0\n  4902: a5 = a1 + 0x400\n  4906: u64 [a5 + 0xf8] = a2\n  4910: u64 [a5 + 0xf0] = a3\n  4914: a0 = s1 + 0x7ff\n  4918: a0 = a0 + 0x5e1\n  4922: u64 [a5 + 0xe8] = a4\n  4926: ra = 132, jump @527\n      : @159 [@dyn 66] (gas: 4)\n  4932: a0 = s1 + 0x7ff\n  4936: a0 = a0 + 0x5c1\n  4940: a1 = u64 [s1 + 0x178]\n  4944: ra = 134, jump @11\n      : @160 [@dyn 67] (gas: 7)\n  4950: a0 = u64 [s1 + 0xc0]\n  4954: a4 = s1 + 0x100\n  4958: a1 = u64 [a4 + 0x70]\n  4961: a2 = u64 [a4 + 0x60]\n  4964: a2 = a2 | a1\n  4967: a3 = u64 [a4 + 0x68]\n  4970: t0 = 136, jump @667\n      : @161 [@dyn 68] (gas: 1)\n  4976: jump @187 if a1 != 0\n      : @162 (gas: 17)\n  4980: a2 = s1 + 0x7ff\n  4984: a2 = a2 + 0xf9\n  4988: a1 = u64 [a2 + 0x4d8]\n  4992: a3 = u64 [a2 + 0x4d0]\n  4996: u64 [s1 + 0x170] = a3\n  5000: a4 = u64 [a2 + 0x4c8]\n  5004: u64 [s1 + 0x178] = a4\n  5008: a1 = a1 << 0x20\n  5011: a5 = a1 >> 0x20\n  5014: u64 [s1 + 0x168] = a5\n  5018: u64 [a2 + 1216] = 0\n  5022: u64 [a2 + 0x4a8] = a4\n  5026: u64 [a2 + 0x4b0] = a3\n  5030: a1 = s1 + 0x7ff\n  5034: a1 = a1 + 0x5a1\n  5038: u64 [a2 + 0x4b8] = a5\n  5042: ra = 138, jump @9\n      : @163 [@dyn 69] (gas: 7)\n  5048: a2 = s1 + 0x100\n  5052: a0 = u64 [a2 + 0x78]\n  5055: a1 = u64 [a2 + 0x70]\n  5058: a0 = a0 | a1\n  5061: a1 = u64 [a2 + 0x68]\n  5064: a0 = a0 | a1\n  5067: jump @203 if a0 != 0\n      : @164 (gas: 3)\n  5071: a0 = s1 + 0x580\n  5075: a1 = 0x40\n  5078: ra = 140, jump @7\n      : @165 [@dyn 70] (gas: 7)\n  5084: a1 = s1 + 0x500\n  5088: a4 = u64 [a1 + 0x98]\n  5092: a5 = u64 [a1 + 0x90]\n  5096: a3 = u64 [a1 + 0x88]\n  5100: a0 = u64 [a1 + 0x80]\n  5104: a2 = a3 | a4\n  5107: t0 = 142, jump @666\n      : @166 [@dyn 71] (gas: 1)\n  5113: jump @187 if a1 != 0\n      : @167 (gas: 11)\n  5117: u64 [s1 + 1392] = 0\n  5121: u64 [s1 + 1384] = 0\n  5125: u64 [s1 + 1376] = 0\n  5129: a2 = 0x8c379a000000000\n  5139: a1 = s1 + 0x560\n  5143: u64 [s1 + 0x578] = a2\n  5147: u64 [s1 + 0x178] = a0\n  5151: u64 [s1 + 0x170] = a3\n  5155: u64 [s1 + 0x168] = a4\n  5159: u64 [s1 + 0x160] = a5\n  5163: ra = 144, jump @9\n      : @168 [@dyn 72] (gas: 1)\n  5169: t0 = 146, jump @650\n      : @169 [@dyn 73] (gas: 1)\n  5175: jump @187 if a0 == 0\n      : @170 (gas: 9)\n  5179: i32 a0 = a1 + 0x4\n  5182: u64 [s1 + 1368] = 0\n  5186: u64 [s1 + 1360] = 0\n  5190: u64 [s1 + 1344] = 0x20\n  5195: a1 = s1 + 0x540\n  5199: u64 [s1 + 1352] = 0\n  5203: u64 [s1 + 0x168] = a3\n  5207: u64 [s1 + 0x160] = a4\n  5211: ra = 148, jump @9\n      : @171 [@dyn 74] (gas: 1)\n  5217: t0 = 150, jump @658\n      : @172 [@dyn 75] (gas: 1)\n  5223: jump @187 if a0 == 0\n      : @173 (gas: 7)\n  5227: i32 a0 = a1 + 0x24\n  5230: u64 [s1 + 1336] = 0\n  5234: u64 [s1 + 1328] = 0\n  5238: u64 [s1 + 1312] = 0xf\n  5243: a1 = s1 + 0x520\n  5247: u64 [s1 + 1320] = 0\n  5251: ra = 152, jump @9\n      : @174 [@dyn 76] (gas: 1)\n  5257: t0 = 154, jump @654\n      : @175 [@dyn 77] (gas: 1)\n  5263: jump @187 if a0 == 0\n      : @176 (gas: 10)\n  5267: i32 a0 = a2 + 0x44\n  5270: a1 = u64 [0x20090]\n  5275: a2 = u64 [0x20098]\n  5280: u64 [s1 + 0x518] = a1\n  5284: u64 [s1 + 1288] = 0\n  5288: u64 [s1 + 0x510] = a2\n  5292: a1 = s1 + 0x500\n  5296: u64 [s1 + 1280] = 0\n  5300: ra = 0xb2\n  5304: jump @9\n      : @177 (gas: 9)\n  5307: a0 = s1 + 0x10f8\n  5311: u64 [a0 + 320] = 0\n  5315: u64 [a0 + 312] = 0\n  5319: u64 [a0 + 304] = 0\n  5323: u64 [a0 + 296] = 0\n  5327: a0 = s1 + 0x1000\n  5331: i32 a0 = a0 + 0x220\n  5335: ecalli 16 // 'value_transferred'\n  5337: fallthrough\n      : @178 (gas: 10)\n  5338: a4 = s1 + 0x10f8\n  5342: a5 = a4 + 0x100\n  5346: a0 = u64 [a5 + 0x38]\n  5349: a1 = u64 [a5 + 0x40]\n  5352: a2 = u64 [a5 + 0x30]\n  5355: a3 = u64 [a5 + 0x28]\n  5358: a1 = a1 | a2\n  5361: a0 = a0 | a3\n  5364: a0 = a0 | a1\n  5367: jump @180 if a0 == 0\n      : @179 (gas: 1)\n  5370: jump @456\n      : @180 (gas: 3)\n  5373: a0 = u64 [s1 + 0x178]\n  5377: a0 = i32 [a0]\n  5379: jump @182 if a0 >u 3\n      : @181 (gas: 1)\n  5383: jump @457\n      : @182 (gas: 7)\n  5386: u64 [a4 + 352] = 0\n  5390: u64 [a4 + 344] = 0\n  5394: u64 [a4 + 336] = 0\n  5398: u64 [a4 + 328] = 0\n  5402: a0 = s1 + 0x4c0\n  5406: a1 = s1 + 0x1240\n  5410: ra = 156, jump @11\n      : @183 [@dyn 78] (gas: 10)\n  5416: a0 = u64 [s1 + 0x4d0]\n  5420: a1 = s1 + 0x100\n  5424: u64 [a1 + 0x68] = a0\n  5427: a0 = u64 [s1 + 0x4c8]\n  5431: u64 [a1 + 0x78] = a0\n  5434: a0 = u64 [s1 + 0x4c0]\n  5438: u64 [a1 + 0x70] = a0\n  5441: a0 = s1 + 0x4a0\n  5445: a1 = 0x40\n  5448: ra = 158, jump @7\n      : @184 [@dyn 79] (gas: 6)\n  5454: a4 = s1 + 0x400\n  5458: a3 = u64 [a4 + 0xb8]\n  5462: a1 = u64 [a4 + 0xb0]\n  5466: a2 = u64 [a4 + 0xa8]\n  5470: a0 = u64 [a4 + 0xa0]\n  5474: t0 = 160, jump @653\n      : @185 [@dyn 80] (gas: 1)\n  5480: jump @187 if a1 != 0\n      : @186 (gas: 1)\n  5483: jump @458\n      : @187 (gas: 1)\n  5486: trap\n      : @188 (gas: 3)\n  5487: a0 = s1 + 0x440\n  5491: a1 = 0x40\n  5494: ra = 162, jump @7\n      : @189 [@dyn 81] (gas: 7)\n  5500: a1 = s1 + 0x400\n  5504: a4 = u64 [a1 + 0x58]\n  5507: a5 = u64 [a1 + 0x50]\n  5510: a3 = u64 [a1 + 0x48]\n  5513: a0 = u64 [a1 + 0x40]\n  5516: a2 = a3 | a4\n  5519: t0 = 164, jump @666\n      : @190 [@dyn 82] (gas: 1)\n  5525: jump @187 if a1 != 0\n      : @191 (gas: 11)\n  5528: u64 [s1 + 1072] = 0\n  5532: u64 [s1 + 1064] = 0\n  5536: u64 [s1 + 1056] = 0\n  5540: a2 = 0x8c379a000000000\n  5550: a1 = s1 + 0x420\n  5554: u64 [s1 + 0x438] = a2\n  5558: u64 [s1 + 0x178] = a0\n  5562: u64 [s1 + 0x170] = a3\n  5566: u64 [s1 + 0x168] = a4\n  5570: u64 [s1 + 0x160] = a5\n  5574: ra = 166, jump @9\n      : @192 [@dyn 83] (gas: 1)\n  5580: t0 = 168, jump @650\n      : @193 [@dyn 84] (gas: 1)\n  5586: jump @187 if a0 == 0\n      : @194 (gas: 9)\n  5589: i32 a0 = a1 + 0x4\n  5592: u64 [s1 + 1048] = 0\n  5596: u64 [s1 + 1040] = 0\n  5600: u64 [s1 + 1024] = 0x20\n  5605: a1 = s1 + 0x400\n  5609: u64 [s1 + 1032] = 0\n  5613: u64 [s1 + 0x168] = a3\n  5617: u64 [s1 + 0x160] = a4\n  5621: ra = 170, jump @9\n      : @195 [@dyn 85] (gas: 1)\n  5627: t0 = 172, jump @658\n      : @196 [@dyn 86] (gas: 1)\n  5633: jump @187 if a0 == 0\n      : @197 (gas: 7)\n  5637: i32 a0 = a1 + 0x24\n  5640: u64 [s1 + 1016] = 0\n  5644: u64 [s1 + 1008] = 0\n  5648: u64 [s1 + 992] = 0x8\n  5653: a1 = s1 + 0x3e0\n  5657: u64 [s1 + 1000] = 0\n  5661: ra = 174, jump @9\n      : @198 [@dyn 87] (gas: 1)\n  5667: t0 = 176, jump @654\n      : @199 [@dyn 88] (gas: 1)\n  5673: jump @187 if a0 == 0\n      : @200 (gas: 8)\n  5677: i32 a0 = a2 + 0x44\n  5680: a1 = u64 [0x200a0]\n  5685: u64 [s1 + 976] = 0\n  5689: u64 [s1 + 968] = 0\n  5693: u64 [s1 + 0x3d8] = a1\n  5697: a1 = s1 + 0x3c0\n  5701: u64 [s1 + 960] = 0\n  5705: ra = 178, jump @9\n      : @201 [@dyn 89] (gas: 3)\n  5711: a1 = 0x64\n  5714: a0 = u64 [s1 + 0x178]\n  5718: ra = 180, jump @16\n      : @202 [@dyn 90] (gas: 6)\n  5724: i32 a1 = a0 + 0\n  5726: a0 = 0x1\n  5729: a2 = 0x64\n  5732: ecalli 13 // 'seal_return'\n  5734: ra = 0xb6\n  5738: jump @0\n      : @203 (gas: 1)\n  5741: ra = 182, jump @0\n      : @204 [@dyn 91] (gas: 11)\n  5747: a1 = u64 [0x30110]\n  5752: a2 = s1 + 0x100\n  5756: u64 [a2 + 0x68] = a1\n  5759: a1 = u64 [0x30108]\n  5764: u64 [a2 + 0x60] = a1\n  5767: a0 = u64 [0x30100]\n  5772: u64 [a2 + 0x70] = a0\n  5775: a0 = s1 + 0x7ff\n  5779: a0 = a0 + 0x581\n  5783: a1 = 0x40\n  5786: ra = 184, jump @7\n      : @205 [@dyn 92] (gas: 9)\n  5792: a4 = s1 + 0x7ff\n  5796: a4 = a4 + 0xf9\n  5800: t1 = u64 [a4 + 0x4a0]\n  5804: a1 = a4 + 0x400\n  5808: a5 = u64 [a1 + 0x98]\n  5812: a3 = u64 [a1 + 0x90]\n  5816: a0 = u64 [a1 + 0x88]\n  5820: a2 = a3 | t1\n  5823: t0 = 186, jump @666\n      : @206 [@dyn 93] (gas: 1)\n  5829: jump @187 if a1 != 0\n      : @207 (gas: 12)\n  5833: u64 [a4 + 1144] = 0\n  5837: u64 [a4 + 1136] = 0\n  5841: u64 [a4 + 1128] = 0\n  5845: t0 = 0xe738c7c800000000\n  5855: a1 = s1 + 0x7ff\n  5859: a1 = a1 + 0x561\n  5863: u64 [a4 + 0x480] = t0\n  5867: u64 [s1 + 0x178] = a0\n  5871: u64 [s1 + 0x158] = t1\n  5875: u64 [s1 + 0x150] = a5\n  5879: u64 [s1 + 0x148] = a3\n  5883: ra = 188, jump @9\n      : @208 [@dyn 94] (gas: 11)\n  5889: a4 = s1 + 0x100\n  5893: a3 = u64 [a4 + 0x78]\n  5896: a0 = u64 [a4 + 0x58]\n  5899: a1 = u64 [a4 + 0x50]\n  5902: a0 = a0 | a1\n  5905: a1 = 0xfffffffc\n  5915: a1 = a3 <u a1\n  5918: a2 = u64 [a4 + 0x48]\n  5921: a1 = 0 if a2 != 0\n  5923: a1 = 0 if a0 != 0\n  5925: jump @187 if a1 == 0\n      : @209 (gas: 17)\n  5929: a0 = 0x2400000000\n  5939: u64 [s1 + 0x98] = a0\n  5943: i32 a0 = a3 + 0x4\n  5946: a1 = u64 [s1 + 0xe0]\n  5950: a4 = s1 + 0x7ff\n  5954: a4 = a4 + 0xf9\n  5958: a3 = a4 + 0x400\n  5962: u64 [a3 + 0x48] = a1\n  5965: a1 = u64 [s1 + 0xd8]\n  5969: u64 [a3 + 0x50] = a1\n  5972: a1 = u64 [s1 + 0xd0]\n  5976: u64 [a3 + 0x58] = a1\n  5979: a1 = s1 + 0x7ff\n  5983: a1 = a1 + 0x541\n  5987: a2 = u64 [s1 + 0xc8]\n  5991: u64 [a3 + 0x60] = a2\n  5994: ra = 190, jump @9\n      : @210 [@dyn 95] (gas: 30)\n  6000: ecalli 10 // 'ref_time_left'\n  6002: a0 = u64 [s1 + 0x160]\n  6006: a0 = reverse a0\n  6008: a1 = a0 << 0x20\n  6011: a2 = u64 [s1 + 0x168]\n  6015: a2 = reverse a2\n  6017: a2 = a2 >> 0x20\n  6020: a4 = a2 | a1\n  6023: a1 = u64 [s1 + 0x170]\n  6027: a1 = reverse a1\n  6029: a2 = a1 << 0x20\n  6032: a3 = 0x300e0\n  6037: u64 [s1 + 0xa0] = a3\n  6041: a0 = a0 >> 0x20\n  6044: a0 = a0 | a2\n  6047: a1 = a1 >> 0x20\n  6050: u64 [s1 + 0x80] = a0\n  6054: u64 [0x300e8] = a0\n  6059: u64 [s1 + 0x90] = a4\n  6063: u64 [0x300e0] = a4\n  6068: u64 [s1 + 0x88] = a1\n  6072: u32 [0x300f0] = a1\n  6077: a0 = s1 + 0x10f8\n  6081: u64 [a0 + 512] = 0\n  6085: u64 [a0 + 504] = 0\n  6089: u64 [a0 + 496] = 0\n  6093: u64 [a0 + 488] = 0\n  6097: a1 = 0x24\n  6100: a0 = u64 [s1 + 0x178]\n  6104: ra = 192, jump @16\n      : @211 [@dyn 96] (gas: 4)\n  6110: u64 [s1 + 0x170] = a0\n  6114: a1 = 0x20\n  6117: a0 = u64 [s1 + 0x178]\n  6121: ra = 194, jump @16\n      : @212 [@dyn 97] (gas: 34)\n  6127: a1 = s1 + 0x10f8\n  6131: u32 [a1 + 520] = 0x20\n  6136: u64 [a1 + 576] = 0\n  6140: u64 [a1 + 568] = 0\n  6144: u64 [a1 + 560] = 0\n  6148: u64 [a1 + 552] = 0\n  6152: a1 = u64 [s1 + 0xa0]\n  6156: a1 = a1 << 0x20\n  6159: a2 = a1 >> 0x20\n  6162: a1 = 0x1800000000\n  6172: u64 [s1 + 0x78] = a2\n  6175: t0 = a2 | a1\n  6178: a1 = s1 + 0x12e0\n  6182: a1 = a1 << 0x20\n  6185: a1 = a1 >> 0x20\n  6188: a2 = s1 + 0x1320\n  6192: a2 = a2 << 0x20\n  6195: a3 = a2 | a1\n  6198: a1 = u64 [s1 + 0x170]\n  6202: a1 = a1 << 0x20\n  6205: a1 = a1 >> 0x20\n  6208: a4 = u64 [s1 + 0x98]\n  6212: a4 = a4 | a1\n  6215: a0 = a0 << 0x20\n  6218: a0 = a0 >> 0x20\n  6221: a1 = s1 + 0x1300\n  6225: a1 = a1 << 0x20\n  6228: a5 = a1 | a0\n  6231: a1 = 0xffffffffffffffff\n  6234: a2 = 0xffffffffffffffff\n  6237: u64 [s1 + 0x170] = t0\n  6241: a0 = t0\n  6243: ecalli 0 // 'call'\n  6244: fallthrough\n      : @213 (gas: 1)\n  6245: jump @235 if a0 != 0\n      : @214 (gas: 2)\n  6249: ecalli 12 // 'return_data_size'\n  6251: fallthrough\n      : @215 (gas: 2)\n  6252: a5 = 0x20\n  6255: jump @217 if a0 >=u a5\n      : @216 (gas: 3)\n  6258: ecalli 12 // 'return_data_size'\n  6260: a5 = a0\n  6262: fallthrough\n      : @217 (gas: 22)\n  6263: a2 = s1 + 0x7ff\n  6267: a2 = a2 + 0xf9\n  6271: a3 = u64 [s1 + 0x178]\n  6275: t0 = u64 [s1 + 0x158]\n  6279: a0 = u64 [s1 + 0x150]\n  6283: a1 = u64 [s1 + 0x148]\n  6287: u64 [s1 + 352] = 0\n  6291: u64 [s1 + 0x168] = a5\n  6295: u64 [a2 + 0x3e8] = a5\n  6299: a4 = a2 + 0x400\n  6303: u64 [a4 + 0x8] = a3\n  6306: u64 [a2 + 1008] = 0\n  6310: u64 [a4 + 0x10] = a1\n  6313: u64 [a2 + 1016] = 0\n  6317: u64 [a4 + 0x18] = a0\n  6320: u64 [a2 + 1024] = 0\n  6324: a0 = s1 + 0x7ff\n  6328: a0 = a0 + 0x501\n  6332: a1 = s1 + 0x7ff\n  6336: a1 = a1 + 0x4e1\n  6340: u64 [a2 + 0x420] = t0\n  6344: ra = 196, jump @535\n      : @218 [@dyn 98] (gas: 4)\n  6350: a3 = u64 [s1 + 0x160]\n  6354: a0 = a3 >u 0\n  6356: a1 = u64 [s1 + 0x168]\n  6360: t0 = 198, jump @648\n      : @219 [@dyn 99] (gas: 1)\n  6366: jump @221 if a2 != 0\n      : @220 (gas: 1)\n  6369: jump @495\n      : @221 (gas: 4)\n  6372: a0 = s1 + 0x7ff\n  6376: a0 = a0 + 0x4c1\n  6380: a1 = u64 [s1 + 0x178]\n  6384: ra = 200, jump @7\n      : @222 [@dyn 100] (gas: 12)\n  6390: a3 = s1 + 0x7ff\n  6394: a3 = a3 + 0xf9\n  6398: a4 = a3 + 0x300\n  6402: a0 = u64 [a4 + 0xe0]\n  6406: a1 = u64 [a4 + 0xd8]\n  6410: a2 = u64 [a4 + 0xc8]\n  6414: a3 = u64 [a4 + 0xd0]\n  6418: a4 = a1 | a0\n  6421: a5 = a2 <u 0x2\n  6424: a5 = 0 if a3 != 0\n  6426: a5 = 0 if a4 != 0\n  6428: jump @224 if a5 != 0\n      : @223 (gas: 1)\n  6431: jump @497\n      : @224 (gas: 8)\n  6434: a1 = a1 | a2\n  6437: a0 = a0 | a3\n  6440: a0 = a0 | a1\n  6443: u64 [s1 + 0x178] = a0\n  6447: a0 = s1 + 0x7ff\n  6451: a0 = a0 + 0x4a1\n  6455: a1 = 0x40\n  6458: ra = 202, jump @7\n      : @225 [@dyn 101] (gas: 11)\n  6464: a2 = s1 + 0x7ff\n  6468: a2 = a2 + 0xf9\n  6472: a5 = u64 [a2 + 0x3c0]\n  6476: a4 = u64 [a2 + 0x3b8]\n  6480: t2 = u64 [a2 + 0x3a8]\n  6484: t0 = u64 [a2 + 0x3b0]\n  6488: a1 = t2 | a4\n  6491: a0 = t0 | a5\n  6494: t1 = a4 | a5\n  6497: a3 = u64 [s1 + 0x178]\n  6501: jump @247 if a3 != 0\n      : @226 (gas: 6)\n  6505: a1 = a1 | a0\n  6508: a1 = a1 >> 0x20\n  6511: a0 = a0 | a4\n  6514: a0 = a0 << 0x20\n  6517: a0 = a0 | a1\n  6520: jump @187 if a0 != 0\n      : @227 (gas: 11)\n  6524: u64 [s1 + 1552] = 0\n  6528: u64 [s1 + 1544] = 0\n  6532: u64 [s1 + 1536] = 0\n  6536: a0 = 0x8c379a000000000\n  6546: a1 = s1 + 0x600\n  6550: u64 [s1 + 0x618] = a0\n  6554: a0 = t2\n  6556: u64 [s1 + 0x168] = t2\n  6560: u64 [s1 + 0x160] = t0\n  6564: u64 [s1 + 0x158] = t1\n  6568: ra = 204, jump @9\n      : @228 [@dyn 102] (gas: 10)\n  6574: a4 = s1 + 0x100\n  6578: a1 = u64 [a4 + 0x68]\n  6581: a3 = 0x100000000\n  6591: a0 = 0xfffffffc\n  6601: a0 = a1 <u a0\n  6604: a2 = u64 [a4 + 0x60]\n  6607: a0 = 0 if a2 != 0\n  6609: a2 = u64 [a4 + 0x58]\n  6612: a0 = 0 if a2 != 0\n  6614: jump @187 if a0 == 0\n      : @229 (gas: 8)\n  6618: i32 a0 = a1 + 0x4\n  6621: u64 [s1 + 1528] = 0\n  6625: u64 [s1 + 1520] = 0\n  6629: u64 [s1 + 1504] = 0x20\n  6634: a1 = s1 + 0x5e0\n  6638: u64 [s1 + 1512] = 0\n  6642: u64 [s1 + 0x178] = a3\n  6646: ra = 206, jump @9\n      : @230 [@dyn 103] (gas: 10)\n  6652: a4 = s1 + 0x100\n  6656: a3 = u64 [a4 + 0x58]\n  6659: a2 = u64 [a4 + 0x60]\n  6662: a1 = u64 [a4 + 0x68]\n  6665: a0 = u64 [a4 + 0x78]\n  6668: a0 = a0 + 0xffffffffffffffdc\n  6671: a0 = a1 <u a0\n  6674: a0 = 0 if a2 != 0\n  6676: a0 = 0 if a3 != 0\n  6678: jump @187 if a0 == 0\n      : @231 (gas: 7)\n  6682: i32 a0 = a1 + 0x24\n  6685: u64 [s1 + 1496] = 0\n  6689: u64 [s1 + 1488] = 0\n  6693: u64 [s1 + 1472] = 0xb\n  6698: a1 = s1 + 0x5c0\n  6702: u64 [s1 + 1480] = 0\n  6706: ra = 208, jump @9\n      : @232 [@dyn 104] (gas: 9)\n  6712: a3 = s1 + 0x100\n  6716: a2 = u64 [a3 + 0x68]\n  6719: a0 = 0xffffffbc\n  6729: a0 = a2 <u a0\n  6732: a1 = u64 [a3 + 0x60]\n  6735: a0 = 0 if a1 != 0\n  6737: a1 = u64 [a3 + 0x58]\n  6740: a0 = 0 if a1 != 0\n  6742: jump @187 if a0 == 0\n      : @233 (gas: 9)\n  6746: i32 a0 = a2 + 0x44\n  6749: a1 = u64 [0x20088]\n  6754: u64 [s1 + 1448] = 0\n  6758: u64 [s1 + 0x5b8] = a1\n  6762: a1 = 0x626c650000000000\n  6772: u64 [s1 + 0x5b0] = a1\n  6776: a1 = s1 + 0x5a0\n  6780: u64 [s1 + 1440] = 0\n  6784: ra = 210, jump @9\n      : @234 [@dyn 105] (gas: 4)\n  6790: a1 = 0x64\n  6793: a0 = u64 [s1 + 0x168]\n  6797: ra = 0xb4\n  6801: jump @16\n      : @235 (gas: 4)\n  6804: a0 = s1 + 0x7ff\n  6808: a0 = a0 + 0x521\n  6812: a1 = 0x40\n  6815: ra = 212, jump @7\n      : @236 [@dyn 106] (gas: 15)\n  6821: a0 = s1 + 0x7ff\n  6825: a0 = a0 + 0xf9\n  6829: a2 = a0 + 0x400\n  6833: a1 = u64 [a2 + 0x40]\n  6836: u64 [s1 + 0x170] = a1\n  6840: a1 = u64 [a2 + 0x38]\n  6843: u64 [s1 + 0x168] = a1\n  6847: a1 = u64 [a2 + 0x30]\n  6850: u64 [s1 + 0x160] = a1\n  6854: a0 = u64 [a2 + 0x28]\n  6857: u64 [s1 + 0x178] = a0\n  6861: ra = 0xd6\n  6865: ecalli 12 // 'return_data_size'\n  6867: t0 = 0xd8\n  6871: jump @646\n      : @237 [@dyn 107] (gas: 1)\n  6874: t0 = 216, jump @646\n      : @238 [@dyn 108] (gas: 1)\n  6880: jump @187 if a1 != 0\n      : @239 (gas: 3)\n  6884: a2 = a0\n  6886: a0 = a0 >> 0x20\n  6889: jump @187 if a0 != 0\n      : @240 (gas: 6)\n  6893: i32 a0 = a2 + 0\n  6895: u64 [s1 + 0x170] = a0\n  6899: a0 = u64 [s1 + 0x178]\n  6903: a1 = a2\n  6905: u64 [s1 + 0x168] = a2\n  6909: ra = 218, jump @16\n      : @241 [@dyn 109] (gas: 11)\n  6915: a1 = s1 + 0x10f8\n  6919: a2 = u64 [s1 + 0x168]\n  6923: u32 [a1 + 0x248] = a2\n  6927: i32 a0 = a0 + 0\n  6929: a1 = s1 + 0x1000\n  6933: i32 a1 = a1 + 0x340\n  6937: a2 = 0\n  6939: ecalli 11 // 'return_data_copy'\n  6941: a0 = s1 + 0x10f8\n  6945: a0 = i32 [a0 + 0x248]\n  6949: fallthrough\n      : @242 (gas: 2)\n  6950: a1 = u64 [s1 + 0x170]\n  6954: jump @187 if a0 <u a1\n      : @243 (gas: 2)\n  6958: ecalli 12 // 'return_data_size'\n  6960: fallthrough\n      : @244 (gas: 3)\n  6961: a1 = a0\n  6963: a0 = a0 >> 0x20\n  6966: jump @187 if a0 != 0\n      : @245 (gas: 3)\n  6970: a0 = u64 [s1 + 0x178]\n  6974: u64 [s1 + 0x170] = a1\n  6978: ra = 220, jump @16\n      : @246 [@dyn 110] (gas: 5)\n  6984: i32 a1 = a0 + 0\n  6986: a2 = i32 [s1 + 0x170]\n  6990: a0 = 0x1\n  6993: ecalli 13 // 'seal_return'\n  6995: fallthrough\n      : @247 (gas: 6)\n  6996: a1 = a1 | a0\n  6999: a1 = a1 >> 0x20\n  7002: a0 = a0 | a4\n  7005: a0 = a0 << 0x20\n  7008: a0 = a0 | a1\n  7011: jump @187 if a0 != 0\n      : @248 (gas: 14)\n  7015: u64 [s1 + 0x150] = a4\n  7019: u64 [s1 + 0x178] = a5\n  7023: u64 [a2 + 920] = 0\n  7027: u64 [a2 + 912] = 0\n  7031: u64 [a2 + 904] = 0\n  7035: a0 = 0xb9186d7d00000000\n  7045: a1 = s1 + 0x7ff\n  7049: a1 = a1 + 0x481\n  7053: u64 [a2 + 0x3a0] = a0\n  7057: a0 = t2\n  7059: u64 [s1 + 0x168] = t2\n  7063: u64 [s1 + 0x160] = t0\n  7067: u64 [s1 + 0x158] = t1\n  7071: ra = 222, jump @9\n      : @249 [@dyn 111] (gas: 9)\n  7077: a2 = s1 + 0x100\n  7081: a3 = u64 [a2 + 0x68]\n  7084: a0 = 0xfffffffc\n  7094: a0 = a3 <u a0\n  7097: a1 = u64 [a2 + 0x60]\n  7100: a0 = 0 if a1 != 0\n  7102: a1 = u64 [a2 + 0x58]\n  7105: a0 = 0 if a1 != 0\n  7107: jump @187 if a0 == 0\n      : @250 (gas: 15)\n  7111: i32 a0 = a3 + 0x4\n  7114: a1 = u64 [s1 + 0xe0]\n  7118: a4 = s1 + 0x7ff\n  7122: a4 = a4 + 0xf9\n  7126: a3 = a4 + 0x300\n  7130: u64 [a3 + 0x68] = a1\n  7133: a1 = u64 [s1 + 0xd8]\n  7137: u64 [a3 + 0x70] = a1\n  7140: a1 = u64 [s1 + 0xd0]\n  7144: u64 [a3 + 0x78] = a1\n  7147: a1 = s1 + 0x7ff\n  7151: a1 = a1 + 0x461\n  7155: a2 = u64 [s1 + 0xc8]\n  7159: u64 [a3 + 0x80] = a2\n  7163: ra = 224, jump @9\n      : @251 [@dyn 112] (gas: 4)\n  7169: ra = 0xe2\n  7173: ecalli 10 // 'ref_time_left'\n  7175: t0 = 0xe4\n  7179: jump @651\n      : @252 [@dyn 113] (gas: 1)\n  7182: t0 = 228, jump @651\n      : @253 [@dyn 114] (gas: 7)\n  7188: u64 [a0 + 640] = 0\n  7192: u64 [a0 + 632] = 0\n  7196: u64 [a0 + 624] = 0\n  7200: u64 [a0 + 616] = 0\n  7204: a1 = 0x24\n  7207: a0 = u64 [s1 + 0x168]\n  7211: ra = 230, jump @16\n      : @254 [@dyn 115] (gas: 4)\n  7217: u64 [s1 + 0x158] = a0\n  7221: a1 = 0x20\n  7224: a0 = u64 [s1 + 0x168]\n  7228: ra = 232, jump @16\n      : @255 [@dyn 116] (gas: 27)\n  7234: a1 = s1 + 0x10f8\n  7238: u32 [a1 + 648] = 0x20\n  7243: u64 [a1 + 704] = 0\n  7247: u64 [a1 + 696] = 0\n  7251: u64 [a1 + 688] = 0\n  7255: u64 [a1 + 680] = 0\n  7259: a1 = s1 + 0x1360\n  7263: a1 = a1 << 0x20\n  7266: a1 = a1 >> 0x20\n  7269: a2 = s1 + 0x13a0\n  7273: a2 = a2 << 0x20\n  7276: a3 = a2 | a1\n  7279: a1 = u64 [s1 + 0x158]\n  7283: a1 = a1 << 0x20\n  7286: a1 = a1 >> 0x20\n  7289: a4 = u64 [s1 + 0x98]\n  7293: a4 = a4 | a1\n  7296: a0 = a0 << 0x20\n  7299: a0 = a0 >> 0x20\n  7302: a1 = s1 + 0x1380\n  7306: a1 = a1 << 0x20\n  7309: a5 = a1 | a0\n  7312: a1 = 0xffffffffffffffff\n  7315: a2 = 0xffffffffffffffff\n  7318: a0 = u64 [s1 + 0x170]\n  7322: ecalli 0 // 'call'\n  7323: fallthrough\n      : @256 (gas: 1)\n  7324: jump @279 if a0 != 0\n      : @257 (gas: 2)\n  7328: ecalli 12 // 'return_data_size'\n  7330: fallthrough\n      : @258 (gas: 2)\n  7331: a5 = 0x20\n  7334: jump @260 if a0 >=u a5\n      : @259 (gas: 3)\n  7337: ecalli 12 // 'return_data_size'\n  7339: a5 = a0\n  7341: fallthrough\n      : @260 (gas: 22)\n  7342: a2 = s1 + 0x7ff\n  7346: a2 = a2 + 0xf9\n  7350: a3 = u64 [s1 + 0x168]\n  7354: a0 = u64 [s1 + 0x160]\n  7358: t0 = u64 [s1 + 0x178]\n  7362: a1 = u64 [s1 + 0x150]\n  7366: u64 [s1 + 368] = 0\n  7370: u64 [s1 + 0x178] = a5\n  7374: a4 = a2 + 0x300\n  7378: u64 [a4 + 0x8] = a5\n  7381: u64 [a4 + 0x28] = a3\n  7384: u64 [a2 + 784] = 0\n  7388: u64 [a4 + 0x30] = a0\n  7391: u64 [a2 + 792] = 0\n  7395: u64 [a4 + 0x38] = a1\n  7398: u64 [a2 + 800] = 0\n  7402: a0 = s1 + 0x7ff\n  7406: a0 = a0 + 0x421\n  7410: a1 = s1 + 0x7ff\n  7414: a1 = a1 + 0x401\n  7418: u64 [a2 + 0x340] = t0\n  7422: ra = 234, jump @535\n      : @261 [@dyn 117] (gas: 4)\n  7428: a3 = u64 [s1 + 0x170]\n  7432: a0 = a3 >u 0\n  7434: a1 = u64 [s1 + 0x178]\n  7438: t0 = 236, jump @648\n      : @262 [@dyn 118] (gas: 1)\n  7444: jump @264 if a2 != 0\n      : @263 (gas: 1)\n  7447: jump @495\n      : @264 (gas: 4)\n  7450: a0 = s1 + 0x7ff\n  7454: a0 = a0 + 0x3e1\n  7458: a1 = u64 [s1 + 0x168]\n  7462: ra = 238, jump @7\n      : @265 [@dyn 119] (gas: 20)\n  7468: a0 = s1 + 0x7ff\n  7472: a0 = a0 + 0xf9\n  7476: a1 = u64 [a0 + 0x300]\n  7480: u64 [s1 + 0x60] = a1\n  7483: a2 = a0 + 0x200\n  7487: a1 = u64 [a2 + 0xf8]\n  7491: u64 [s1 + 0x58] = a1\n  7494: a1 = u64 [a2 + 0xf0]\n  7498: u64 [s1 + 0x50] = a1\n  7501: a0 = u64 [a2 + 0xe8]\n  7505: u64 [s1 + 0x68] = a0\n  7508: a0 = s1 + 0x10f8\n  7512: u64 [a0 + 768] = 0\n  7516: u64 [a0 + 760] = 0\n  7520: u64 [a0 + 752] = 0\n  7524: u64 [a0 + 744] = 0\n  7528: a0 = s1 + 0x1000\n  7532: i32 a0 = a0 + 0x3e0\n  7536: ecalli 16 // 'value_transferred'\n  7538: fallthrough\n      : @266 (gas: 17)\n  7539: t2 = u64 [s1 + 0x58]\n  7542: t1 = u64 [s1 + 0x60]\n  7545: t0 = u64 [s1 + 0x50]\n  7548: a5 = u64 [s1 + 0x68]\n  7551: a4 = s1 + 0x10f8\n  7555: a0 = u64 [a4 + 0x300]\n  7559: a1 = u64 [a4 + 0x2f0]\n  7563: a2 = u64 [a4 + 0x2e8]\n  7567: a3 = u64 [a4 + 0x2f8]\n  7571: a0 = a0 ^ t1\n  7574: a1 = a1 ^ t0\n  7577: a0 = a0 | a1\n  7580: a1 = a3 ^ t2\n  7583: a2 = a2 ^ a5\n  7586: a1 = a1 | a2\n  7589: a0 = a0 | a1\n  7592: jump @286 if a0 != 0\n      : @267 (gas: 8)\n  7596: u64 [a4 + 800] = 0\n  7600: u64 [a4 + 792] = 0\n  7604: u64 [a4 + 784] = 0\n  7608: u64 [a4 + 776] = 0x2\n  7613: a0 = s1 + 0x7ff\n  7617: a0 = a0 + 0x321\n  7621: a1 = s1 + 0x1400\n  7625: ra = 240, jump @11\n      : @268 [@dyn 120] (gas: 59)\n  7631: ra = u64 [s1 + 0x68]\n  7634: t0 = s1 + 0x7ff\n  7638: t0 = t0 + 0xf9\n  7642: a1 = u64 [t0 + 0x240]\n  7646: a2 = u64 [t0 + 0x238]\n  7650: a0 = u64 [t0 + 0x230]\n  7654: u64 [s1 + 0x28] = a0\n  7657: a0 = a1 << 0x20\n  7660: u64 [s1 + 0x30] = a2\n  7663: a2 = a2 >> 0x20\n  7666: a0 = a0 | a2\n  7669: t1 = a1 >> 0x20\n  7672: a2 = ra mulhu a0\n  7675: a1 = u64 [s1 + 0x50]\n  7678: a3 = a1 * a0\n  7681: a2 = a2 + a3\n  7684: a3 = a2 <u a3\n  7687: a4 = a1 mulhu a0\n  7690: a3 = a3 + a4\n  7693: a4 = ra * t1\n  7696: a2 = a2 + a4\n  7699: u64 [s1 + 0x48] = a2\n  7702: a2 = a2 <u a4\n  7705: a4 = ra mulhu t1\n  7708: a2 = a2 + a4\n  7711: a4 = a3 + a2\n  7714: a5 = a1 * t1\n  7717: a2 = a5 + a4\n  7720: a5 = a2 <u a5\n  7723: a3 = a4 <u a3\n  7726: a4 = a1 mulhu t1\n  7729: a3 = a3 + a4\n  7732: a3 = a3 + a5\n  7735: u64 [s1 + 0x170] = a3\n  7739: a3 = u64 [s1 + 0x58]\n  7742: a4 = t1 * a3\n  7745: t2 = u64 [s1 + 0x60]\n  7748: a5 = t2 * a0\n  7751: a4 = a4 + a5\n  7754: u64 [s1 + 0x178] = a4\n  7758: a4 = ra | a3\n  7761: a5 = t2\n  7763: t2 = u64 [s1 + 0x170]\n  7767: a5 = a5 | a1\n  7770: a1 = a4 | a5\n  7773: a5 = a3\n  7775: a4 = a3 * a0\n  7778: a4 = a4 + a2\n  7781: u64 [s1 + 0x40] = a4\n  7784: a2 = a4 <u a2\n  7787: a3 = u64 [t0 + 0x228]\n  7791: u64 [s1 + 0x20] = a3\n  7794: a4 = a5 mulhu a0\n  7797: a5 = u64 [s1 + 0x178]\n  7801: a5 = a5 + a4\n  7804: a3 = t2 + a5\n  7807: a3 = a3 + a2\n  7810: u64 [s1 + 0x70] = a3\n  7813: jump @271 if a1 == 0\n      : @269 (gas: 21)\n  7816: a3 = u64 [s1 + 0x70]\n  7819: t0 = a3 ^ t2\n  7822: a3 = u64 [s1 + 0x70]\n  7825: a3 = a3 <u t2\n  7828: a2 = a3 if t0 != 0\n  7831: t0 = a5 <u a4\n  7834: a3 = u64 [s1 + 0x60]\n  7837: a4 = a3 >u 0\n  7839: a5 = t1 >u 0\n  7841: a4 = a4 & a5\n  7844: a5 = a3 mulhu a0\n  7847: a5 = a5 >u 0\n  7849: a3 = u64 [s1 + 0x58]\n  7852: a1 = t1 mulhu a3\n  7855: a1 = a1 >u 0\n  7857: a1 = a1 | a4\n  7860: a1 = a1 | a5\n  7863: a1 = a1 | t0\n  7866: a3 = u64 [s1 + 0x70]\n  7869: a1 = a1 | a2\n  7872: jump @271 if a1 == 0\n      : @270 (gas: 1)\n  7875: jump @508\n      : @271 (gas: 53)\n  7878: t0 = ra * a0\n  7881: ra = u64 [s1 + 0x40]\n  7884: a0 = t0 | ra\n  7887: t2 = u64 [s1 + 0x48]\n  7890: a1 = t2 | a3\n  7893: a0 = a0 | a1\n  7896: a0 = a0 <u 0x1\n  7899: u64 [s1 + 0x178] = a0\n  7903: a0 = clz ra\n  7905: a0 = a0 + 0x40\n  7908: a1 = u64 [s1 + 0x70]\n  7911: a4 = clz a1\n  7913: a1 = u64 [s1 + 0x70]\n  7916: a4 = a0 if a1 == 0\n  7919: a0 = clz t0\n  7921: a0 = a0 + 0x40\n  7924: a1 = clz t2\n  7926: a1 = a0 if t2 == 0\n  7929: a0 = a1 + 0x80\n  7933: a2 = u64 [s1 + 0x70]\n  7936: a2 = ra | a2\n  7939: a4 = a0 if a2 == 0\n  7942: a3 = a0 <u a1\n  7945: a3 = 0 if a2 != 0\n  7947: a5 = a3 >u 0\n  7949: a0 = a4 <u 0xf3\n  7953: a2 = a0 ^ 0x1\n  7956: a5 = a2 if a3 == 0\n  7959: a0 = a5 <u 0x1\n  7962: a0 = a0 + 0xffffffffffffffff\n  7965: t1 = -a5\n  7967: a3 = -a3\n  7969: a2 = a3 - a2\n  7972: a1 = 0xf2 - a4\n  7976: a3 = t1 >u 0\n  7978: a4 = a0 >u 0\n  7980: a4 = a3 if a0 == 0\n  7983: a3 = a2 >u 0\n  7985: u64 [s1 + 0x158] = a1\n  7989: a1 = a1 <u 0x100\n  7993: a1 = a1 ^ 0x1\n  7996: a1 = a3 if a2 != 0\n  7999: a1 = a4 if a5 != 0\n  8002: a3 = u64 [s1 + 0x178]\n  8006: a1 = a1 | a3\n  8009: a4 = u64 [s1 + 0x70]\n  8012: a5 = a4\n  8014: a5 = 0 if a1 != 0\n  8016: ra = 0 if a1 != 0\n  8018: t2 = 0 if a1 != 0\n  8020: u64 [s1 + 0x38] = t0\n  8023: t0 = 0 if a1 != 0\n  8025: jump @308 if a1 != 0\n      : @272 (gas: 6)\n  8029: a1 = u64 [s1 + 0x158]\n  8033: a1 = a1 ^ 0xff\n  8037: a1 = a1 | t1\n  8040: a3 = a2 | a0\n  8043: a1 = a1 | a3\n  8046: jump @308 if a1 == 0\n      : @273 (gas: 19)\n  8050: a5 = u64 [s1 + 0x158]\n  8054: a3 = a5 + 0x1\n  8057: u64 [s1 + 0x178] = a3\n  8061: a1 = a3 <u 0x1\n  8064: a1 = a1 + a2\n  8067: u64 [s1 + 0x170] = a1\n  8071: a1 = a1 | a3\n  8074: a1 = a1 <u 0x1\n  8077: a1 = a1 + t1\n  8080: u64 [s1 + 0x160] = a1\n  8084: a1 = a1 <u t1\n  8087: a0 = a0 + a1\n  8090: u64 [s1 + 0x168] = a0\n  8094: a1 = 0xff - a5\n  8098: u64 [s1 + 0x148] = a1\n  8102: a2 = 0x80 - a1\n  8106: a0 = u64 [s1 + 0x38]\n  8109: a1 = u64 [s1 + 0x48]\n  8112: ra = 242, jump @669\n      : @274 [@dyn 121] (gas: 6)\n  8118: u64 [s1 + 0x150] = a0\n  8122: u64 [s1 + 0x138] = a1\n  8126: a0 = u64 [s1 + 0x40]\n  8129: a1 = u64 [s1 + 0x70]\n  8132: a2 = u64 [s1 + 0x148]\n  8136: ra = 244, jump @674\n      : @275 [@dyn 122] (gas: 9)\n  8142: u64 [s1 + 0x140] = a0\n  8146: a0 = u64 [s1 + 0x138]\n  8150: a0 = a0 | a1\n  8153: u64 [s1 + 0x138] = a0\n  8157: a1 = u64 [s1 + 0x158]\n  8161: a2 = 0x7f - a1\n  8164: a0 = u64 [s1 + 0x38]\n  8167: a1 = u64 [s1 + 0x48]\n  8170: ra = 246, jump @674\n      : @276 [@dyn 123] (gas: 18)\n  8176: a2 = u64 [s1 + 0x148]\n  8180: a4 = a2 <u 0x80\n  8184: u64 [s1 + 0x158] = a4\n  8188: a3 = u64 [s1 + 0x138]\n  8192: a1 = a3 if a4 != 0\n  8195: a3 = u64 [s1 + 0x70]\n  8198: a1 = a3 if a2 == 0\n  8201: u64 [s1 + 0x118] = a1\n  8205: a1 = u64 [s1 + 0x150]\n  8209: a3 = u64 [s1 + 0x140]\n  8213: a1 = a1 | a3\n  8216: a1 = a0 if a4 == 0\n  8219: a0 = u64 [s1 + 0x40]\n  8222: a1 = a0 if a2 == 0\n  8225: u64 [s1 + 0x150] = a1\n  8229: a0 = u64 [s1 + 0x38]\n  8232: a1 = u64 [s1 + 0x48]\n  8235: ra = 248, jump @674\n      : @277 [@dyn 124] (gas: 14)\n  8241: a5 = s1 + 0x100\n  8245: a2 = u64 [a5 + 0x70]\n  8248: a3 = u64 [a5 + 0x68]\n  8251: a2 = a2 | a3\n  8254: a3 = u64 [a5 + 0x78]\n  8257: a4 = u64 [a5 + 0x60]\n  8260: a3 = a3 | a4\n  8263: a2 = a2 | a3\n  8266: a3 = u64 [a5 + 0x58]\n  8269: a1 = 0 if a3 == 0\n  8271: u64 [a5 + 0x48] = a1\n  8274: a0 = 0 if a3 == 0\n  8276: u64 [a5 + 0x58] = a0\n  8279: jump @301 if a2 != 0\n      : @278 (gas: 4)\n  8283: a5 = 0\n  8285: u64 [s1 + 264] = 0\n  8289: ra = u64 [s1 + 0x118]\n  8293: jump @307\n      : @279 (gas: 4)\n  8296: a0 = s1 + 0x7ff\n  8300: a0 = a0 + 0x441\n  8304: a1 = 0x40\n  8307: ra = 250, jump @7\n      : @280 [@dyn 125] (gas: 15)\n  8313: a0 = s1 + 0x7ff\n  8317: a0 = a0 + 0xf9\n  8321: a2 = a0 + 0x300\n  8325: a1 = u64 [a2 + 0x60]\n  8328: u64 [s1 + 0x170] = a1\n  8332: a1 = u64 [a2 + 0x58]\n  8335: u64 [s1 + 0x168] = a1\n  8339: a1 = u64 [a2 + 0x50]\n  8342: u64 [s1 + 0x160] = a1\n  8346: a0 = u64 [a2 + 0x48]\n  8349: u64 [s1 + 0x178] = a0\n  8353: ra = 0xfc\n  8357: ecalli 12 // 'return_data_size'\n  8359: t0 = 0xfe\n  8363: jump @646\n      : @281 [@dyn 126] (gas: 1)\n  8366: t0 = 254, jump @646\n      : @282 [@dyn 127] (gas: 1)\n  8372: jump @187 if a1 != 0\n      : @283 (gas: 3)\n  8376: a2 = a0\n  8378: a0 = a0 >> 0x20\n  8381: jump @187 if a0 != 0\n      : @284 (gas: 6)\n  8385: i32 a0 = a2 + 0\n  8387: u64 [s1 + 0x170] = a0\n  8391: a0 = u64 [s1 + 0x178]\n  8395: a1 = a2\n  8397: u64 [s1 + 0x168] = a2\n  8401: ra = 256, jump @16\n      : @285 [@dyn 128] (gas: 11)\n  8407: a1 = s1 + 0x10f8\n  8411: a2 = u64 [s1 + 0x168]\n  8415: u32 [a1 + 0x2c8] = a2\n  8419: i32 a0 = a0 + 0\n  8421: a1 = s1 + 0x1000\n  8425: i32 a1 = a1 + 0x3c0\n  8429: a2 = 0\n  8431: ecalli 11 // 'return_data_copy'\n  8433: a0 = s1 + 0x10f8\n  8437: a0 = i32 [a0 + 0x2c8]\n  8441: jump @242\n      : @286 (gas: 4)\n  8444: a0 = s1 + 0x7ff\n  8448: a0 = a0 + 0x3c1\n  8452: a1 = 0x40\n  8455: ra = 258, jump @7\n      : @287 [@dyn 129] (gas: 20)\n  8461: a2 = s1 + 0x7ff\n  8465: a2 = a2 + 0xf9\n  8469: a5 = a2 + 0x200\n  8473: a3 = u64 [a5 + 0xe0]\n  8477: a4 = u64 [a5 + 0xd8]\n  8481: a0 = u64 [a5 + 0xd0]\n  8485: a1 = u64 [a5 + 0xc8]\n  8489: a5 = s1 + 0x100\n  8493: u64 [a5 + 0x70] = a0\n  8496: u64 [a5 + 0x68] = a3\n  8499: a0 = a0 | a3\n  8502: u64 [a5 + 0x78] = a1\n  8505: a1 = a1 | a4\n  8508: a1 = a1 | a0\n  8511: a1 = a1 >> 0x20\n  8514: u64 [a5 + 0x60] = a4\n  8517: a0 = a0 | a4\n  8520: a0 = a0 << 0x20\n  8523: a0 = a0 | a1\n  8526: jump @187 if a0 != 0\n      : @288 (gas: 7)\n  8530: u64 [a2 + 696] = 0\n  8534: u64 [a2 + 688] = 0\n  8538: u64 [a2 + 680] = 0\n  8542: t0 = 0x104\n  8546: a0 = 0x8c379a000000000\n  8556: a1 = s1 + 0x7ff\n  8560: fallthrough\n      : @289 [@dyn 130] (gas: 4)\n  8561: a1 = a1 + 0x3a1\n  8565: u64 [a2 + 0x2c0] = a0\n  8569: a0 = u64 [s1 + 0x178]\n  8573: ra = 262, jump @9\n      : @290 [@dyn 131] (gas: 1)\n  8579: t0 = 264, jump @645\n      : @291 [@dyn 132] (gas: 1)\n  8585: jump @187 if a0 == 0\n      : @292 (gas: 1)\n  8589: t0 = 266, jump @668\n      : @293 [@dyn 133] (gas: 7)\n  8595: u64 [a2 + 672] = 0\n  8599: u64 [a2 + 664] = 0\n  8603: u64 [a2 + 648] = 0x20\n  8608: a1 = s1 + 0x7ff\n  8612: a1 = a1 + 0x381\n  8616: u64 [a2 + 656] = 0\n  8620: ra = 268, jump @9\n      : @294 [@dyn 134] (gas: 4)\n  8626: a2 = s1 + 0x100\n  8630: a0 = u64 [a2 + 0x60]\n  8633: a0 = a0 + 0xffffffffffffffdc\n  8636: t0 = 270, jump @647\n      : @295 [@dyn 135] (gas: 1)\n  8642: jump @187 if a0 == 0\n      : @296 (gas: 1)\n  8646: t0 = 272, jump @661\n      : @297 [@dyn 136] (gas: 7)\n  8652: u64 [a2 + 640] = 0\n  8656: u64 [a2 + 632] = 0\n  8660: u64 [a2 + 616] = 0x9\n  8665: a1 = s1 + 0x7ff\n  8669: a1 = a1 + 0x361\n  8673: u64 [a2 + 624] = 0\n  8677: ra = 274, jump @9\n      : @298 [@dyn 137] (gas: 3)\n  8683: a0 = 0xffffffbc\n  8693: a2 = s1 + 0x100\n  8697: t0 = 276, jump @647\n      : @299 [@dyn 138] (gas: 1)\n  8703: jump @187 if a0 == 0\n      : @300 (gas: 14)\n  8707: a0 = u64 [s1 + 0x178]\n  8711: i32 a0 = a0 + 0x44\n  8714: a1 = u64 [0x20040]\n  8719: a2 = s1 + 0x7ff\n  8723: a2 = a2 + 0xf9\n  8727: u64 [a2 + 592] = 0\n  8731: u64 [a2 + 0x260] = a1\n  8735: a1 = 0x6500000000000000\n  8745: u64 [a2 + 0x258] = a1\n  8749: a1 = s1 + 0x7ff\n  8753: a1 = a1 + 0x341\n  8757: u64 [a2 + 584] = 0\n  8761: ra = 0xb2\n  8765: jump @9\n      : @301 (gas: 6)\n  8768: u64 [s1 + 256] = 0x2710\n  8774: a0 = u64 [s1 + 0x178]\n  8778: a2 = a0 + 0xffffffffffffff80\n  8781: a0 = u64 [s1 + 0x40]\n  8784: a1 = u64 [s1 + 0x70]\n  8787: ra = 278, jump @669\n      : @302 [@dyn 139] (gas: 6)\n  8793: u64 [s1 + 0x138] = a0\n  8797: u64 [s1 + 0x140] = a1\n  8801: a0 = u64 [s1 + 0x38]\n  8804: a1 = u64 [s1 + 0x48]\n  8807: a2 = u64 [s1 + 0x178]\n  8811: ra = 280, jump @669\n      : @303 [@dyn 140] (gas: 7)\n  8817: u64 [s1 + 0x130] = a0\n  8821: u64 [s1 + 0x128] = a1\n  8825: a1 = u64 [s1 + 0x178]\n  8829: a2 = 0x80 - a1\n  8833: a0 = u64 [s1 + 0x40]\n  8836: a1 = u64 [s1 + 0x70]\n  8839: ra = 282, jump @674\n      : @304 [@dyn 141] (gas: 20)\n  8845: a2 = u64 [s1 + 0x128]\n  8849: a1 = a1 | a2\n  8852: a2 = u64 [s1 + 0x178]\n  8856: a3 = a2 <u 0x80\n  8860: u64 [s1 + 0x120] = a3\n  8864: a4 = u64 [s1 + 0x140]\n  8868: a1 = a4 if a3 == 0\n  8871: a4 = u64 [s1 + 0x48]\n  8874: a1 = a4 if a2 == 0\n  8877: u64 [s1 + 0x140] = a1\n  8881: a1 = u64 [s1 + 0x130]\n  8885: a0 = a0 | a1\n  8888: a1 = u64 [s1 + 0x138]\n  8892: a0 = a1 if a3 == 0\n  8895: a1 = u64 [s1 + 0x38]\n  8898: a0 = a1 if a2 == 0\n  8901: u64 [s1 + 0x138] = a0\n  8905: a0 = u64 [s1 + 0x40]\n  8908: a1 = u64 [s1 + 0x70]\n  8911: ra = 284, jump @669\n      : @305 [@dyn 142] (gas: 16)\n  8917: a5 = 0\n  8919: u64 [s1 + 296] = 0\n  8923: a3 = s1 + 0x100\n  8927: a2 = u64 [a3 + 0x20]\n  8930: a1 = 0 if a2 == 0\n  8932: u64 [a3 + 0x30] = a1\n  8935: a0 = 0 if a2 == 0\n  8937: u64 [a3 + 0x20] = a0\n  8940: a1 = u64 [a3]\n  8942: a2 = a1 + 0xffffffffffffffff\n  8945: u64 [s1 + 0xf8] = a2\n  8949: a2 = a1 >u 0\n  8951: a2 = a2 + 0xffffffffffffffff\n  8954: u64 [s1 + 0xf0] = a2\n  8958: ra = u64 [s1 + 0x118]\n  8962: fallthrough\n      : @306 (gas: 93)\n  8963: u64 [s1 + 0x110] = a5\n  8967: u64 [s1 + 264] = 0\n  8971: a1 = u64 [s1 + 0x138]\n  8975: a2 = a1 >> 0x3f\n  8978: a5 = u64 [s1 + 0x140]\n  8982: a3 = a5 << 0x1\n  8985: t1 = a3 | a2\n  8988: a2 = a1 << 0x1\n  8991: a4 = ra >> 0x3f\n  8994: a4 = a4 | a2\n  8997: u64 [s1 + 0x118] = a4\n  9001: a3 = u64 [s1 + 0xf0]\n  9005: a0 = a3 ^ t1\n  9008: t2 = u64 [s1 + 0x148]\n  9012: a1 = a3 <u t1\n  9015: a2 = u64 [s1 + 0xf8]\n  9019: t0 = a2 <u a4\n  9022: t0 = a1 if a0 != 0\n  9025: a1 = u64 [s1 + 0x130]\n  9029: a1 = a1 << 0x1\n  9032: a0 = u64 [s1 + 0x120]\n  9036: a4 = a0 >> 0x3f\n  9039: a1 = a1 | a4\n  9042: u64 [s1 + 0x130] = a1\n  9046: a4 = a5 >> 0x3f\n  9049: a0 = a0 << 0x1\n  9052: a4 = a4 | a0\n  9055: a0 = ra << 0x1\n  9058: a1 = u64 [s1 + 0x150]\n  9062: a5 = a1 >> 0x3f\n  9065: a2 = a0 | a5\n  9068: a5 = a1 << 0x1\n  9071: a1 = t2 >> 0x3f\n  9074: a1 = a1 | a5\n  9077: a5 = t2 << 0x1\n  9080: a0 = u64 [s1 + 0x158]\n  9084: ra = a0 >> 0x3f\n  9087: t2 = a5 | ra\n  9090: a0 = a0 << 0x1\n  9093: a5 = u64 [s1 + 0x110]\n  9097: a0 = a0 | a5\n  9100: u64 [s1 + 0x158] = a0\n  9104: a5 = u64 [s1 + 0x128]\n  9108: a0 = a5 | t2\n  9111: u64 [s1 + 0x148] = a0\n  9115: a0 = a5 | a1\n  9118: u64 [s1 + 0x150] = a0\n  9122: ra = a5 | a2\n  9125: a0 = a3 - a4\n  9128: a0 = a0 <u t0\n  9131: a1 = a3 <u a4\n  9134: t2 = u64 [s1 + 0x130]\n  9138: a5 = a3 - t2\n  9141: a5 = a5 - a1\n  9144: a5 = a5 - a0\n  9147: t0 = a5 >>a 0x3f\n  9150: a0 = u64 [s1 + 0x100]\n  9154: a0 = t0 & a0\n  9157: a2 = u64 [s1 + 0x118]\n  9161: a1 = a2 - a0\n  9164: u64 [s1 + 0x138] = a1\n  9168: a1 = a2 <u a0\n  9171: a0 = t1 - a1\n  9174: u64 [s1 + 0x140] = a0\n  9178: a1 = 0 if t1 != 0\n  9180: a0 = a4 - a1\n  9183: u64 [s1 + 0x120] = a0\n  9187: a1 = a4 <u a1\n  9190: a1 = t2 - a1\n  9193: a0 = s1 + 0x100\n  9197: u64 [a0 + 0x30] = a1\n  9200: a3 = u64 [a0 + 0x78]\n  9203: a1 = u64 [a0 + 0x70]\n  9206: a2 = a3 | a1\n  9209: a2 = a2 <u 0x1\n  9212: a4 = u64 [a0 + 0x60]\n  9215: a5 = a4 <u a2\n  9218: a4 = a4 - a2\n  9221: a2 = a3 <u 0x1\n  9224: a1 = a1 - a2\n  9227: a2 = u64 [a0 + 0x68]\n  9230: a2 = a2 - a5\n  9233: a3 = a3 + 0xffffffffffffffff\n  9236: u64 [a0 + 0x70] = a1\n  9239: u64 [a0 + 0x68] = a2\n  9242: a2 = a2 | a1\n  9245: u64 [a0 + 0x78] = a3\n  9248: a3 = a3 | a4\n  9251: a2 = a2 | a3\n  9254: a5 = t0 & 0x1\n  9257: u64 [a0 + 0x60] = a4\n  9260: u64 [s1 + 296] = 0\n  9264: jump @306 if a2 != 0\n      : @307 (gas: 20)\n  9268: a2 = u64 [s1 + 0x150]\n  9272: a0 = a2 >> 0x3f\n  9275: a1 = ra << 0x1\n  9278: a0 = a0 | a1\n  9281: a3 = u64 [s1 + 0x148]\n  9285: a1 = a3 >> 0x3f\n  9288: a2 = a2 << 0x1\n  9291: a1 = a1 | a2\n  9294: a4 = u64 [s1 + 0x158]\n  9298: a2 = a4 >> 0x3f\n  9301: a3 = a3 << 0x1\n  9304: a4 = a4 << 0x1\n  9307: t0 = a5 | a4\n  9310: a5 = u64 [s1 + 0x108]\n  9314: a2 = a2 | a5\n  9317: t2 = a2 | a3\n  9320: ra = a5 | a1\n  9323: a5 = a5 | a0\n  9326: a4 = u64 [s1 + 0x70]\n  9329: fallthrough\n      : @308 (gas: 19)\n  9330: u64 [s1 + 0x160] = ra\n  9334: u64 [s1 + 0x168] = a5\n  9338: u64 [s1 + 0x170] = t2\n  9342: u64 [s1 + 0x178] = t0\n  9346: a2 = u64 [s1 + 0x48]\n  9349: a0 = a2 >> 0x4\n  9352: a3 = u64 [s1 + 0x40]\n  9355: a1 = a3 << 0x3c\n  9358: a0 = a0 | a1\n  9361: a1 = u64 [s1 + 0x38]\n  9364: a1 = a1 >> 0x4\n  9367: a2 = a2 << 0x3c\n  9370: a1 = a1 | a2\n  9373: a1 = a1 <u 0x271\n  9377: a1 = 0 if a0 != 0\n  9379: a0 = a3 >> 0x4\n  9382: a0 = a0 | a4\n  9385: a1 = 0 if a0 != 0\n  9387: jump @314 if a1 != 0\n      : @309 (gas: 10)\n  9391: a1 = 0xffffffff\n  9401: a2 = u64 [s1 + 0x20]\n  9404: a2 = a2 & 0xffffffffffffffff\n  9407: a3 = u64 [s1 + 0x28]\n  9410: a0 = a3 & 0xffffffffffffffff\n  9413: a3 = u64 [s1 + 0x30]\n  9416: a1 = a1 & a3\n  9419: a0 = a0 | a2\n  9422: a0 = a0 | a1\n  9425: jump @314 if a0 == 0\n      : @310 (gas: 3)\n  9429: ra = 0x11e\n  9433: ecalli 10 // 'ref_time_left'\n  9435: fallthrough\n      : @311 [@dyn 143] (gas: 12)\n  9436: a1 = u64 [s1 + 0x28]\n  9439: a1 = reverse a1\n  9441: a2 = a1 << 0x20\n  9444: a3 = u64 [s1 + 0x30]\n  9447: a3 = reverse a3\n  9449: a3 = a3 >> 0x20\n  9452: a2 = a2 | a3\n  9455: a3 = u64 [s1 + 0x20]\n  9458: a3 = reverse a3\n  9460: a4 = a3 << 0x20\n  9463: a1 = a1 >> 0x20\n  9466: t0 = 288, jump @663\n      : @312 [@dyn 144] (gas: 38)\n  9472: a1 = u64 [s1 + 0x170]\n  9476: a3 = a2 + 0x300\n  9480: u64 [a3 + 0x30] = a1\n  9483: a1 = u64 [s1 + 0x178]\n  9487: u64 [a3 + 0x28] = a1\n  9490: a1 = u64 [s1 + 0x160]\n  9494: u64 [a3 + 0x38] = a1\n  9497: a1 = u64 [s1 + 0x168]\n  9501: u64 [a3 + 0x40] = a1\n  9504: u32 [a2 + 840] = 0\n  9508: a0 = a0 >u 0x8fc\n  9512: a1 = -a0\n  9514: u64 [a3 + 0x80] = a1\n  9518: u64 [a3 + 0x78] = a1\n  9521: u64 [a3 + 0x70] = a1\n  9524: u64 [a3 + 0x68] = a1\n  9527: a0 = a0 << 0x23\n  9530: a1 = u64 [s1 + 0x78]\n  9533: a0 = a0 | a1\n  9536: a1 = s1 + 0x1420\n  9540: a1 = a1 << 0x20\n  9543: a1 = a1 >> 0x20\n  9546: a2 = s1 + 0x1460\n  9550: a2 = a2 << 0x20\n  9553: a3 = a2 | a1\n  9556: a4 = u64 [s1 + 0xb8]\n  9560: a4 = a4 << 0x20\n  9563: a4 = a4 >> 0x20\n  9566: a1 = s1 + 0x1440\n  9570: a1 = a1 << 0x20\n  9573: a5 = a1 | a4\n  9576: a1 = 0xffffffffffffffff\n  9579: a2 = 0xffffffffffffffff\n  9582: ecalli 0 // 'call'\n  9583: u64 [s1 + 0x158] = a0\n  9587: a0 = s1 + 0x7ff\n  9591: a0 = a0 + 0x2c1\n  9595: ra = 290, jump @544\n      : @313 [@dyn 145] (gas: 2)\n  9601: a0 = u64 [s1 + 0x158]\n  9605: jump @397 if a0 != 0\n      : @314 (gas: 22)\n  9609: a0 = u64 [s1 + 0x68]\n  9612: a1 = u64 [s1 + 0x178]\n  9616: a0 = a0 <u a1\n  9619: ra = u64 [s1 + 0x50]\n  9622: t0 = u64 [s1 + 0x170]\n  9626: a2 = ra ^ t0\n  9629: a1 = ra <u t0\n  9632: u64 [s1 + 0x158] = a0\n  9636: a1 = a0 if a2 == 0\n  9639: a0 = u64 [s1 + 0x58]\n  9642: t2 = u64 [s1 + 0x160]\n  9646: a5 = a0 <u t2\n  9649: a2 = u64 [s1 + 0x60]\n  9652: t1 = u64 [s1 + 0x168]\n  9656: a3 = a2 ^ t1\n  9659: a4 = a2 <u t1\n  9662: u64 [s1 + 0x150] = a5\n  9666: a4 = a5 if a3 == 0\n  9669: a5 = a0 ^ t2\n  9672: a3 = a3 | a5\n  9675: a4 = a1 if a3 == 0\n  9678: jump @316 if a4 == 0\n      : @315 (gas: 1)\n  9681: jump @506\n      : @316 (gas: 21)\n  9684: a3 = a0 - t2\n  9687: a4 = a2 - t1\n  9690: a0 = u64 [s1 + 0x150]\n  9694: a4 = a4 - a0\n  9697: a2 = a3 <u a1\n  9700: a4 = a4 - a2\n  9703: u64 [s1 + 0x168] = a4\n  9707: a3 = a3 - a1\n  9710: u64 [s1 + 0x160] = a3\n  9714: a1 = ra - t0\n  9717: a0 = u64 [s1 + 0x158]\n  9721: a0 = a1 - a0\n  9724: u64 [s1 + 0x170] = a0\n  9728: a0 = u64 [s1 + 0x68]\n  9731: a1 = u64 [s1 + 0x178]\n  9735: a0 = a0 - a1\n  9738: u64 [s1 + 0x178] = a0\n  9742: a0 = s1 + 0x7ff\n  9746: a0 = a0 + 0x201\n  9750: a1 = u64 [s1 + 0xc0]\n  9754: ra = 292, jump @7\n      : @317 [@dyn 146] (gas: 12)\n  9760: a0 = s1 + 0x7ff\n  9764: a0 = a0 + 0xf9\n  9768: a2 = a0 + 0x100\n  9772: a1 = u64 [a2 + 0x8]\n  9775: u64 [s1 + 0x158] = a1\n  9779: a1 = u64 [a2 + 0x18]\n  9782: u64 [s1 + 0x150] = a1\n  9786: a0 = u64 [a2 + 0x10]\n  9789: u64 [s1 + 0x148] = a0\n  9793: ra = 0x126\n  9797: ecalli 10 // 'ref_time_left'\n  9799: fallthrough\n      : @318 [@dyn 147] (gas: 12)\n  9800: a1 = u64 [s1 + 0x148]\n  9804: a1 = reverse a1\n  9806: a2 = a1 << 0x20\n  9809: a3 = u64 [s1 + 0x150]\n  9813: a3 = reverse a3\n  9815: a3 = a3 >> 0x20\n  9818: a2 = a2 | a3\n  9821: a1 = a1 >> 0x20\n  9824: a3 = u64 [s1 + 0x158]\n  9828: a3 = reverse a3\n  9830: a4 = a3 << 0x20\n  9833: t0 = 296, jump @663\n      : @319 [@dyn 148] (gas: 38)\n  9839: a1 = u64 [s1 + 0x160]\n  9843: a3 = a2 + 0x300\n  9847: u64 [a3 + 0x98] = a1\n  9851: a1 = u64 [s1 + 0x170]\n  9855: u64 [a3 + 0x90] = a1\n  9859: a1 = u64 [s1 + 0x178]\n  9863: u64 [a3 + 0x88] = a1\n  9867: a1 = u64 [s1 + 0x168]\n  9871: u64 [a3 + 0xa0] = a1\n  9875: u32 [a2 + 936] = 0\n  9879: a0 = a0 >u 0x8fc\n  9883: a1 = -a0\n  9885: u64 [a3 + 0xe0] = a1\n  9889: u64 [a3 + 0xd8] = a1\n  9893: u64 [a3 + 0xd0] = a1\n  9897: u64 [a3 + 0xc8] = a1\n  9901: a0 = a0 << 0x23\n  9904: a1 = u64 [s1 + 0x78]\n  9907: a0 = a0 | a1\n  9910: a1 = s1 + 0x1480\n  9914: a1 = a1 << 0x20\n  9917: a1 = a1 >> 0x20\n  9920: a2 = s1 + 0x14c0\n  9924: a2 = a2 << 0x20\n  9927: a3 = a2 | a1\n  9930: a4 = u64 [s1 + 0xb8]\n  9934: a4 = a4 << 0x20\n  9937: a4 = a4 >> 0x20\n  9940: a1 = s1 + 0x14a0\n  9944: a1 = a1 << 0x20\n  9947: a5 = a1 | a4\n  9950: a1 = 0xffffffffffffffff\n  9953: a2 = 0xffffffffffffffff\n  9956: ecalli 0 // 'call'\n  9957: u64 [s1 + 0x178] = a0\n  9961: a0 = s1 + 0x7ff\n  9965: a0 = a0 + 0x1e1\n  9969: ra = 298, jump @544\n      : @320 [@dyn 149] (gas: 2)\n  9975: a0 = u64 [s1 + 0x178]\n  9979: jump @377 if a0 != 0\n      : @321 (gas: 11)\n  9983: a0 = u64 [s1 + 0x88]\n  9987: a1 = u64 [s1 + 0xa0]\n  9991: u32 [a1 + 0x10] = a0\n  9994: a0 = u64 [s1 + 0x80]\n  9998: u64 [a1 + 0x8] = a0\n 10001: a0 = u64 [s1 + 0x90]\n 10005: u64 [a1] = a0\n 10007: i32 a0 = a1 + 0\n 10009: u64 [s1 + 0x168] = a0\n 10013: ecalli 5 // 'code_size'\n 10015: fallthrough\n      : @322 (gas: 1)\n 10016: jump @324 if a0 != 0\n      : @323 (gas: 1)\n 10019: jump @497\n      : @324 (gas: 4)\n 10022: a0 = s1 + 0x7ff\n 10026: a0 = a0 + 0x121\n 10030: a1 = 0x40\n 10033: ra = 300, jump @7\n      : @325 [@dyn 150] (gas: 19)\n 10039: a0 = s1 + 0x7ff\n 10043: a0 = a0 + 0xf9\n 10047: a1 = u64 [a0 + 0x40]\n 10050: a2 = u64 [a0 + 0x38]\n 10053: a3 = u64 [a0 + 0x30]\n 10056: a4 = u64 [a0 + 0x28]\n 10059: a5 = s1 + 0x100\n 10063: u64 [a5 + 0x60] = a1\n 10066: u64 [a5 + 0x70] = a3\n 10069: a0 = a3 | a1\n 10072: u64 [a5 + 0x78] = a4\n 10075: a1 = a4 | a2\n 10078: a1 = a1 | a0\n 10081: a1 = a1 >> 0x20\n 10084: u64 [a5 + 0x58] = a2\n 10087: a0 = a0 | a2\n 10090: a0 = a0 << 0x20\n 10093: a0 = a0 | a1\n 10096: jump @327 if a0 == 0\n      : @326 (gas: 1)\n 10099: jump @187\n      : @327 (gas: 11)\n 10102: a2 = s1 + 0x7ff\n 10106: a2 = a2 + 0xf9\n 10110: u64 [a2 + 24] = 0\n 10113: u64 [a2 + 16] = 0\n 10116: u64 [a2 + 8] = 0\n 10119: a0 = 0x2ccb1b3000000000\n 10129: a1 = s1 + 0x7ff\n 10133: a1 = a1 + 0x101\n 10137: u64 [a2 + 0x20] = a0\n 10140: a0 = u64 [s1 + 0x178]\n 10144: ra = 302, jump @9\n      : @328 [@dyn 151] (gas: 3)\n 10150: a0 = u64 [s1 + 0x168]\n 10154: ecalli 4 // 'caller'\n 10156: fallthrough\n      : @329 (gas: 14)\n 10157: a3 = s1 + 0x100\n 10161: a0 = u64 [a3 + 0x60]\n 10164: a1 = u64 [a3 + 0x58]\n 10167: a2 = a1 | a0\n 10170: a0 = 0x100000000\n 10180: u64 [a3 + 0x48] = a0\n 10183: a0 = 0xfffffffc\n 10193: a1 = u64 [a3 + 0x78]\n 10196: a0 = a1 <u a0\n 10199: a1 = u64 [a3 + 0x70]\n 10202: a0 = 0 if a1 != 0\n 10204: u64 [a3 + 0x50] = a2\n 10207: a0 = 0 if a2 != 0\n 10209: jump @331 if a0 != 0\n      : @330 (gas: 1)\n 10212: jump @187\n      : @331 (gas: 27)\n 10215: a2 = u64 [s1 + 0xa0]\n 10219: a0 = u64 [a2 + 0x8]\n 10222: a1 = i32 [a2 + 0x10]\n 10225: a2 = u64 [a2]\n 10227: a0 = reverse a0\n 10229: a3 = a0 << 0x20\n 10232: a1 = reverse a1\n 10234: a1 = a1 >> 0x20\n 10237: a3 = a3 | a1\n 10240: a0 = a0 >> 0x20\n 10243: a1 = reverse a2\n 10245: a2 = a1 << 0x20\n 10248: a2 = a2 | a0\n 10251: a1 = a1 >> 0x20\n 10254: a0 = u64 [s1 + 0x178]\n 10258: i32 a0 = a0 + 0x4\n 10261: a4 = s1 + 0x7ff\n 10265: a4 = a4 + 0xf9\n 10269: u64 [a4 + 0] = 0\n 10271: u64 [a4 + 0xfffffffffffffff8] = a1\n 10274: a1 = s1 + 0x1000\n 10278: u64 [a1 + 0xfffffffffffff8e8] = a2\n 10282: a1 = s1 + 0x7ff\n 10286: a1 = a1 + 0xe1\n 10290: a2 = s1 + 0x1000\n 10294: u64 [a2 + 0xfffffffffffff8e0] = a3\n 10298: ra = 304, jump @9\n      : @332 [@dyn 152] (gas: 10)\n 10304: a2 = s1 + 0x100\n 10308: a0 = u64 [a2 + 0x48]\n 10311: a0 = a0 + 0xffffffffffffffdc\n 10314: a1 = u64 [a2 + 0x78]\n 10317: a0 = a1 <u a0\n 10320: a1 = u64 [a2 + 0x70]\n 10323: a0 = 0 if a1 != 0\n 10325: a1 = u64 [a2 + 0x50]\n 10328: a0 = 0 if a1 != 0\n 10330: jump @334 if a0 != 0\n      : @333 (gas: 1)\n 10333: jump @187\n      : @334 (gas: 17)\n 10336: a0 = u64 [s1 + 0x178]\n 10340: i32 a0 = a0 + 0x24\n 10343: a1 = u64 [s1 + 0xe0]\n 10347: a2 = s1 + 0x1000\n 10351: u64 [a2 + 0xfffffffffffff8c0] = a1\n 10355: a1 = u64 [s1 + 0xd8]\n 10359: a2 = s1 + 0x1000\n 10363: u64 [a2 + 0xfffffffffffff8c8] = a1\n 10367: a1 = u64 [s1 + 0xd0]\n 10371: a2 = s1 + 0x1000\n 10375: u64 [a2 + 0xfffffffffffff8d0] = a1\n 10379: a1 = s1 + 0x7ff\n 10383: a1 = a1 + 0xc1\n 10387: a2 = u64 [s1 + 0xc8]\n 10391: a3 = s1 + 0x1000\n 10395: u64 [a3 + 0xfffffffffffff8d8] = a2\n 10399: ra = 306, jump @9\n      : @335 [@dyn 153] (gas: 4)\n 10405: ra = 0x134\n 10409: ecalli 10 // 'ref_time_left'\n 10411: t0 = 0x136\n 10415: jump @651\n      : @336 [@dyn 154] (gas: 1)\n 10418: t0 = 310, jump @651\n      : @337 [@dyn 155] (gas: 7)\n 10424: u64 [a0 + 1024] = 0\n 10428: u64 [a0 + 1016] = 0\n 10432: u64 [a0 + 1008] = 0\n 10436: u64 [a0 + 1000] = 0\n 10440: a1 = 0x44\n 10443: a0 = u64 [s1 + 0x178]\n 10447: ra = 312, jump @16\n      : @338 [@dyn 156] (gas: 4)\n 10453: u64 [s1 + 0x150] = a0\n 10457: a0 = u64 [s1 + 0x178]\n 10461: a1 = 0\n 10463: ra = 314, jump @16\n      : @339 [@dyn 157] (gas: 32)\n 10469: a2 = s1 + 0x10f8\n 10473: u32 [a2 + 1032] = 0\n 10477: a3 = a2 + 0x400\n 10481: u64 [a3 + 64] = 0xffffffffffffffff\n 10485: u64 [a3 + 56] = 0xffffffffffffffff\n 10489: u64 [a3 + 48] = 0xffffffffffffffff\n 10493: u64 [a3 + 40] = 0xffffffffffffffff\n 10497: a1 = 0x800000000\n 10507: a2 = u64 [s1 + 0x78]\n 10510: t0 = a2 | a1\n 10513: a1 = s1 + 0x14e0\n 10517: a1 = a1 << 0x20\n 10520: a1 = a1 >> 0x20\n 10523: a2 = s1 + 0x1520\n 10527: a2 = a2 << 0x20\n 10530: a3 = a2 | a1\n 10533: a1 = u64 [s1 + 0x150]\n 10537: a1 = a1 << 0x20\n 10540: a1 = a1 >> 0x20\n 10543: a2 = 0x4400000000\n 10553: a4 = a1 | a2\n 10556: a0 = a0 << 0x20\n 10559: a0 = a0 >> 0x20\n 10562: a1 = s1 + 0x1500\n 10566: a1 = a1 << 0x20\n 10569: a5 = a1 | a0\n 10572: a1 = 0xffffffffffffffff\n 10575: a2 = 0xffffffffffffffff\n 10578: u64 [s1 + 0x150] = t0\n 10582: a0 = t0\n 10584: ecalli 0 // 'call'\n 10585: fallthrough\n      : @340 (gas: 1)\n 10586: jump @417 if a0 != 0\n      : @341 (gas: 25)\n 10590: a0 = s1 + 0x1000\n 10594: u64 [a0 + 4294965368] = 0\n 10598: a0 = s1 + 0x1000\n 10602: u64 [a0 + 4294965360] = 0\n 10606: a0 = s1 + 0x1000\n 10610: u64 [a0 + 4294965352] = 0\n 10614: a0 = s1 + 0x1000\n 10618: u64 [a0 + 4294965344] = 0\n 10622: a0 = u64 [s1 + 0x178]\n 10626: a1 = s1 + 0x1000\n 10630: u64 [a1 + 0xfffffffffffff880] = a0\n 10634: a0 = u64 [s1 + 0x170]\n 10638: a1 = s1 + 0x1000\n 10642: u64 [a1 + 0xfffffffffffff888] = a0\n 10646: a0 = u64 [s1 + 0x158]\n 10650: a1 = s1 + 0x1000\n 10654: u64 [a1 + 0xfffffffffffff890] = a0\n 10658: a0 = s1 + 0x7ff\n 10662: a0 = a0 + 0x81\n 10666: a1 = s1 + 0x7ff\n 10670: a1 = a1 + 0x61\n 10673: a2 = u64 [s1 + 0x160]\n 10677: a3 = s1 + 0x1000\n 10681: u64 [a3 + 0xfffffffffffff898] = a2\n 10685: ra = 316, jump @535\n      : @342 [@dyn 158] (gas: 21)\n 10691: a0 = u64 [s1 + 0xe8]\n 10695: u64 [a0 + 24] = 0\n 10698: u64 [a0 + 16] = 0\n 10701: u64 [a0 + 8] = 0\n 10704: u64 [a0 + 0] = 0\n 10706: a0 = u64 [s1 + 0xc8]\n 10710: a1 = s1 + 0x1000\n 10714: u64 [a1 + 0xfffffffffffff858] = a0\n 10718: a0 = u64 [s1 + 0xd0]\n 10722: a1 = s1 + 0x1000\n 10726: u64 [a1 + 0xfffffffffffff850] = a0\n 10730: a0 = u64 [s1 + 0xd8]\n 10734: a1 = s1 + 0x1000\n 10738: u64 [a1 + 0xfffffffffffff848] = a0\n 10742: a1 = s1 + 0x7ff\n 10746: a1 = a1 + 0x41\n 10749: a0 = u64 [s1 + 0xe0]\n 10753: a2 = s1 + 0x1000\n 10757: u64 [a2 + 0xfffffffffffff840] = a0\n 10761: a0 = 0\n 10763: ra = 318, jump @9\n      : @343 [@dyn 159] (gas: 12)\n 10769: a0 = s1 + 0x1000\n 10773: u64 [a0 + 4294965304] = 0\n 10777: a0 = s1 + 0x1000\n 10781: u64 [a0 + 4294965296] = 0\n 10785: a1 = s1 + 0x1000\n 10789: u64 [a1 + 4294965280] = 0x3\n 10794: a0 = 0x20\n 10797: a1 = s1 + 0x7ff\n 10801: a1 = a1 + 0x21\n 10804: a2 = s1 + 0x1000\n 10808: u64 [a2 + 4294965288] = 0\n 10812: ra = 320, jump @9\n      : @344 [@dyn 160] (gas: 3)\n 10818: a1 = 0x40\n 10821: a0 = 0\n 10823: ra = 322, jump @16\n      : @345 [@dyn 161] (gas: 1)\n 10829: t0 = 324, jump @664\n      : @346 [@dyn 162] (gas: 4)\n 10835: ra = 0x146\n 10839: ecalli 9 // 'hash_keccak_256'\n 10841: t0 = 0x148\n 10845: jump @652\n      : @347 [@dyn 163] (gas: 1)\n 10848: t0 = 328, jump @652\n      : @348 [@dyn 164] (gas: 8)\n 10854: a5 = a4 + 0x400\n 10858: u64 [a5 + 0x80] = a3\n 10862: u64 [a5 + 0x78] = a2\n 10865: u64 [a5 + 0x70] = a1\n 10868: u64 [a5 + 0x68] = a0\n 10871: a0 = s1 + 0x1560\n 10875: a1 = u64 [s1 + 0xe8]\n 10879: ra = 330, jump @12\n      : @349 [@dyn 165] (gas: 10)\n 10885: a0 = u64 [s1 + 0xa0]\n 10889: a1 = u64 [s1 + 0x80]\n 10893: u64 [a0 + 0x8] = a1\n 10896: a1 = u64 [s1 + 0x90]\n 10900: u64 [a0] = a1\n 10902: a1 = u64 [s1 + 0x88]\n 10906: u32 [a0 + 0x10] = a1\n 10909: a0 = u64 [s1 + 0x168]\n 10913: ecalli 5 // 'code_size'\n 10915: fallthrough\n      : @350 (gas: 1)\n 10916: jump @447 if a0 == 0\n      : @351 (gas: 4)\n 10920: a0 = s1 + 0x7ff\n 10924: a0 = a0 + 0x1\n 10927: a1 = 0x40\n 10930: ra = 332, jump @7\n      : @352 [@dyn 166] (gas: 21)\n 10936: a0 = s1 + 0x1000\n 10940: a0 = u64 [a0 + 0xfffffffffffff818]\n 10944: a1 = s1 + 0x1000\n 10948: a2 = u64 [a1 + 0xfffffffffffff810]\n 10952: a1 = s1 + 0x1000\n 10956: a1 = u64 [a1 + 0xfffffffffffff808]\n 10960: a3 = s1 + 0x1000\n 10964: a3 = u64 [a3 + 0xfffffffffffff800]\n 10968: a4 = s1 + 0x100\n 10972: u64 [a4 + 0x70] = a0\n 10975: u64 [a4 + 0x58] = a1\n 10978: a0 = a0 | a1\n 10981: u64 [a4 + 0x78] = a3\n 10984: a1 = a3 | a2\n 10987: a1 = a1 | a0\n 10990: a1 = a1 >> 0x20\n 10993: u64 [a4 + 0x60] = a2\n 10996: a0 = a0 | a2\n 10999: a0 = a0 << 0x20\n 11002: a0 = a0 | a1\n 11005: jump @354 if a0 == 0\n      : @353 (gas: 1)\n 11008: jump @187\n      : @354 (gas: 8)\n 11011: u64 [s1 + 2032] = 0\n 11015: u64 [s1 + 2024] = 0\n 11019: u64 [s1 + 2016] = 0\n 11023: a0 = 0x5aa5a48800000000\n 11033: a1 = s1 + 0x7e0\n 11037: u64 [s1 + 0x7f8] = a0\n 11041: a0 = u64 [s1 + 0x178]\n 11045: ra = 334, jump @9\n      : @355 [@dyn 167] (gas: 11)\n 11051: a3 = s1 + 0x100\n 11055: a0 = u64 [a3 + 0x70]\n 11058: a1 = u64 [a3 + 0x60]\n 11061: a0 = a0 | a1\n 11064: a1 = 0xfffffffc\n 11074: a2 = u64 [a3 + 0x78]\n 11077: a1 = a2 <u a1\n 11080: a2 = u64 [a3 + 0x58]\n 11083: a1 = 0 if a2 != 0\n 11085: a1 = 0 if a0 != 0\n 11087: jump @357 if a1 != 0\n      : @356 (gas: 1)\n 11090: jump @187\n      : @357 (gas: 13)\n 11093: a0 = u64 [s1 + 0x178]\n 11097: i32 a0 = a0 + 0x4\n 11100: a1 = u64 [s1 + 0xe0]\n 11104: a3 = s1 + 0x700\n 11108: u64 [a3 + 0xc0] = a1\n 11112: a1 = u64 [s1 + 0xd8]\n 11116: u64 [a3 + 0xc8] = a1\n 11120: a1 = u64 [s1 + 0xd0]\n 11124: u64 [a3 + 0xd0] = a1\n 11128: a1 = s1 + 0x7c0\n 11132: a2 = u64 [s1 + 0xc8]\n 11136: u64 [a3 + 0xd8] = a2\n 11140: ra = 336, jump @9\n      : @358 [@dyn 168] (gas: 4)\n 11146: ra = 0x152\n 11150: ecalli 10 // 'ref_time_left'\n 11152: t0 = 0x154\n 11156: jump @651\n      : @359 [@dyn 169] (gas: 1)\n 11159: t0 = 340, jump @651\n      : @360 [@dyn 170] (gas: 7)\n 11165: u64 [a0 + 1184] = 0\n 11169: u64 [a0 + 1176] = 0\n 11173: u64 [a0 + 1168] = 0\n 11177: u64 [a0 + 1160] = 0\n 11181: a1 = 0x24\n 11184: a0 = u64 [s1 + 0x178]\n 11188: ra = 342, jump @16\n      : @361 [@dyn 171] (gas: 4)\n 11194: u64 [s1 + 0x148] = a0\n 11198: a0 = u64 [s1 + 0x178]\n 11202: a1 = 0\n 11204: ra = 344, jump @16\n      : @362 [@dyn 172] (gas: 28)\n 11210: a2 = s1 + 0x10f8\n 11214: u32 [a2 + 1192] = 0\n 11218: a3 = a2 + 0x400\n 11222: u64 [a3 + 224] = 0xffffffffffffffff\n 11227: u64 [a3 + 216] = 0xffffffffffffffff\n 11232: u64 [a3 + 208] = 0xffffffffffffffff\n 11237: u64 [a3 + 200] = 0xffffffffffffffff\n 11242: a1 = s1 + 0x1580\n 11246: a1 = a1 << 0x20\n 11249: a1 = a1 >> 0x20\n 11252: a2 = s1 + 0x15c0\n 11256: a2 = a2 << 0x20\n 11259: a3 = a2 | a1\n 11262: a1 = u64 [s1 + 0x148]\n 11266: a1 = a1 << 0x20\n 11269: a1 = a1 >> 0x20\n 11272: a4 = u64 [s1 + 0x98]\n 11276: a4 = a4 | a1\n 11279: a0 = a0 << 0x20\n 11282: a0 = a0 >> 0x20\n 11285: a1 = s1 + 0x15a0\n 11289: a1 = a1 << 0x20\n 11292: a5 = a1 | a0\n 11295: a1 = 0xffffffffffffffff\n 11298: a2 = 0xffffffffffffffff\n 11301: a0 = u64 [s1 + 0x150]\n 11305: ecalli 0 // 'call'\n 11306: fallthrough\n      : @363 (gas: 1)\n 11307: jump @426 if a0 != 0\n      : @364 (gas: 15)\n 11311: u64 [s1 + 1912] = 0\n 11315: u64 [s1 + 1904] = 0\n 11319: u64 [s1 + 1896] = 0\n 11323: u64 [s1 + 1888] = 0\n 11327: a0 = u64 [s1 + 0x178]\n 11331: u64 [s1 + 0x780] = a0\n 11335: a0 = u64 [s1 + 0x158]\n 11339: u64 [s1 + 0x788] = a0\n 11343: a0 = u64 [s1 + 0x160]\n 11347: u64 [s1 + 0x790] = a0\n 11351: a0 = s1 + 0x780\n 11355: a1 = s1 + 0x760\n 11359: a2 = u64 [s1 + 0x170]\n 11363: u64 [s1 + 0x798] = a2\n 11367: ra = 346, jump @535\n      : @365 [@dyn 173] (gas: 3)\n 11373: a0 = s1 + 0x740\n 11377: a1 = 0x40\n 11380: ra = 348, jump @7\n      : @366 [@dyn 174] (gas: 13)\n 11386: a1 = s1 + 0x700\n 11390: a0 = u64 [a1 + 0x58]\n 11393: u64 [s1 + 0x170] = a0\n 11397: a0 = u64 [a1 + 0x50]\n 11400: u64 [s1 + 0x160] = a0\n 11404: a0 = u64 [a1 + 0x48]\n 11407: u64 [s1 + 0x158] = a0\n 11411: a0 = u64 [a1 + 0x40]\n 11414: u64 [s1 + 0x178] = a0\n 11418: a0 = u64 [s1 + 0x168]\n 11422: ra = 0x15e\n 11426: ecalli 4 // 'caller'\n 11428: fallthrough\n      : @367 [@dyn 175] (gas: 14)\n 11429: a3 = s1 + 0x100\n 11433: a0 = u64 [a3 + 0x70]\n 11436: a1 = u64 [a3 + 0x58]\n 11439: a0 = a0 | a1\n 11442: a1 = u64 [a3 + 0x78]\n 11445: a4 = a1\n 11447: a2 = u64 [a3 + 0x60]\n 11450: a1 = a1 | a2\n 11453: a1 = a1 | a0\n 11456: a1 = a1 >> 0x20\n 11459: a0 = a0 | a2\n 11462: a0 = a0 << 0x20\n 11465: a0 = a0 | a1\n 11468: jump @369 if a0 == 0\n      : @368 (gas: 1)\n 11471: jump @187\n      : @369 (gas: 5)\n 11474: a2 = u64 [s1 + 0xa0]\n 11478: a0 = u64 [a2 + 0x8]\n 11481: a1 = i32 [a2 + 0x10]\n 11484: a2 = u64 [a2]\n 11486: t0 = 352, jump @649\n      : @370 [@dyn 176] (gas: 7)\n 11492: u64 [s1 + 1848] = 0\n 11496: u64 [s1 + 0x730] = a1\n 11500: u64 [s1 + 0x728] = a0\n 11504: a1 = s1 + 0x720\n 11508: u64 [s1 + 0x720] = a3\n 11512: a0 = a4\n 11514: ra = 354, jump @9\n      : @371 [@dyn 177] (gas: 28)\n 11520: a3 = u64 [s1 + 0xc8]\n 11524: u64 [s1 + 0x6d8] = a3\n 11528: a2 = u64 [s1 + 0xd0]\n 11532: u64 [s1 + 0x6d0] = a2\n 11536: a1 = u64 [s1 + 0xd8]\n 11540: u64 [s1 + 0x6c8] = a1\n 11544: a0 = u64 [s1 + 0xe0]\n 11548: u64 [s1 + 0x6c0] = a0\n 11552: a4 = a0\n 11554: u64 [s1 + 0x6f8] = a3\n 11558: u64 [s1 + 0x6f0] = a2\n 11562: u64 [s1 + 0x6e8] = a1\n 11566: a0 = u64 [0x20068]\n 11571: a1 = u64 [0x20070]\n 11576: a2 = u64 [0x20078]\n 11581: u64 [s1 + 0x6e0] = a4\n 11585: a5 = s1 + 0x700\n 11589: u64 [a5 + 0x18] = a0\n 11592: u64 [a5 + 0x10] = a1\n 11595: u64 [a5 + 0x8] = a2\n 11598: a0 = u64 [0x20080]\n 11603: a1 = 0x20\n 11606: a2 = s1 + 0x700\n 11610: a3 = s1 + 0x6e0\n 11614: a4 = s1 + 0x6c0\n 11618: u64 [a5] = a0\n 11620: a0 = u64 [s1 + 0x178]\n 11624: ra = 356, jump @13\n      : @372 [@dyn 178] (gas: 4)\n 11630: a0 = u64 [s1 + 0x168]\n 11634: ra = 0x166\n 11638: ecalli 4 // 'caller'\n 11640: fallthrough\n      : @373 [@dyn 179] (gas: 5)\n 11641: a2 = u64 [s1 + 0xa0]\n 11645: a0 = u64 [a2 + 0x8]\n 11648: a1 = i32 [a2 + 0x10]\n 11651: a2 = u64 [a2]\n 11653: t0 = 360, jump @649\n      : @374 [@dyn 180] (gas: 17)\n 11659: a2 = u64 [s1 + 0xc8]\n 11663: a4 = s1 + 0x600\n 11667: u64 [a4 + 0x78] = a2\n 11670: a2 = u64 [s1 + 0xd0]\n 11674: u64 [a4 + 0x70] = a2\n 11677: a2 = u64 [s1 + 0xd8]\n 11681: u64 [a4 + 0x68] = a2\n 11684: a2 = u64 [s1 + 0xe0]\n 11688: u64 [a4 + 0x60] = a2\n 11691: u64 [s1 + 1688] = 0\n 11695: u64 [a4 + 0x90] = a1\n 11699: u64 [a4 + 0x88] = a0\n 11703: a0 = s1 + 0x6a0\n 11707: a1 = s1 + 0x680\n 11711: a2 = s1 + 0x660\n 11715: u64 [a4 + 0x80] = a3\n 11719: ra = 362, jump @572\n      : @375 [@dyn 181] (gas: 12)\n 11725: a1 = s1 + 0x10f8\n 11729: u64 [a1 + 1312] = 0\n 11733: u64 [a1 + 1304] = 0\n 11737: u64 [a1 + 1296] = 0\n 11741: u64 [a1 + 1288] = 0x1\n 11746: u64 [a1 + 1344] = 0\n 11750: u64 [a1 + 1336] = 0\n 11754: u64 [a1 + 1328] = 0\n 11758: u64 [a1 + 1320] = 0x1\n 11763: a0 = s1 + 0x1600\n 11767: a1 = s1 + 0x1620\n 11771: ra = 364, jump @12\n      : @376 [@dyn 182] (gas: 1)\n 11777: jump @481\n      : @377 (gas: 4)\n 11780: a0 = s1 + 0x7ff\n 11784: a0 = a0 + 0x1c1\n 11788: a1 = 0x40\n 11791: ra = 366, jump @7\n      : @378 [@dyn 183] (gas: 7)\n 11797: a0 = s1 + 0x7ff\n 11801: a0 = a0 + 0xf9\n 11805: a3 = u64 [a0 + 0xe0]\n 11809: a4 = u64 [a0 + 0xd8]\n 11813: a2 = u64 [a0 + 0xd0]\n 11817: a1 = u64 [a0 + 0xc8]\n 11821: t0 = 368, jump @657\n      : @379 [@dyn 184] (gas: 1)\n 11827: jump @381 if a0 == 0\n      : @380 (gas: 1)\n 11830: jump @187\n      : @381 (gas: 9)\n 11833: a2 = s1 + 0x7ff\n 11837: a2 = a2 + 0xf9\n 11841: u64 [a2 + 184] = 0\n 11845: u64 [a2 + 176] = 0\n 11849: u64 [a2 + 168] = 0\n 11853: t0 = 0x172\n 11857: a0 = 0x8c379a000000000\n 11867: a1 = s1 + 0x7ff\n 11871: fallthrough\n      : @382 [@dyn 185] (gas: 4)\n 11872: a1 = a1 + 0x1a1\n 11876: u64 [a2 + 0xc0] = a0\n 11880: a0 = u64 [s1 + 0x178]\n 11884: ra = 372, jump @9\n      : @383 [@dyn 186] (gas: 1)\n 11890: t0 = 374, jump @645\n      : @384 [@dyn 187] (gas: 1)\n 11896: jump @386 if a0 != 0\n      : @385 (gas: 1)\n 11899: jump @187\n      : @386 (gas: 1)\n 11902: t0 = 376, jump @668\n      : @387 [@dyn 188] (gas: 7)\n 11908: u64 [a2 + 160] = 0\n 11912: u64 [a2 + 152] = 0\n 11916: u64 [a2 + 136] = 0x20\n 11921: a1 = s1 + 0x7ff\n 11925: a1 = a1 + 0x181\n 11929: u64 [a2 + 144] = 0\n 11933: ra = 378, jump @9\n      : @388 [@dyn 189] (gas: 4)\n 11939: a2 = s1 + 0x100\n 11943: a0 = u64 [a2 + 0x60]\n 11946: a0 = a0 + 0xffffffffffffffdc\n 11949: t0 = 380, jump @647\n      : @389 [@dyn 190] (gas: 1)\n 11955: jump @391 if a0 != 0\n      : @390 (gas: 1)\n 11958: jump @187\n      : @391 (gas: 1)\n 11961: t0 = 382, jump @661\n      : @392 [@dyn 191] (gas: 7)\n 11967: u64 [a2 + 128] = 0\n 11971: u64 [a2 + 120] = 0\n 11974: u64 [a2 + 104] = 0x14\n 11978: a1 = s1 + 0x7ff\n 11982: a1 = a1 + 0x161\n 11986: u64 [a2 + 112] = 0\n 11989: ra = 384, jump @9\n      : @393 [@dyn 192] (gas: 3)\n 11995: a0 = 0xffffffbc\n 12005: a2 = s1 + 0x100\n 12009: t0 = 386, jump @647\n      : @394 [@dyn 193] (gas: 1)\n 12015: jump @396 if a0 != 0\n      : @395 (gas: 1)\n 12018: jump @187\n      : @396 (gas: 15)\n 12021: a0 = u64 [s1 + 0x178]\n 12025: i32 a0 = a0 + 0x44\n 12028: a1 = u64 [0x20058]\n 12033: a2 = u64 [0x20060]\n 12038: a3 = s1 + 0x7ff\n 12042: a3 = a3 + 0xf9\n 12046: u64 [a3 + 0x60] = a1\n 12049: u64 [a3 + 0x58] = a2\n 12052: a1 = 0x6661696c00000000\n 12062: u64 [a3 + 0x50] = a1\n 12065: a1 = s1 + 0x7ff\n 12069: a1 = a1 + 0x141\n 12073: u64 [a3 + 72] = 0\n 12076: ra = 0xb2\n 12080: jump @9\n      : @397 (gas: 4)\n 12083: a0 = s1 + 0x7ff\n 12087: a0 = a0 + 0x2a1\n 12091: a1 = 0x40\n 12094: ra = 388, jump @7\n      : @398 [@dyn 194] (gas: 8)\n 12100: a0 = s1 + 0x7ff\n 12104: a0 = a0 + 0xf9\n 12108: a5 = a0 + 0x100\n 12112: a3 = u64 [a5 + 0xc0]\n 12116: a4 = u64 [a5 + 0xb8]\n 12120: a2 = u64 [a5 + 0xb0]\n 12124: a1 = u64 [a5 + 0xa8]\n 12128: t0 = 390, jump @657\n      : @399 [@dyn 195] (gas: 1)\n 12134: jump @401 if a0 == 0\n      : @400 (gas: 1)\n 12137: jump @187\n      : @401 (gas: 9)\n 12140: a2 = s1 + 0x7ff\n 12144: a2 = a2 + 0xf9\n 12148: u64 [a2 + 408] = 0\n 12152: u64 [a2 + 400] = 0\n 12156: u64 [a2 + 392] = 0\n 12160: t0 = 0x188\n 12164: a0 = 0x8c379a000000000\n 12174: a1 = s1 + 0x7ff\n 12178: fallthrough\n      : @402 [@dyn 196] (gas: 4)\n 12179: a1 = a1 + 0x281\n 12183: u64 [a2 + 0x1a0] = a0\n 12187: a0 = u64 [s1 + 0x178]\n 12191: ra = 394, jump @9\n      : @403 [@dyn 197] (gas: 1)\n 12197: t0 = 396, jump @645\n      : @404 [@dyn 198] (gas: 1)\n 12203: jump @406 if a0 != 0\n      : @405 (gas: 1)\n 12206: jump @187\n      : @406 (gas: 1)\n 12209: t0 = 398, jump @668\n      : @407 [@dyn 199] (gas: 7)\n 12215: u64 [a2 + 384] = 0\n 12219: u64 [a2 + 376] = 0\n 12223: u64 [a2 + 360] = 0x20\n 12228: a1 = s1 + 0x7ff\n 12232: a1 = a1 + 0x261\n 12236: u64 [a2 + 368] = 0\n 12240: ra = 400, jump @9\n      : @408 [@dyn 200] (gas: 4)\n 12246: a2 = s1 + 0x100\n 12250: a0 = u64 [a2 + 0x60]\n 12253: a0 = a0 + 0xffffffffffffffdc\n 12256: t0 = 402, jump @647\n      : @409 [@dyn 201] (gas: 1)\n 12262: jump @411 if a0 != 0\n      : @410 (gas: 1)\n 12265: jump @187\n      : @411 (gas: 1)\n 12268: t0 = 404, jump @661\n      : @412 [@dyn 202] (gas: 7)\n 12274: u64 [a2 + 352] = 0\n 12278: u64 [a2 + 344] = 0\n 12282: u64 [a2 + 328] = 0x11\n 12287: a1 = s1 + 0x7ff\n 12291: a1 = a1 + 0x241\n 12295: u64 [a2 + 336] = 0\n 12299: ra = 406, jump @9\n      : @413 [@dyn 203] (gas: 3)\n 12305: a0 = 0xffffffbc\n 12315: a2 = s1 + 0x100\n 12319: t0 = 408, jump @647\n      : @414 [@dyn 204] (gas: 1)\n 12325: jump @416 if a0 != 0\n      : @415 (gas: 1)\n 12328: jump @187\n      : @416 (gas: 16)\n 12331: a0 = u64 [s1 + 0x178]\n 12335: i32 a0 = a0 + 0x44\n 12338: a1 = u64 [0x20048]\n 12343: a2 = u64 [0x20050]\n 12348: a3 = s1 + 0x7ff\n 12352: a3 = a3 + 0xf9\n 12356: a4 = a3 + 0x100\n 12360: u64 [a4 + 0x40] = a1\n 12363: u64 [a4 + 0x38] = a2\n 12366: a1 = 0x6c00000000000000\n 12376: u64 [a4 + 0x30] = a1\n 12379: a1 = s1 + 0x7ff\n 12383: a1 = a1 + 0x221\n 12387: u64 [a3 + 296] = 0\n 12391: ra = 0xb2\n 12395: jump @9\n      : @417 (gas: 4)\n 12398: a0 = s1 + 0x7ff\n 12402: a0 = a0 + 0xa1\n 12406: a1 = 0x40\n 12409: ra = 410, jump @7\n      : @418 [@dyn 205] (gas: 16)\n 12415: a0 = s1 + 0x1000\n 12419: a0 = u64 [a0 + 0xfffffffffffff8b8]\n 12423: u64 [s1 + 0x170] = a0\n 12427: a0 = s1 + 0x1000\n 12431: a0 = u64 [a0 + 0xfffffffffffff8b0]\n 12435: u64 [s1 + 0x168] = a0\n 12439: a0 = s1 + 0x1000\n 12443: a0 = u64 [a0 + 0xfffffffffffff8a8]\n 12447: u64 [s1 + 0x160] = a0\n 12451: a0 = s1 + 0x1000\n 12455: a0 = u64 [a0 + 0xfffffffffffff8a0]\n 12459: u64 [s1 + 0x178] = a0\n 12463: ra = 0x19c\n 12467: ecalli 12 // 'return_data_size'\n 12469: t0 = 0x19e\n 12473: jump @646\n      : @419 [@dyn 206] (gas: 1)\n 12476: t0 = 414, jump @646\n      : @420 [@dyn 207] (gas: 1)\n 12482: jump @422 if a1 == 0\n      : @421 (gas: 1)\n 12485: jump @187\n      : @422 (gas: 2)\n 12488: a1 = a0 >> 0x20\n 12491: jump @424 if a1 == 0\n      : @423 (gas: 1)\n 12494: jump @187\n      : @424 (gas: 6)\n 12497: a1 = a0\n 12499: u64 [s1 + 0x168] = a0\n 12503: i32 a0 = a0 + 0\n 12505: u64 [s1 + 0x170] = a0\n 12509: a0 = u64 [s1 + 0x178]\n 12513: ra = 416, jump @16\n      : @425 [@dyn 208] (gas: 11)\n 12519: a1 = s1 + 0x10f8\n 12523: a2 = u64 [s1 + 0x168]\n 12527: u32 [a1 + 0x448] = a2\n 12531: i32 a0 = a0 + 0\n 12533: a1 = s1 + 0x1000\n 12537: i32 a1 = a1 + 0x540\n 12541: a2 = 0\n 12543: ecalli 11 // 'return_data_copy'\n 12545: a0 = s1 + 0x10f8\n 12549: a0 = i32 [a0 + 0x448]\n 12553: jump @242\n      : @426 (gas: 3)\n 12556: a0 = s1 + 0x7a0\n 12560: a1 = 0x40\n 12563: ra = 418, jump @7\n      : @427 [@dyn 209] (gas: 13)\n 12569: a1 = s1 + 0x700\n 12573: a0 = u64 [a1 + 0xb8]\n 12577: u64 [s1 + 0x170] = a0\n 12581: a0 = u64 [a1 + 0xb0]\n 12585: u64 [s1 + 0x168] = a0\n 12589: a0 = u64 [a1 + 0xa8]\n 12593: u64 [s1 + 0x160] = a0\n 12597: a0 = u64 [a1 + 0xa0]\n 12601: u64 [s1 + 0x178] = a0\n 12605: ra = 0x1a4\n 12609: ecalli 12 // 'return_data_size'\n 12611: t0 = 0x1a6\n 12615: jump @646\n      : @428 [@dyn 210] (gas: 1)\n 12618: t0 = 422, jump @646\n      : @429 [@dyn 211] (gas: 1)\n 12624: jump @431 if a1 == 0\n      : @430 (gas: 1)\n 12627: jump @187\n      : @431 (gas: 2)\n 12630: a1 = a0 >> 0x20\n 12633: jump @433 if a1 == 0\n      : @432 (gas: 1)\n 12636: jump @187\n      : @433 (gas: 6)\n 12639: a1 = a0\n 12641: u64 [s1 + 0x168] = a0\n 12645: i32 a0 = a0 + 0\n 12647: u64 [s1 + 0x170] = a0\n 12651: a0 = u64 [s1 + 0x178]\n 12655: ra = 424, jump @16\n      : @434 [@dyn 212] (gas: 11)\n 12661: a1 = s1 + 0x10f8\n 12665: a2 = u64 [s1 + 0x168]\n 12669: u32 [a1 + 0x4e8] = a2\n 12673: i32 a0 = a0 + 0\n 12675: a1 = s1 + 0x1000\n 12679: i32 a1 = a1 + 0x5e0\n 12683: a2 = 0\n 12685: ecalli 11 // 'return_data_copy'\n 12687: a0 = s1 + 0x10f8\n 12691: a0 = i32 [a0 + 0x4e8]\n 12695: jump @242\n      : @435 (gas: 3)\n 12698: a1 = 0x200e0\n 12703: i32 a1 = a1 + 0\n 12705: jump @472\n      : @436 (gas: 3)\n 12708: a1 = 0x200e0\n 12713: i32 a1 = a1 + 0\n 12715: jump @472\n      : @437 (gas: 3)\n 12718: a1 = 0x200e0\n 12723: i32 a1 = a1 + 0\n 12725: jump @472\n      : @438 (gas: 3)\n 12728: a1 = 0x200e0\n 12733: i32 a1 = a1 + 0\n 12735: jump @472\n      : @439 (gas: 3)\n 12738: a1 = 0x200e0\n 12743: i32 a1 = a1 + 0\n 12745: jump @472\n      : @440 (gas: 3)\n 12748: a1 = 0x200e0\n 12753: i32 a1 = a1 + 0\n 12755: jump @472\n      : @441 (gas: 1)\n 12758: jump @461 if a0 != 4076725131\n      : @442 (gas: 11)\n 12766: a0 = s1 + 0x10f8\n 12770: u64 [a0 + 1472] = 0\n 12774: u64 [a0 + 1464] = 0\n 12778: u64 [a0 + 1456] = 0\n 12782: u64 [a0 + 1448] = 0\n 12786: a0 = s1 + 0x1000\n 12790: i32 a0 = a0 + 0x6a0\n 12794: ra = 0x1aa\n 12798: ecalli 16 // 'value_transferred'\n 12800: t0 = 0x1ac\n 12804: jump @665\n      : @443 [@dyn 213] (gas: 1)\n 12807: t0 = 428, jump @665\n      : @444 [@dyn 214] (gas: 8)\n 12813: a0 = u64 [a4 + 0xb8]\n 12817: a1 = u64 [a4 + 0xc0]\n 12821: a2 = u64 [a4 + 0xb0]\n 12825: a3 = u64 [a4 + 0xa8]\n 12829: a1 = a1 | a2\n 12832: a0 = a0 | a3\n 12835: a0 = a0 | a1\n 12838: jump @446 if a0 != 0\n      : @445 (gas: 3)\n 12841: a0 = u64 [s1 + 0x178]\n 12845: a0 = i32 [a0]\n 12847: jump @475 if a0 >u 35\n      : @446 (gas: 4)\n 12852: a0 = 0\n 12854: a1 = 0\n 12856: ra = 0x1ae\n 12860: jump @16\n      : @447 (gas: 2)\n 12863: a1 = 0\n 12865: ra = 430, jump @16\n      : @448 [@dyn 215] (gas: 3)\n 12871: i32 a1 = a0 + 0\n 12873: a0 = 0x1\n 12876: jump @473\n      : @449 (gas: 3)\n 12879: a1 = 0x200e0\n 12884: i32 a1 = a1 + 0\n 12886: jump @472\n      : @450 (gas: 3)\n 12889: a1 = 0x200e0\n 12894: i32 a1 = a1 + 0\n 12896: jump @472\n      : @451 (gas: 3)\n 12899: a1 = 0x200e0\n 12904: i32 a1 = a1 + 0\n 12906: jump @472\n      : @452 (gas: 8)\n 12909: u64 [s1 + 1264] = 0\n 12913: u64 [s1 + 1256] = 0\n 12917: u64 [s1 + 1248] = 0\n 12921: a0 = 0x3ee5aeb500000000\n 12931: a1 = s1 + 0x4e0\n 12935: u64 [s1 + 0x4f8] = a0\n 12939: a0 = 0\n 12941: ra = 432, jump @9\n      : @453 [@dyn 216] (gas: 2)\n 12947: a1 = i32 [0x200d0]\n 12952: jump @455 if a1 >u 31\n      : @454 (gas: 2)\n 12956: u32 [0x200d0] = 0x20\n 12962: fallthrough\n      : @455 (gas: 8)\n 12963: a1 = 0x200e0\n 12968: i32 a1 = a1 + 0\n 12970: a0 = 0x1\n 12973: a2 = 0x4\n 12976: ecalli 13 // 'seal_return'\n 12978: a1 = 0x200e0\n 12983: i32 a1 = a1 + 0\n 12985: jump @472\n      : @456 (gas: 3)\n 12988: a1 = 0x200e0\n 12993: i32 a1 = a1 + 0\n 12995: jump @472\n      : @457 (gas: 3)\n 12998: a1 = 0x200e0\n 13003: i32 a1 = a1 + 0\n 13005: jump @472\n      : @458 (gas: 14)\n 13008: a3 = s1 + 0x100\n 13012: a1 = u64 [a3 + 0x68]\n 13015: a1 = a1 << 0x20\n 13018: a2 = a1 >> 0x20\n 13021: u64 [s1 + 1176] = 0\n 13025: a1 = u64 [a3 + 0x70]\n 13028: a4 = s1 + 0x400\n 13032: u64 [a4 + 0x80] = a1\n 13036: a1 = u64 [a3 + 0x78]\n 13039: u64 [a4 + 0x88] = a1\n 13043: a1 = s1 + 0x480\n 13047: u64 [a4 + 0x90] = a2\n 13051: u64 [s1 + 0x178] = a0\n 13055: ra = 434, jump @9\n      : @459 [@dyn 217] (gas: 3)\n 13061: a1 = 0x20\n 13064: a0 = u64 [s1 + 0x178]\n 13068: ra = 436, jump @16\n      : @460 [@dyn 218] (gas: 5)\n 13074: i32 a1 = a0 + 0\n 13076: a2 = 0x20\n 13079: a0 = 0\n 13081: ecalli 13 // 'seal_return'\n 13083: fallthrough\n      : @461 (gas: 1)\n 13084: jump @465 if a0 != 155770457\n      : @462 (gas: 10)\n 13091: a0 = s1 + 0x7ff\n 13095: a0 = a0 + 0xf9\n 13099: u64 [a0 + 1888] = 0\n 13103: u64 [a0 + 1880] = 0\n 13107: u64 [a0 + 1872] = 0\n 13111: u64 [a0 + 1864] = 0\n 13115: a0 = s1 + 0x1000\n 13119: i32 a0 = a0 + 0x40\n 13122: ecalli 16 // 'value_transferred'\n 13124: fallthrough\n      : @463 (gas: 11)\n 13125: a3 = s1 + 0x7ff\n 13129: a3 = a3 + 0xf9\n 13133: a4 = a3 + 0x700\n 13137: a0 = u64 [a4 + 0x58]\n 13140: a1 = u64 [a4 + 0x60]\n 13143: a2 = u64 [a4 + 0x50]\n 13146: a3 = u64 [a4 + 0x48]\n 13149: a1 = a1 | a2\n 13152: a0 = a0 | a3\n 13155: a0 = a0 | a1\n 13158: jump @483 if a0 == 0\n      : @464 (gas: 3)\n 13162: a1 = 0x200e0\n 13167: i32 a1 = a1 + 0\n 13169: jump @472\n      : @465 (gas: 1)\n 13171: jump @469 if a0 != 1901074598\n      : @466 (gas: 9)\n 13178: a0 = s1 + 0x10f8\n 13182: u64 [a0 + 128] = 0\n 13186: u64 [a0 + 120] = 0\n 13189: u64 [a0 + 112] = 0\n 13192: u64 [a0 + 104] = 0\n 13195: a0 = s1 + 0x1000\n 13199: i32 a0 = a0 + 0x160\n 13203: ecalli 16 // 'value_transferred'\n 13205: fallthrough\n      : @467 (gas: 9)\n 13206: a3 = s1 + 0x10f8\n 13210: a0 = u64 [a3 + 0x78]\n 13213: a1 = u64 [a3 + 0x80]\n 13217: a2 = u64 [a3 + 0x70]\n 13220: a3 = u64 [a3 + 0x68]\n 13223: a1 = a1 | a2\n 13226: a0 = a0 | a3\n 13229: a0 = a0 | a1\n 13232: jump @485 if a0 == 0\n      : @468 (gas: 3)\n 13236: a1 = 0x200e0\n 13241: i32 a1 = a1 + 0\n 13243: jump @472\n      : @469 (gas: 3)\n 13245: a0 = u64 [s1 + 0x178]\n 13249: a0 = i32 [a0]\n 13251: fallthrough\n      : @470 (gas: 1)\n 13252: jump @474 if a0 == 0\n      : @471 (gas: 3)\n 13255: a1 = 0x200e0\n 13260: i32 a1 = a1 + 0\n 13262: fallthrough\n      : @472 (gas: 7)\n 13263: a0 = 0x1\n 13266: a2 = 0\n 13268: ecalli 13 // 'seal_return'\n 13270: a1 = 0x200e0\n 13275: i32 a1 = a1 + 0\n 13277: a0 = 0\n 13279: fallthrough\n      : @473 (gas: 6)\n 13280: a2 = 0\n 13282: ecalli 13 // 'seal_return'\n 13284: a1 = 0x200e0\n 13289: i32 a1 = a1 + 0\n 13291: a0 = 0\n 13293: jump @473\n      : @474 (gas: 4)\n 13295: a1 = 0x200e0\n 13300: i32 a1 = a1 + 0\n 13302: a0 = 0\n 13304: jump @473\n      : @475 (gas: 3)\n 13306: a0 = s1 + 0x7ff\n 13310: a0 = a0 + 0x7e1\n 13314: ra = 438, jump @521\n      : @476 [@dyn 219] (gas: 9)\n 13320: a0 = s1 + 0x7ff\n 13324: a0 = a0 + 0xf9\n 13328: a1 = u64 [a0 + 0x6f0]\n 13332: u64 [s1 + 0x170] = a1\n 13336: a1 = u64 [a0 + 0x6e8]\n 13340: u64 [s1 + 0x178] = a1\n 13344: a0 = u32 [a0 + 0x6f8]\n 13348: u64 [s1 + 0x168] = a0\n 13352: ra = 440, jump @560\n      : @477 [@dyn 220] (gas: 7)\n 13358: a2 = s1 + 0x100\n 13362: a0 = u64 [a2 + 0x78]\n 13365: a1 = u64 [a2 + 0x68]\n 13368: a0 = a0 | a1\n 13371: a1 = u64 [a2 + 0x70]\n 13374: a0 = a0 | a1\n 13377: jump @491 if a0 == 0\n      : @478 (gas: 6)\n 13381: a0 = 0xffffffff\n 13391: u64 [s1 + 0x160] = a0\n 13395: a0 = s1 + 0x7ff\n 13399: a0 = a0 + 0x7c1\n 13403: a1 = u64 [s1 + 0xe8]\n 13407: ra = 442, jump @11\n      : @479 [@dyn 221] (gas: 25)\n 13413: a0 = s1 + 0x7ff\n 13417: a0 = a0 + 0xf9\n 13421: a3 = a0 + 0x600\n 13425: a2 = u64 [a3 + 0xd8]\n 13429: u64 [s1 + 0x148] = a2\n 13433: a1 = u64 [a3 + 0xd0]\n 13437: u64 [s1 + 0x158] = a1\n 13441: a1 = u64 [a3 + 0xc8]\n 13445: u64 [s1 + 0x150] = a1\n 13449: a0 = u64 [a3 + 0xe0]\n 13453: a1 = a2 >> 0x20\n 13456: a1 = a1 << 0x20\n 13459: a2 = u64 [s1 + 0x168]\n 13463: a1 = a1 | a2\n 13466: a2 = s1 + 0x10f8\n 13470: a3 = u64 [s1 + 0x170]\n 13474: a4 = a2 + 0x500\n 13478: u64 [a4 + 0xd0] = a3\n 13482: a3 = u64 [s1 + 0x178]\n 13486: u64 [a4 + 0xc8] = a3\n 13490: u64 [a4 + 0xe0] = a0\n 13494: u64 [a4 + 0xd8] = a1\n 13498: a1 = s1 + 0x16c0\n 13502: a0 = u64 [s1 + 0xe8]\n 13506: ra = 444, jump @12\n      : @480 [@dyn 222] (gas: 40)\n 13512: a5 = s1 + 0x100\n 13516: a0 = u64 [a5 + 0x50]\n 13519: a0 = a0 & 0xffffffffffffffff\n 13522: a2 = u64 [a5 + 0x58]\n 13525: a1 = a2 & 0xffffffffffffffff\n 13528: a2 = u64 [a5 + 0x60]\n 13531: a3 = u64 [a5 + 0x48]\n 13534: a2 = a2 & a3\n 13537: a4 = s1 + 0x7ff\n 13541: a4 = a4 + 0xf9\n 13545: u64 [a4 + 1664] = 0\n 13549: a3 = u64 [a5 + 0x68]\n 13552: u64 [a4 + 0x678] = a3\n 13556: a3 = u64 [a5 + 0x70]\n 13559: u64 [a4 + 0x670] = a3\n 13563: a3 = u64 [a5 + 0x78]\n 13566: a5 = a4 + 0x600\n 13570: u64 [a5 + 0x68] = a3\n 13573: u64 [a4 + 1696] = 0\n 13577: u64 [a5 + 0x98] = a2\n 13581: u64 [a5 + 0x90] = a1\n 13585: a1 = u64 [0x20020]\n 13590: a2 = u64 [0x20028]\n 13595: a3 = u64 [0x20030]\n 13600: u64 [a5 + 0x88] = a0\n 13604: u64 [a5 + 0xc0] = a1\n 13608: u64 [a5 + 0xb8] = a2\n 13612: u64 [a5 + 0xb0] = a3\n 13616: a1 = a4\n 13618: a0 = u64 [0x20038]\n 13623: a2 = s1 + 0x7ff\n 13627: a2 = a2 + 0x7a1\n 13631: a3 = s1 + 0x7ff\n 13635: a3 = a3 + 0x781\n 13639: a4 = s1 + 0x7ff\n 13643: a4 = a4 + 0x761\n 13647: u64 [a1 + 0x6a8] = a0\n 13651: a0 = 0\n 13653: a1 = 0\n 13655: ra = 446, jump @13\n      : @481 [@dyn 223] (gas: 3)\n 13661: a0 = 0\n 13663: a1 = 0\n 13665: ra = 448, jump @16\n      : @482 [@dyn 224] (gas: 3)\n 13671: i32 a1 = a0 + 0\n 13673: a0 = 0\n 13675: jump @473\n      : @483 (gas: 3)\n 13678: a0 = u64 [s1 + 0x178]\n 13682: a0 = i32 [a0]\n 13684: jump @487 if a0 >u 67\n      : @484 (gas: 4)\n 13688: a1 = 0x200e0\n 13693: i32 a1 = a1 + 0\n 13695: a0 = 0x1\n 13698: jump @473\n      : @485 (gas: 3)\n 13701: a0 = u64 [s1 + 0x178]\n 13705: a0 = i32 [a0]\n 13707: jump @498 if a0 >u 3\n      : @486 (gas: 4)\n 13712: a1 = 0x200e0\n 13717: i32 a1 = a1 + 0\n 13719: a0 = 0x1\n 13722: jump @473\n      : @487 (gas: 2)\n 13725: a0 = s1 + 0x180\n 13729: ra = 450, jump @521\n      : @488 [@dyn 225] (gas: 11)\n 13735: a0 = u64 [s1 + 0x190]\n 13739: u64 [s1 + 0x168] = a0\n 13743: a0 = u64 [s1 + 0x188]\n 13747: u64 [s1 + 0x170] = a0\n 13751: a0 = u64 [s1 + 0x180]\n 13755: u64 [s1 + 0x178] = a0\n 13759: a0 = s1 + 0x1000\n 13763: i32 a0 = a0 + 0x60\n 13766: a1 = 0x24\n 13769: ecalli 2 // 'call_data_load'\n 13771: fallthrough\n      : @489 (gas: 12)\n 13772: a2 = s1 + 0x7ff\n 13776: a2 = a2 + 0xf9\n 13780: a3 = a2 + 0x700\n 13784: a0 = u64 [a3 + 0x80]\n 13788: a1 = u64 [a3 + 0x78]\n 13791: a2 = u64 [a3 + 0x70]\n 13794: a0 = a0 | a1\n 13797: u64 [s1 + 0x160] = a2\n 13801: a1 = a2 >> 0x20\n 13804: a1 = a1 <u 0x1\n 13807: a1 = 0 if a0 != 0\n 13809: jump @503 if a1 != 0\n      : @490 (gas: 4)\n 13813: a1 = 0x200e0\n 13818: i32 a1 = a1 + 0\n 13820: a0 = 0x1\n 13823: jump @473\n      : @491 (gas: 12)\n 13826: a0 = s1 + 0x7ff\n 13830: a0 = a0 + 0xf9\n 13834: u64 [a0 + 1624] = 0\n 13838: u64 [a0 + 1616] = 0\n 13842: u64 [a0 + 1608] = 0\n 13846: a2 = a0\n 13848: a0 = 0x1e4fbdf700000000\n 13858: a1 = s1 + 0x7ff\n 13862: a1 = a1 + 0x741\n 13866: u64 [a2 + 0x660] = a0\n 13870: a0 = 0\n 13872: ra = 452, jump @9\n      : @492 [@dyn 226] (gas: 11)\n 13878: a0 = s1 + 0x7ff\n 13882: a0 = a0 + 0xf9\n 13886: u64 [a0 + 1600] = 0\n 13890: u64 [a0 + 1592] = 0\n 13894: u64 [a0 + 1584] = 0\n 13898: a2 = a0\n 13900: a0 = 0x4\n 13903: a1 = s1 + 0x7ff\n 13907: a1 = a1 + 0x721\n 13911: u64 [a2 + 1576] = 0\n 13915: ra = 454, jump @9\n      : @493 [@dyn 227] (gas: 3)\n 13921: a1 = 0x24\n 13924: a0 = 0\n 13926: ra = 456, jump @16\n      : @494 [@dyn 228] (gas: 5)\n 13932: i32 a1 = a0 + 0\n 13934: a0 = 0x1\n 13937: a2 = 0x24\n 13940: ecalli 13 // 'seal_return'\n 13942: fallthrough\n      : @495 (gas: 6)\n 13943: a0 = 0x1\n 13946: a1 = u64 [s1 + 0xb0]\n 13950: ecalli 13 // 'seal_return'\n 13952: a0 = 0x1\n 13955: a1 = u64 [s1 + 0xb0]\n 13959: jump @473\n      : @496 (gas: 5)\n 13962: a1 = u64 [s1 + 0xb0]\n 13966: ecalli 13 // 'seal_return'\n 13968: a0 = 0x1\n 13971: a1 = u64 [s1 + 0xb0]\n 13975: jump @473\n      : @497 (gas: 3)\n 13978: a0 = 0x1\n 13981: a1 = u64 [s1 + 0xb0]\n 13985: jump @473\n      : @498 (gas: 1)\n 13988: ra = 458, jump @560\n      : @499 [@dyn 229] (gas: 8)\n 13994: a0 = s1 + 0x10f8\n 13998: u64 [a0 + 160] = 0\n 14002: u64 [a0 + 152] = 0\n 14006: u64 [a0 + 144] = 0\n 14010: u64 [a0 + 136] = 0\n 14014: a0 = s1 + 0x300\n 14018: a1 = s1 + 0x1180\n 14022: ra = 460, jump @11\n      : @500 [@dyn 230] (gas: 22)\n 14028: a2 = s1 + 0x300\n 14032: a1 = u64 [a2 + 0x10]\n 14035: u64 [s1 + 0x168] = a1\n 14039: a0 = u64 [a2]\n 14041: u64 [s1 + 0x178] = a0\n 14045: a0 = u64 [a2 + 0x8]\n 14048: u64 [s1 + 0x170] = a0\n 14052: a0 = u64 [a2 + 0x18]\n 14055: a1 = a1 >> 0x20\n 14058: a1 = a1 << 0x20\n 14061: a2 = s1 + 0x10f8\n 14065: u64 [a2 + 192] = 0\n 14069: u64 [a2 + 184] = 0\n 14073: u64 [a2 + 176] = 0\n 14077: u64 [a2 + 168] = 0\n 14081: u64 [a2 + 208] = 0\n 14085: u64 [a2 + 200] = 0\n 14089: u64 [a2 + 0xe0] = a0\n 14093: u64 [a2 + 0xd8] = a1\n 14097: a0 = s1 + 0x11a0\n 14101: a1 = s1 + 0x11c0\n 14105: ra = 462, jump @12\n      : @501 [@dyn 231] (gas: 29)\n 14111: a4 = s1 + 0x100\n 14115: a0 = u64 [a4 + 0x68]\n 14118: a0 = a0 << 0x20\n 14121: a0 = a0 >> 0x20\n 14124: u64 [s1 + 696] = 0\n 14128: u64 [s1 + 688] = 0\n 14132: u64 [s1 + 680] = 0\n 14136: u64 [s1 + 672] = 0\n 14140: u64 [s1 + 728] = 0\n 14144: a5 = s1 + 0x200\n 14148: u64 [a5 + 0xd0] = a0\n 14152: a0 = u64 [a4 + 0x70]\n 14155: u64 [a5 + 0xc8] = a0\n 14159: a0 = u64 [0x20020]\n 14164: a1 = u64 [0x20028]\n 14169: a2 = u64 [0x20030]\n 14174: a3 = u64 [a4 + 0x78]\n 14177: u64 [a5 + 0xc0] = a3\n 14181: u64 [a5 + 0xf8] = a0\n 14185: u64 [a5 + 0xf0] = a1\n 14189: u64 [a5 + 0xe8] = a2\n 14193: a0 = u64 [0x20038]\n 14198: a2 = s1 + 0x2e0\n 14202: a3 = s1 + 0x2c0\n 14206: a4 = s1 + 0x2a0\n 14210: u64 [a5 + 0xe0] = a0\n 14214: a0 = 0\n 14216: a1 = 0\n 14218: ra = 464, jump @13\n      : @502 [@dyn 232] (gas: 4)\n 14224: a1 = 0x200e0\n 14229: i32 a1 = a1 + 0\n 14231: a0 = 0\n 14233: jump @473\n      : @503 (gas: 5)\n 14236: a0 = s1 + 0x7ff\n 14240: a0 = a0 + 0xf9\n 14244: a0 = u64 [a0 + 0x768]\n 14248: u64 [s1 + 0x158] = a0\n 14252: ra = 466, jump @560\n      : @504 [@dyn 233] (gas: 27)\n 14258: a4 = s1 + 0x100\n 14262: a2 = u64 [a4 + 0x58]\n 14265: a0 = a2 >> 0x20\n 14268: a1 = u64 [a4 + 0x60]\n 14271: a1 = a1 << 0x20\n 14274: a0 = a0 | a1\n 14277: a1 = a2 << 0x20\n 14280: a2 = u64 [a4 + 0x68]\n 14283: a2 = a2 << 0x20\n 14286: a2 = a2 >> 0x20\n 14289: a1 = a1 | a2\n 14292: a3 = s1 + 0x7ff\n 14296: a3 = a3 + 0xf9\n 14300: u64 [a3 + 1952] = 0\n 14304: u64 [a3 + 1944] = 0\n 14308: u64 [a3 + 1936] = 0\n 14312: a5 = a3 + 0x700\n 14316: u64 [a5 + 136] = 0x2\n 14321: a2 = u64 [a4 + 0x70]\n 14324: u64 [a5 + 0xb0] = a2\n 14328: a2 = u64 [a4 + 0x78]\n 14331: u64 [a5 + 0xa8] = a2\n 14335: u64 [a5 + 0xc0] = a0\n 14339: u64 [a5 + 0xb8] = a1\n 14343: a0 = s1 + 0x1080\n 14347: a1 = s1 + 0x10a0\n 14351: ra = 468, jump @12\n      : @505 [@dyn 234] (gas: 4)\n 14357: a1 = 0x200e0\n 14362: i32 a1 = a1 + 0\n 14364: a0 = 0\n 14366: jump @473\n      : @506 (gas: 8)\n 14369: u64 [s1 + 1616] = 0\n 14373: u64 [s1 + 1608] = 0\n 14377: u64 [s1 + 1600] = 0\n 14381: a0 = 0x4e487b7100000000\n 14391: a1 = s1 + 0x640\n 14395: u64 [s1 + 0x658] = a0\n 14399: a0 = 0\n 14401: ra = 470, jump @9\n      : @507 [@dyn 235] (gas: 8)\n 14407: u64 [s1 + 1592] = 0\n 14411: u64 [s1 + 1584] = 0\n 14415: u64 [s1 + 1568] = 0x11\n 14420: a0 = 0x4\n 14423: a1 = s1 + 0x620\n 14427: u64 [s1 + 1576] = 0\n 14431: ra = 0x1da\n 14435: jump @9\n      : @508 (gas: 12)\n 14438: a0 = s1 + 0x7ff\n 14442: a0 = a0 + 0xf9\n 14446: u64 [a0 + 536] = 0\n 14450: u64 [a0 + 528] = 0\n 14454: u64 [a0 + 520] = 0\n 14458: a2 = a0\n 14460: a0 = 0x4e487b7100000000\n 14470: a1 = s1 + 0x7ff\n 14474: a1 = a1 + 0x301\n 14478: u64 [a2 + 0x220] = a0\n 14482: a0 = 0\n 14484: ra = 472, jump @9\n      : @509 [@dyn 236] (gas: 11)\n 14490: a1 = s1 + 0x7ff\n 14494: a1 = a1 + 0xf9\n 14498: u64 [a1 + 512] = 0\n 14502: u64 [a1 + 504] = 0\n 14506: u64 [a1 + 488] = 0x11\n 14511: a2 = a1\n 14513: a0 = 0x4\n 14516: a1 = s1 + 0x7ff\n 14520: a1 = a1 + 0x2e1\n 14524: u64 [a2 + 496] = 0\n 14528: ra = 474, jump @9\n      : @510 [@dyn 237] (gas: 3)\n 14534: a0 = u64 [s1 + 0xa8]\n 14538: a0 = i32 [a0]\n 14540: jump @512 if a0 >u 63\n      : @511 (gas: 5)\n 14544: a1 = u64 [s1 + 0xa8]\n 14548: u32 [a1 + 0] = 0x40\n 14551: a0 = 0x1\n 14554: a2 = 0x24\n 14557: jump @496\n      : @512 (gas: 3)\n 14560: a0 = 0x1\n 14563: a2 = 0x24\n 14566: jump @496\n      : @513 (gas: 18)\n 14569: sp = sp + 0xffffffffffffffc0\n 14572: u64 [sp + 0x38] = ra\n 14575: u64 [sp + 0x30] = s0\n 14578: u64 [sp + 0x28] = s1\n 14581: s0 = sp + 0x40\n 14584: sp = sp & 0xfffffffffffffff0\n 14587: a2 = u64 [a1 + 0x10]\n 14590: a3 = u64 [a1 + 0x18]\n 14593: a4 = u64 [a1 + 0x8]\n 14596: a1 = u64 [a1]\n 14598: a3 = a3 | a4\n 14601: a4 = a1 | a2\n 14604: a4 = a4 | a3\n 14607: a4 = a4 >> 0x20\n 14610: a2 = a2 | a3\n 14613: a2 = a2 << 0x20\n 14616: a2 = a2 | a4\n 14619: jump @519 if a2 != 0\n      : @514 (gas: 3)\n 14622: s1 = a0\n 14624: a0 = sp\n 14626: ra = 476, jump @7\n      : @515 [@dyn 238] (gas: 1)\n 14632: t0 = 478, jump @656\n      : @516 [@dyn 239] (gas: 1)\n 14638: jump @520 if a3 == 0\n      : @517 (gas: 1)\n 14641: t0 = 480, jump @660\n      : @518 [@dyn 240] (gas: 1)\n 14647: ret\n      : @519 (gas: 1)\n 14649: trap\n      : @520 (gas: 7)\n 14650: a1 = 0x200e0\n 14655: i32 a1 = a1 + 0\n 14657: a0 = 0x1\n 14660: a2 = 0\n 14662: ra = 0x1e2\n 14666: ecalli 13 // 'seal_return'\n 14668: fallthrough\n      : @521 [@dyn 241] (gas: 13)\n 14669: sp = sp + 0xffffffffffffffc0\n 14672: u64 [sp + 0x38] = ra\n 14675: u64 [sp + 0x30] = s0\n 14678: u64 [sp + 0x28] = s1\n 14681: s0 = sp + 0x40\n 14684: sp = sp & 0xffffffffffffffe0\n 14687: s1 = a0\n 14689: i32 a0 = sp + 0\n 14691: a1 = 0x4\n 14694: ra = 0x1e4\n 14698: ecalli 2 // 'call_data_load'\n 14700: t0 = 0x1e6\n 14704: jump @656\n      : @522 [@dyn 242] (gas: 1)\n 14707: t0 = 486, jump @656\n      : @523 [@dyn 243] (gas: 1)\n 14713: jump @526 if a3 == 0\n      : @524 (gas: 1)\n 14716: t0 = 488, jump @660\n      : @525 [@dyn 244] (gas: 1)\n 14722: ret\n      : @526 (gas: 7)\n 14724: a1 = 0x200e0\n 14729: i32 a1 = a1 + 0\n 14731: a0 = 0x1\n 14734: a2 = 0\n 14736: ra = 0x1ea\n 14740: ecalli 13 // 'seal_return'\n 14742: fallthrough\n      : @527 [@dyn 245] (gas: 19)\n 14743: sp = sp + 0xffffffffffffff90\n 14746: u64 [sp + 0x68] = ra\n 14749: u64 [sp + 0x60] = s0\n 14752: s0 = sp + 0x70\n 14755: sp = sp & 0xfffffffffffffff0\n 14758: a3 = u64 [a0 + 0x18]\n 14761: a2 = u64 [a0 + 0x10]\n 14764: t1 = u64 [a0]\n 14766: a0 = u64 [a0 + 0x8]\n 14769: a4 = a3 >u 0\n 14771: a5 = a2 >u 0\n 14773: a5 = a4 if a3 != 0\n 14776: t0 = a0 >u 0\n 14778: a4 = t1 <u 0xffffffffffffffe0\n 14781: a4 = a4 ^ 0x1\n 14784: a4 = t0 if a0 != 0\n 14787: a1 = a2 | a3\n 14790: a4 = a5 if a1 != 0\n 14793: jump @530 if a4 != 0\n      : @528 (gas: 15)\n 14796: a1 = t1 + 0x20\n 14799: a4 = a1 <u t1\n 14802: a5 = a0 + a4\n 14805: a0 = a5 <u a0\n 14808: a0 = a4 if a4 == 0\n 14811: a0 = a0 + a2\n 14814: a2 = a0 <u a2\n 14817: a2 = a2 + a3\n 14820: u64 [sp + 0x40] = a1\n 14823: u64 [sp + 0x48] = a5\n 14826: u64 [sp + 0x50] = a0\n 14829: a0 = 0x40\n 14832: a1 = sp + a0\n 14835: u64 [sp + 0x58] = a2\n 14838: ra = 492, jump @9\n      : @529 [@dyn 246] (gas: 5)\n 14844: sp = s0 + 0xffffffffffffff90\n 14847: ra = u64 [sp + 0x68]\n 14850: s0 = u64 [sp + 0x60]\n 14853: sp = sp + 0x70\n 14856: ret\n      : @530 (gas: 8)\n 14858: u64 [sp + 48] = 0\n 14861: u64 [sp + 40] = 0\n 14864: u64 [sp + 32] = 0\n 14867: a0 = 0x4e487b7100000000\n 14877: a1 = sp + 0x20\n 14880: u64 [sp + 0x38] = a0\n 14883: a0 = 0\n 14885: ra = 494, jump @9\n      : @531 [@dyn 247] (gas: 7)\n 14891: u64 [sp + 24] = 0\n 14894: u64 [sp + 16] = 0\n 14897: u64 [sp + 0] = 0x41\n 14900: a0 = 0x4\n 14903: a1 = sp\n 14905: u64 [sp + 8] = 0\n 14908: ra = 496, jump @9\n      : @532 [@dyn 248] (gas: 2)\n 14914: a1 = i32 [0x200d0]\n 14919: jump @534 if a1 >u 63\n      : @533 (gas: 2)\n 14923: u32 [0x200d0] = 0x40\n 14929: fallthrough\n      : @534 (gas: 7)\n 14930: a1 = 0x200e0\n 14935: i32 a1 = a1 + 0\n 14937: a0 = 0x1\n 14940: a2 = 0x24\n 14943: ra = 0x1f2\n 14947: ecalli 13 // 'seal_return'\n 14949: fallthrough\n      : @535 [@dyn 249] (gas: 46)\n 14950: sp = sp + 0xffffffffffffff70\n 14954: u64 [sp + 0x88] = ra\n 14958: u64 [sp + 0x80] = s0\n 14962: u64 [sp + 0x78] = s1\n 14965: s0 = sp + 0x90\n 14969: sp = sp & 0xfffffffffffffff0\n 14972: t0 = a0\n 14974: a2 = u64 [a1]\n 14976: t2 = u64 [a0 + 0x8]\n 14979: a5 = u64 [a1 + 0x8]\n 14982: t1 = u64 [a0]\n 14984: a3 = a2 + 0x1f\n 14987: ra = a3 <u a2\n 14990: a2 = a5 + ra\n 14993: a3 = a3 & 0xffffffffffffffe0\n 14996: u64 [sp + 0x8] = t1\n 14999: t1 = t1 + a3\n 15002: a4 = t1 <u a3\n 15005: a3 = a2 + t2\n 15008: a3 = a3 + a4\n 15011: s1 = a3 ^ a2\n 15014: a0 = a3 <u a2\n 15017: a0 = a4 if s1 == 0\n 15020: a4 = u64 [t0 + 0x18]\n 15023: a5 = a2 <u a5\n 15026: s1 = u64 [a1 + 0x10]\n 15029: t0 = u64 [t0 + 0x10]\n 15032: a1 = u64 [a1 + 0x18]\n 15035: a5 = ra if ra == 0\n 15038: a5 = a5 + s1\n 15041: s1 = a5 <u s1\n 15044: a2 = a5 + t0\n 15047: a0 = a0 + a2\n 15050: a5 = a2 <u a5\n 15053: a2 = a0 <u a2\n 15056: a1 = a1 + a4\n 15059: a1 = a1 + s1\n 15062: a1 = a1 + a5\n 15065: a5 = a1 + a2\n 15068: a1 = a5 >u 0\n 15070: a2 = a0 >u 0\n 15072: a2 = a1 if a5 != 0\n 15075: a1 = a0 | a5\n 15078: s1 = a3 >u 0\n 15080: s1 = a2 if a1 != 0\n 15083: jump @539 if s1 != 0\n      : @536 (gas: 13)\n 15086: a1 = u64 [sp + 0x8]\n 15089: a1 = t1 <u a1\n 15092: a2 = a3 ^ t2\n 15095: s1 = a3 <u t2\n 15098: s1 = a1 if a2 == 0\n 15101: a1 = a0 <u t0\n 15104: a2 = a5 ^ a4\n 15107: a4 = a5 <u a4\n 15110: a4 = a1 if a2 == 0\n 15113: a1 = a0 ^ t0\n 15116: a1 = a1 | a2\n 15119: a4 = s1 if a1 == 0\n 15122: jump @539 if a4 != 0\n      : @537 (gas: 7)\n 15125: u64 [sp + 0x50] = t1\n 15128: u64 [sp + 0x58] = a3\n 15131: u64 [sp + 0x60] = a0\n 15134: a0 = 0x40\n 15137: a1 = sp + 0x50\n 15140: u64 [sp + 0x68] = a5\n 15143: ra = 500, jump @9\n      : @538 [@dyn 250] (gas: 6)\n 15149: sp = s0 + 0xffffffffffffff70\n 15153: ra = u64 [sp + 0x88]\n 15157: s0 = u64 [sp + 0x80]\n 15161: s1 = u64 [sp + 0x78]\n 15164: sp = sp + 0x90\n 15168: ret\n      : @539 (gas: 8)\n 15170: u64 [sp + 64] = 0\n 15173: u64 [sp + 56] = 0\n 15176: u64 [sp + 48] = 0\n 15179: a0 = 0x4e487b7100000000\n 15189: a1 = sp + 0x30\n 15192: u64 [sp + 0x48] = a0\n 15195: a0 = 0\n 15197: ra = 502, jump @9\n      : @540 [@dyn 251] (gas: 7)\n 15203: u64 [sp + 40] = 0\n 15206: u64 [sp + 32] = 0\n 15209: u64 [sp + 16] = 0x41\n 15213: a0 = 0x4\n 15216: a1 = sp + 0x10\n 15219: u64 [sp + 24] = 0\n 15222: ra = 504, jump @9\n      : @541 [@dyn 252] (gas: 2)\n 15228: a1 = i32 [0x200d0]\n 15233: jump @543 if a1 >u 63\n      : @542 (gas: 2)\n 15237: u32 [0x200d0] = 0x40\n 15243: fallthrough\n      : @543 (gas: 7)\n 15244: a1 = 0x200e0\n 15249: i32 a1 = a1 + 0\n 15251: a0 = 0x1\n 15254: a2 = 0x24\n 15257: ra = 0x1fa\n 15261: ecalli 13 // 'seal_return'\n 15263: fallthrough\n      : @544 [@dyn 253] (gas: 9)\n 15264: sp = sp + 0xffffffffffffff20\n 15268: u64 [sp + 0xd8] = ra\n 15272: u64 [sp + 0xd0] = s0\n 15276: u64 [sp + 0xc8] = s1\n 15280: s0 = sp + 0xe0\n 15284: sp = sp & 0xffffffffffffffe0\n 15287: s1 = a0\n 15289: ecalli 12 // 'return_data_size'\n 15291: fallthrough\n      : @545 (gas: 1)\n 15292: jump @558 if a0 == 0\n      : @546 (gas: 6)\n 15296: u64 [sp + 0x18] = s1\n 15299: ecalli 12 // 'return_data_size'\n 15301: s1 = a0\n 15303: a0 = sp + 0xa0\n 15307: a1 = 0x40\n 15310: ra = 508, jump @7\n      : @547 [@dyn 254] (gas: 28)\n 15316: a2 = u64 [sp + 0xb8]\n 15320: a5 = u64 [sp + 0xb0]\n 15324: u64 [sp + 0x38] = a5\n 15327: t0 = u64 [sp + 0xa8]\n 15331: u64 [sp + 0x30] = t0\n 15334: t1 = u64 [sp + 0xa0]\n 15338: u64 [sp + 0x28] = t1\n 15341: a0 = s1 + 0x1f\n 15344: u64 [sp + 0x20] = s1\n 15347: a1 = a0 <u s1\n 15350: s1 = a2\n 15352: a0 = a0 & 0xffffffffffffffe0\n 15355: a2 = a0 + 0x20\n 15358: a0 = a2 <u a0\n 15361: a3 = a1 + a0\n 15364: a4 = a3 <u a1\n 15367: a4 = a0 if a0 == 0\n 15370: u64 [sp + 120] = 0\n 15373: u64 [sp + 0x60] = a2\n 15376: u64 [sp + 0x98] = s1\n 15380: u64 [sp + 0x90] = a5\n 15384: u64 [sp + 0x88] = t0\n 15388: u64 [sp + 0x80] = t1\n 15392: u64 [sp + 0x68] = a3\n 15395: a0 = sp + 0x80\n 15399: a1 = sp + 0x60\n 15402: u64 [sp + 0x70] = a4\n 15405: ra = 510, jump @535\n      : @548 [@dyn 255] (gas: 5)\n 15411: a0 = u64 [sp + 0x28]\n 15414: a2 = u64 [sp + 0x30]\n 15417: a2 = a2 | s1\n 15420: a3 = u64 [sp + 0x38]\n 15423: t0 = 512, jump @667\n      : @549 [@dyn 256] (gas: 1)\n 15429: jump @557 if a1 != 0\n      : @550 (gas: 7)\n 15433: u64 [sp + 88] = 0\n 15436: u64 [sp + 80] = 0\n 15439: u64 [sp + 72] = 0\n 15442: a1 = sp + 0x40\n 15445: a2 = u64 [sp + 0x20]\n 15448: u64 [sp + 0x40] = a2\n 15451: ra = 514, jump @9\n      : @551 [@dyn 257] (gas: 2)\n 15457: ecalli 12 // 'return_data_size'\n 15459: fallthrough\n      : @552 (gas: 10)\n 15460: a3 = u64 [sp + 0x28]\n 15463: u64 [sp + 0x20] = s1\n 15466: a1 = u64 [sp + 0x38]\n 15469: a1 = a1 | s1\n 15472: a2 = 0xffffffe0\n 15482: a2 = a3 <u a2\n 15485: a4 = u64 [sp + 0x30]\n 15488: a2 = 0 if a4 != 0\n 15490: a2 = 0 if a1 != 0\n 15492: jump @557 if a2 == 0\n      : @553 (gas: 3)\n 15495: s1 = a0\n 15497: a0 = a0 >> 0x20\n 15500: jump @557 if a0 != 0\n      : @554 (gas: 5)\n 15503: i32 a0 = a3 + 0x20\n 15506: i32 a1 = s1 + 0\n 15508: u64 [sp + 0x10] = a1\n 15511: a1 = s1\n 15513: ra = 516, jump @16\n      : @555 [@dyn 258] (gas: 6)\n 15519: u32 [sp + 0xc0] = s1\n 15523: i32 a0 = a0 + 0\n 15525: i32 a1 = sp + 0xc0\n 15529: a2 = 0\n 15531: ecalli 11 // 'return_data_copy'\n 15533: fallthrough\n      : @556 (gas: 8)\n 15534: a4 = u64 [sp + 0x28]\n 15537: a0 = i32 [sp + 0xc0]\n 15541: s1 = u64 [sp + 0x18]\n 15544: a1 = u64 [sp + 0x20]\n 15547: a2 = u64 [sp + 0x38]\n 15550: a3 = u64 [sp + 0x30]\n 15553: a5 = u64 [sp + 0x10]\n 15556: jump @559 if a0 >=u a5\n      : @557 (gas: 1)\n 15559: trap\n      : @558 (gas: 5)\n 15560: a3 = 0\n 15562: a2 = 0\n 15564: a1 = 0\n 15566: a4 = 0x60\n 15569: fallthrough\n      : @559 (gas: 10)\n 15570: u64 [s1] = a4\n 15572: u64 [s1 + 0x8] = a3\n 15575: u64 [s1 + 0x10] = a2\n 15578: u64 [s1 + 0x18] = a1\n 15581: sp = s0 + 0xffffffffffffff20\n 15585: ra = u64 [sp + 0xd8]\n 15589: s0 = u64 [sp + 0xd0]\n 15593: s1 = u64 [sp + 0xc8]\n 15597: sp = sp + 0xe0\n 15601: ret\n      : @560 (gas: 13)\n 15603: sp = sp + 0xffffffffffffff40\n 15607: u64 [sp + 0xb8] = ra\n 15611: u64 [sp + 0xb0] = s0\n 15615: u64 [sp + 0xa8] = s1\n 15619: s0 = sp + 0xc0\n 15623: sp = sp & 0xffffffffffffffe0\n 15626: u64 [sp + 152] = 0\n 15630: u64 [sp + 144] = 0\n 15634: u64 [sp + 136] = 0\n 15638: u64 [sp + 128] = 0\n 15642: a0 = sp + 0x60\n 15645: a1 = sp + 0x80\n 15649: ra = 518, jump @11\n      : @561 [@dyn 259] (gas: 12)\n 15655: a0 = u64 [sp + 0x68]\n 15658: u64 [sp + 0x18] = a0\n 15661: a0 = u64 [sp + 0x60]\n 15664: u64 [sp + 0x10] = a0\n 15667: a0 = u32 [sp + 0x70]\n 15670: u64 [sp + 0x8] = a0\n 15673: s1 = 0x300e0\n 15678: i32 a0 = s1 + 0\n 15680: u64 [sp] = a0\n 15682: ra = 0x208\n 15686: ecalli 4 // 'caller'\n 15688: fallthrough\n      : @562 [@dyn 260] (gas: 4)\n 15689: a0 = u64 [s1 + 0x8]\n 15692: a1 = u64 [s1]\n 15694: a2 = i32 [s1 + 0x10]\n 15697: t0 = 522, jump @655\n      : @563 [@dyn 261] (gas: 9)\n 15703: a2 = u64 [sp + 0x8]\n 15706: a1 = a1 ^ a2\n 15709: a2 = u64 [sp + 0x10]\n 15712: a0 = a0 ^ a2\n 15715: a0 = a0 | a1\n 15718: a1 = u64 [sp + 0x18]\n 15721: a1 = a1 ^ a3\n 15724: a0 = a0 | a1\n 15727: jump @565 if a0 != 0\n      : @564 (gas: 6)\n 15730: sp = s0 + 0xffffffffffffff40\n 15734: ra = u64 [sp + 0xb8]\n 15738: s0 = u64 [sp + 0xb0]\n 15742: s1 = u64 [sp + 0xa8]\n 15746: sp = sp + 0xc0\n 15750: ret\n      : @565 (gas: 8)\n 15752: u64 [sp + 80] = 0\n 15755: u64 [sp + 72] = 0\n 15758: u64 [sp + 64] = 0\n 15761: a0 = 0x118cdaa700000000\n 15771: a1 = sp + 0x40\n 15774: u64 [sp + 0x58] = a0\n 15777: a0 = 0\n 15779: ra = 524, jump @9\n      : @566 [@dyn 262] (gas: 4)\n 15785: a0 = u64 [sp]\n 15787: ra = 0x20e\n 15791: ecalli 4 // 'caller'\n 15793: fallthrough\n      : @567 [@dyn 263] (gas: 4)\n 15794: a0 = u64 [s1 + 0x8]\n 15797: a1 = i32 [s1 + 0x10]\n 15800: a2 = u64 [s1]\n 15802: t0 = 528, jump @649\n      : @568 [@dyn 264] (gas: 7)\n 15808: u64 [sp + 56] = 0\n 15811: u64 [sp + 0x30] = a1\n 15814: u64 [sp + 0x28] = a0\n 15817: a0 = 0x4\n 15820: a1 = sp + 0x20\n 15823: u64 [sp + 0x20] = a3\n 15826: ra = 530, jump @9\n      : @569 [@dyn 265] (gas: 2)\n 15832: a1 = i32 [0x200d0]\n 15837: jump @571 if a1 >u 63\n      : @570 (gas: 2)\n 15841: u32 [0x200d0] = 0x40\n 15847: fallthrough\n      : @571 (gas: 7)\n 15848: a1 = 0x200e0\n 15853: i32 a1 = a1 + 0\n 15855: a0 = 0x1\n 15858: a2 = 0x24\n 15861: ra = 0x214\n 15865: ecalli 13 // 'seal_return'\n 15867: fallthrough\n      : @572 [@dyn 266] (gas: 26)\n 15868: sp = sp + 0xfffffffffffffb20\n 15872: a3 = sp + 0x400\n 15876: u64 [a3 + 0xd8] = ra\n 15880: u64 [a3 + 0xd0] = s0\n 15884: u64 [a3 + 0xc8] = s1\n 15888: s0 = sp + 0x4e0\n 15892: sp = sp & 0xffffffffffffffe0\n 15895: s1 = sp\n 15897: a3 = u64 [a2 + 0x18]\n 15900: u64 [s1 + 0x78] = a3\n 15903: a3 = u64 [a2 + 0x10]\n 15906: u64 [s1 + 0x80] = a3\n 15910: a3 = u64 [a2 + 0x8]\n 15913: u64 [s1 + 0x88] = a3\n 15917: a2 = u64 [a2]\n 15919: u64 [s1 + 0x90] = a2\n 15923: a2 = u64 [a1 + 0x10]\n 15926: u64 [s1 + 0x48] = a2\n 15929: a2 = u64 [a1 + 0x8]\n 15932: u64 [s1 + 0x58] = a2\n 15935: a1 = u64 [a1]\n 15937: u64 [s1 + 0x50] = a1\n 15940: u64 [s1 + 0x28] = a0\n 15943: a0 = s1 + 0x3a0\n 15947: a1 = 0x40\n 15950: ra = 534, jump @7\n      : @573 [@dyn 267] (gas: 15)\n 15956: a4 = s1 + 0x300\n 15960: a0 = u64 [a4 + 0xb8]\n 15964: u64 [s1 + 0x98] = a0\n 15968: a1 = u64 [a4 + 0xb0]\n 15972: u64 [s1 + 0x68] = a1\n 15975: a2 = u64 [a4 + 0xa8]\n 15979: u64 [s1 + 0x60] = a2\n 15982: a3 = u64 [a4 + 0xa0]\n 15986: u64 [s1 + 0x70] = a3\n 15989: u64 [a4 + 0x98] = a0\n 15993: u64 [a4 + 0x90] = a1\n 15997: u64 [a4 + 0x88] = a2\n 16001: a0 = s1 + 0x380\n 16005: u64 [a4 + 0x80] = a3\n 16009: ra = 536, jump @527\n      : @574 [@dyn 268] (gas: 6)\n 16015: a0 = u64 [s1 + 0x70]\n 16018: a1 = u64 [s1 + 0x98]\n 16022: a2 = u64 [s1 + 0x60]\n 16025: a2 = a2 | a1\n 16028: a3 = u64 [s1 + 0x68]\n 16031: t0 = 538, jump @667\n      : @575 [@dyn 269] (gas: 1)\n 16037: jump @638 if a1 != 0\n      : @576 (gas: 13)\n 16041: a1 = 0xffffffff\n 16051: u64 [s1 + 0x68] = a1\n 16054: a1 = u64 [s1 + 0x48]\n 16057: a1 = a1 << 0x20\n 16060: a2 = a1 >> 0x20\n 16063: u64 [s1 + 888] = 0\n 16067: a1 = u64 [s1 + 0x50]\n 16070: u64 [s1 + 0x360] = a1\n 16074: a1 = u64 [s1 + 0x58]\n 16077: u64 [s1 + 0x368] = a1\n 16081: a1 = s1 + 0x360\n 16085: u64 [s1 + 0x370] = a2\n 16089: ra = 540, jump @9\n      : @577 [@dyn 270] (gas: 11)\n 16095: a0 = u64 [s1 + 0x78]\n 16098: u64 [s1 + 0x358] = a0\n 16102: a0 = u64 [s1 + 0x80]\n 16106: u64 [s1 + 0x350] = a0\n 16110: a0 = u64 [s1 + 0x88]\n 16114: u64 [s1 + 0x348] = a0\n 16118: a1 = s1 + 0x340\n 16122: a0 = u64 [s1 + 0x90]\n 16126: u64 [s1 + 0x340] = a0\n 16130: a0 = 0\n 16132: ra = 542, jump @9\n      : @578 [@dyn 271] (gas: 7)\n 16138: u64 [s1 + 824] = 0\n 16142: u64 [s1 + 816] = 0\n 16146: u64 [s1 + 800] = 0x3\n 16151: a0 = 0x20\n 16154: a1 = s1 + 0x320\n 16158: u64 [s1 + 808] = 0\n 16162: ra = 544, jump @9\n      : @579 [@dyn 272] (gas: 6)\n 16168: a0 = sp + 0xffffffffffffffe0\n 16171: a0 = a0 & 0xffffffffffffffe0\n 16174: u64 [s1 + 0x98] = a0\n 16178: sp = a0\n 16180: a1 = i32 [0x200d0]\n 16185: jump @581 if a1 >u 63\n      : @580 (gas: 2)\n 16189: u32 [0x200d0] = 0x40\n 16195: fallthrough\n      : @581 (gas: 14)\n 16196: a0 = sp + 0xffffffffffffffe0\n 16199: a2 = a0 & 0xffffffffffffffe0\n 16202: u64 [s1 + 0x60] = a2\n 16205: sp = a2\n 16207: a0 = 0x200e0\n 16212: i32 a0 = a0 + 0\n 16214: i32 a2 = a2 + 0\n 16216: a1 = 0x40\n 16219: u64 [s1 + 0x18] = a0\n 16222: ra = 0x222\n 16226: ecalli 9 // 'hash_keccak_256'\n 16228: a3 = u64 [s1 + 0x60]\n 16231: t0 = 0x224\n 16235: jump @659\n      : @582 [@dyn 273] (gas: 2)\n 16238: a3 = u64 [s1 + 0x60]\n 16241: t0 = 548, jump @659\n      : @583 [@dyn 274] (gas: 8)\n 16247: a4 = u64 [s1 + 0x98]\n 16251: u64 [a4 + 0x18] = a3\n 16254: u64 [a4 + 0x10] = a2\n 16257: u64 [a4 + 0x8] = a1\n 16260: u64 [a4] = a0\n 16262: a0 = s1 + 0x300\n 16266: a1 = u64 [s1 + 0x70]\n 16269: ra = 550, jump @7\n      : @584 [@dyn 275] (gas: 13)\n 16275: a0 = u64 [s1 + 0x300]\n 16279: a1 = u64 [s1 + 0x308]\n 16283: a2 = u64 [s1 + 0x310]\n 16287: a0 = a0 & 0xffffffffffffffff\n 16290: u64 [s1 + 0x70] = a0\n 16293: a1 = a1 & 0xffffffffffffffff\n 16296: u64 [s1 + 0x60] = a1\n 16299: a0 = u64 [s1 + 0x68]\n 16302: a0 = a0 & a2\n 16305: u64 [s1 + 0x68] = a0\n 16308: a0 = s1 + 0x2e0\n 16312: a1 = u64 [s1 + 0x98]\n 16316: ra = 552, jump @11\n      : @585 [@dyn 276] (gas: 15)\n 16322: a0 = u32 [s1 + 0x2f4]\n 16326: a0 = a0 << 0x20\n 16329: a1 = u64 [s1 + 0x2f8]\n 16333: a2 = u64 [s1 + 0x68]\n 16336: a0 = a0 | a2\n 16339: a2 = u64 [s1 + 0x60]\n 16342: a3 = s1 + 0x300\n 16346: u64 [a3 + 0xc8] = a2\n 16350: a2 = u64 [s1 + 0x70]\n 16353: u64 [a3 + 0xc0] = a2\n 16357: u64 [a3 + 0xd8] = a1\n 16361: u64 [a3 + 0xd0] = a0\n 16365: a1 = s1 + 0x3c0\n 16369: a0 = u64 [s1 + 0x98]\n 16373: ra = 554, jump @12\n      : @586 [@dyn 277] (gas: 1)\n 16379: ra = 556, jump @0\n      : @587 [@dyn 278] (gas: 9)\n 16385: a1 = u64 [0x30110]\n 16390: u64 [s1 + 0x48] = a1\n 16393: a1 = u64 [0x30108]\n 16398: u64 [s1 + 0x40] = a1\n 16401: a0 = u64 [0x30100]\n 16406: u64 [s1 + 0x70] = a0\n 16409: a0 = s1 + 0x2c0\n 16413: a1 = 0x40\n 16416: ra = 558, jump @7\n      : @588 [@dyn 279] (gas: 16)\n 16422: a4 = s1 + 0x200\n 16426: a2 = u64 [a4 + 0xd8]\n 16430: a3 = u64 [a4 + 0xd0]\n 16434: a1 = u64 [a4 + 0xc8]\n 16438: a0 = u64 [a4 + 0xc0]\n 16442: u64 [s1 + 0x58] = a1\n 16445: u64 [s1 + 0x68] = a2\n 16448: a2 = a2 | a1\n 16451: a1 = a0 | a3\n 16454: a1 = a1 | a2\n 16457: a1 = a1 >> 0x20\n 16460: u64 [s1 + 0x60] = a3\n 16463: a2 = a2 | a3\n 16466: a2 = a2 << 0x20\n 16469: a1 = a1 | a2\n 16472: jump @638 if a1 != 0\n      : @589 (gas: 8)\n 16476: u64 [s1 + 688] = 0\n 16480: u64 [s1 + 680] = 0\n 16484: u64 [s1 + 672] = 0\n 16488: a2 = 0xb9186d7d00000000\n 16498: a1 = s1 + 0x2a0\n 16502: u64 [s1 + 0x2b8] = a2\n 16506: u64 [s1 + 0x98] = a0\n 16510: ra = 560, jump @9\n      : @590 [@dyn 280] (gas: 10)\n 16516: a2 = u64 [s1 + 0x98]\n 16520: a0 = u64 [s1 + 0x68]\n 16523: a1 = u64 [s1 + 0x60]\n 16526: a0 = a0 | a1\n 16529: a1 = 0xfffffffc\n 16539: a1 = a2 <u a1\n 16542: a3 = u64 [s1 + 0x58]\n 16545: a1 = 0 if a3 != 0\n 16547: a1 = 0 if a0 != 0\n 16549: jump @638 if a1 == 0\n      : @591 (gas: 14)\n 16553: a0 = 0x2400000000\n 16563: u64 [s1 + 0x50] = a0\n 16566: i32 a0 = a2 + 0x4\n 16569: a1 = u64 [s1 + 0x90]\n 16573: a3 = s1 + 0x200\n 16577: u64 [a3 + 0x80] = a1\n 16581: a1 = u64 [s1 + 0x88]\n 16585: u64 [a3 + 0x88] = a1\n 16589: a1 = u64 [s1 + 0x80]\n 16593: u64 [a3 + 0x90] = a1\n 16597: a1 = s1 + 0x280\n 16601: a2 = u64 [s1 + 0x78]\n 16604: u64 [a3 + 0x98] = a2\n 16608: ra = 562, jump @9\n      : @592 [@dyn 281] (gas: 29)\n 16614: ecalli 10 // 'ref_time_left'\n 16616: a0 = u64 [s1 + 0x40]\n 16619: a0 = reverse a0\n 16621: a1 = a0 << 0x20\n 16624: a2 = u64 [s1 + 0x48]\n 16627: a2 = reverse a2\n 16629: a2 = a2 >> 0x20\n 16632: a4 = a2 | a1\n 16635: a1 = u64 [s1 + 0x70]\n 16638: a1 = reverse a1\n 16640: a2 = a1 << 0x20\n 16643: a3 = 0x300e0\n 16648: u64 [s1 + 0x70] = a3\n 16651: a0 = a0 >> 0x20\n 16654: a0 = a0 | a2\n 16657: a1 = a1 >> 0x20\n 16660: u64 [s1 + 0x38] = a0\n 16663: u64 [0x300e8] = a0\n 16668: u64 [s1 + 0x48] = a4\n 16671: u64 [0x300e0] = a4\n 16676: u64 [s1 + 0x40] = a1\n 16679: u32 [0x300f0] = a1\n 16684: u64 [s1 + 1016] = 0\n 16688: u64 [s1 + 1008] = 0\n 16692: u64 [s1 + 1000] = 0\n 16696: u64 [s1 + 992] = 0\n 16700: a1 = 0x24\n 16703: a0 = u64 [s1 + 0x98]\n 16707: ra = 564, jump @16\n      : @593 [@dyn 282] (gas: 4)\n 16713: u64 [s1 + 0x30] = a0\n 16716: a1 = 0x20\n 16719: a0 = u64 [s1 + 0x98]\n 16723: ra = 566, jump @16\n      : @594 [@dyn 283] (gas: 32)\n 16729: u32 [s1 + 1024] = 0x20\n 16734: u64 [s1 + 1080] = 0\n 16738: u64 [s1 + 1072] = 0\n 16742: u64 [s1 + 1064] = 0\n 16746: u64 [s1 + 1056] = 0\n 16750: a1 = u64 [s1 + 0x70]\n 16753: a1 = a1 << 0x20\n 16756: a2 = a1 >> 0x20\n 16759: a1 = 0x1800000000\n 16769: u64 [s1 + 0x20] = a2\n 16772: t0 = a2 | a1\n 16775: a1 = s1 + 0x3e0\n 16779: a1 = a1 << 0x20\n 16782: a1 = a1 >> 0x20\n 16785: a2 = s1 + 0x420\n 16789: a2 = a2 << 0x20\n 16792: a3 = a2 | a1\n 16795: a1 = u64 [s1 + 0x30]\n 16798: a1 = a1 << 0x20\n 16801: a1 = a1 >> 0x20\n 16804: a4 = u64 [s1 + 0x50]\n 16807: a4 = a4 | a1\n 16810: a0 = a0 << 0x20\n 16813: a0 = a0 >> 0x20\n 16816: a1 = s1 + 0x400\n 16820: a1 = a1 << 0x20\n 16823: a5 = a1 | a0\n 16826: a1 = 0xffffffffffffffff\n 16829: a2 = 0xffffffffffffffff\n 16832: a0 = t0\n 16834: ecalli 0 // 'call'\n 16835: fallthrough\n      : @595 (gas: 1)\n 16836: jump @621 if a0 != 0\n      : @596 (gas: 2)\n 16840: ecalli 12 // 'return_data_size'\n 16842: fallthrough\n      : @597 (gas: 2)\n 16843: a4 = 0x20\n 16846: jump @599 if a0 >=u a4\n      : @598 (gas: 3)\n 16849: ecalli 12 // 'return_data_size'\n 16851: a4 = a0\n 16853: fallthrough\n      : @599 (gas: 18)\n 16854: a2 = u64 [s1 + 0x98]\n 16858: a3 = u64 [s1 + 0x68]\n 16861: a0 = u64 [s1 + 0x60]\n 16864: a1 = u64 [s1 + 0x58]\n 16867: u64 [s1 + 96] = 0\n 16870: u64 [s1 + 0x68] = a4\n 16873: a5 = s1 + 0x200\n 16877: u64 [a5 + 0x20] = a4\n 16880: u64 [a5 + 0x40] = a2\n 16883: u64 [s1 + 552] = 0\n 16887: u64 [a5 + 0x48] = a1\n 16890: u64 [s1 + 560] = 0\n 16894: u64 [a5 + 0x50] = a0\n 16897: u64 [s1 + 568] = 0\n 16901: a0 = s1 + 0x240\n 16905: a1 = s1 + 0x220\n 16909: u64 [a5 + 0x58] = a3\n 16912: ra = 568, jump @535\n      : @600 [@dyn 284] (gas: 4)\n 16918: a3 = u64 [s1 + 0x60]\n 16921: a0 = a3 >u 0\n 16923: a1 = u64 [s1 + 0x68]\n 16926: t0 = 570, jump @648\n      : @601 [@dyn 285] (gas: 1)\n 16932: jump @639 if a2 == 0\n      : @602 (gas: 3)\n 16936: a0 = s1 + 0x200\n 16940: a1 = u64 [s1 + 0x98]\n 16944: ra = 572, jump @7\n      : @603 [@dyn 286] (gas: 12)\n 16950: a1 = s1 + 0x200\n 16954: a0 = u64 [a1 + 0x18]\n 16957: u64 [s1 + 0x98] = a0\n 16961: a0 = u64 [a1 + 0x10]\n 16964: u64 [s1 + 0x68] = a0\n 16967: a0 = u64 [a1 + 0x8]\n 16970: u64 [s1 + 0x60] = a0\n 16973: a0 = u64 [a1]\n 16975: u64 [s1 + 0x58] = a0\n 16978: a0 = s1 + 0x1e0\n 16982: a1 = 0x40\n 16985: ra = 574, jump @7\n      : @604 [@dyn 287] (gas: 6)\n 16991: a4 = s1 + 0x100\n 16995: a3 = u64 [a4 + 0xf8]\n 16999: a1 = u64 [a4 + 0xf0]\n 17003: a2 = u64 [a4 + 0xe8]\n 17007: a0 = u64 [a4 + 0xe0]\n 17011: t0 = 576, jump @653\n      : @605 [@dyn 288] (gas: 1)\n 17017: jump @638 if a1 != 0\n      : @606 (gas: 11)\n 17021: a1 = u64 [s1 + 0x58]\n 17024: u64 [s1 + 0x1c0] = a1\n 17028: a1 = u64 [s1 + 0x60]\n 17031: u64 [s1 + 0x1c8] = a1\n 17035: a1 = u64 [s1 + 0x68]\n 17038: u64 [s1 + 0x1d0] = a1\n 17042: a1 = s1 + 0x1c0\n 17046: a2 = u64 [s1 + 0x98]\n 17050: u64 [s1 + 0x1d8] = a2\n 17054: u64 [s1 + 0x98] = a0\n 17058: ra = 578, jump @9\n      : @607 [@dyn 289] (gas: 27)\n 17064: a2 = u64 [s1 + 0x78]\n 17067: a5 = s1 + 0x100\n 17071: u64 [a5 + 0x78] = a2\n 17074: a1 = u64 [s1 + 0x80]\n 17078: u64 [a5 + 0x70] = a1\n 17081: a0 = u64 [s1 + 0x88]\n 17085: u64 [a5 + 0x68] = a0\n 17088: a3 = u64 [s1 + 0x90]\n 17092: u64 [a5 + 0x60] = a3\n 17095: u64 [a5 + 0x98] = a2\n 17099: u64 [a5 + 0x90] = a1\n 17103: u64 [a5 + 0x88] = a0\n 17107: a0 = u64 [0x200a8]\n 17112: a1 = u64 [0x200b0]\n 17117: a2 = u64 [0x200b8]\n 17122: u64 [a5 + 0x80] = a3\n 17126: u64 [a5 + 0xb8] = a0\n 17130: u64 [a5 + 0xb0] = a1\n 17134: u64 [a5 + 0xa8] = a2\n 17138: a0 = u64 [0x200c0]\n 17143: a1 = 0x20\n 17146: a2 = s1 + 0x1a0\n 17150: a3 = s1 + 0x180\n 17154: a4 = s1 + 0x160\n 17158: u64 [a5 + 0xa0] = a0\n 17162: a0 = u64 [s1 + 0x98]\n 17166: ra = 580, jump @13\n      : @608 [@dyn 290] (gas: 10)\n 17172: a1 = u64 [s1 + 0x70]\n 17175: a0 = u64 [s1 + 0x38]\n 17178: u64 [a1 + 0x8] = a0\n 17181: a0 = u64 [s1 + 0x48]\n 17184: u64 [a1] = a0\n 17186: a0 = u64 [s1 + 0x40]\n 17189: u32 [a1 + 0x10] = a0\n 17192: i32 a0 = a1 + 0\n 17194: ecalli 5 // 'code_size'\n 17196: fallthrough\n      : @609 (gas: 1)\n 17197: jump @640 if a0 == 0\n      : @610 (gas: 3)\n 17201: a0 = s1 + 0x140\n 17205: a1 = 0x40\n 17208: ra = 582, jump @7\n      : @611 [@dyn 291] (gas: 17)\n 17214: a4 = s1 + 0x100\n 17218: a2 = u64 [a4 + 0x58]\n 17221: a3 = u64 [a4 + 0x50]\n 17224: a0 = u64 [a4 + 0x48]\n 17227: a1 = u64 [a4 + 0x40]\n 17230: u64 [s1 + 0x58] = a0\n 17233: u64 [s1 + 0x68] = a2\n 17236: a0 = a0 | a2\n 17239: u64 [s1 + 0x98] = a1\n 17243: a1 = a1 | a3\n 17246: a1 = a1 | a0\n 17249: a1 = a1 >> 0x20\n 17252: u64 [s1 + 0x60] = a3\n 17255: a0 = a0 | a3\n 17258: a0 = a0 << 0x20\n 17261: a0 = a0 | a1\n 17264: jump @638 if a0 != 0\n      : @612 (gas: 8)\n 17268: u64 [s1 + 304] = 0\n 17272: u64 [s1 + 296] = 0\n 17276: u64 [s1 + 288] = 0\n 17280: a0 = 0x5aa5a48800000000\n 17290: a1 = s1 + 0x120\n 17294: u64 [s1 + 0x138] = a0\n 17298: a0 = u64 [s1 + 0x98]\n 17302: ra = 584, jump @9\n      : @613 [@dyn 292] (gas: 10)\n 17308: a0 = u64 [s1 + 0x68]\n 17311: a1 = u64 [s1 + 0x60]\n 17314: a0 = a0 | a1\n 17317: a1 = 0xfffffffc\n 17327: a2 = u64 [s1 + 0x98]\n 17331: a1 = a2 <u a1\n 17334: a2 = u64 [s1 + 0x58]\n 17337: a1 = 0 if a2 != 0\n 17339: a1 = 0 if a0 != 0\n 17341: jump @638 if a1 == 0\n      : @614 (gas: 13)\n 17345: a0 = u64 [s1 + 0x98]\n 17349: i32 a0 = a0 + 0x4\n 17352: a1 = u64 [s1 + 0x90]\n 17356: a3 = s1 + 0x100\n 17360: u64 [a3] = a1\n 17362: a1 = u64 [s1 + 0x88]\n 17366: u64 [a3 + 0x8] = a1\n 17369: a1 = u64 [s1 + 0x80]\n 17373: u64 [a3 + 0x10] = a1\n 17376: a1 = s1 + 0x100\n 17380: a2 = u64 [s1 + 0x78]\n 17383: u64 [a3 + 0x18] = a2\n 17386: ra = 586, jump @9\n      : @615 [@dyn 293] (gas: 15)\n 17392: ecalli 10 // 'ref_time_left'\n 17394: a1 = u64 [s1 + 0x70]\n 17397: a0 = u64 [s1 + 0x38]\n 17400: u64 [a1 + 0x8] = a0\n 17403: a0 = u64 [s1 + 0x48]\n 17406: u64 [a1] = a0\n 17408: a0 = u64 [s1 + 0x40]\n 17411: u32 [a1 + 0x10] = a0\n 17414: u64 [s1 + 1144] = 0\n 17418: u64 [s1 + 1136] = 0\n 17422: u64 [s1 + 1128] = 0\n 17426: u64 [s1 + 1120] = 0\n 17430: a1 = 0x24\n 17433: a0 = u64 [s1 + 0x98]\n 17437: ra = 588, jump @16\n      : @616 [@dyn 294] (gas: 4)\n 17443: u64 [s1 + 0x70] = a0\n 17446: a0 = u64 [s1 + 0x98]\n 17450: a1 = 0\n 17452: ra = 590, jump @16\n      : @617 [@dyn 295] (gas: 30)\n 17458: u32 [s1 + 1152] = 0\n 17462: a2 = s1 + 0x400\n 17466: u64 [a2 + 184] = 0xffffffffffffffff\n 17471: u64 [a2 + 176] = 0xffffffffffffffff\n 17476: u64 [a2 + 168] = 0xffffffffffffffff\n 17481: u64 [a2 + 160] = 0xffffffffffffffff\n 17486: a1 = 0x800000000\n 17496: a2 = u64 [s1 + 0x20]\n 17499: t0 = a2 | a1\n 17502: a1 = s1 + 0x460\n 17506: a1 = a1 << 0x20\n 17509: a1 = a1 >> 0x20\n 17512: a2 = s1 + 0x4a0\n 17516: a2 = a2 << 0x20\n 17519: a3 = a2 | a1\n 17522: a1 = u64 [s1 + 0x70]\n 17525: a1 = a1 << 0x20\n 17528: a1 = a1 >> 0x20\n 17531: a4 = u64 [s1 + 0x50]\n 17534: a4 = a4 | a1\n 17537: a0 = a0 << 0x20\n 17540: a0 = a0 >> 0x20\n 17543: a1 = s1 + 0x480\n 17547: a1 = a1 << 0x20\n 17550: a5 = a1 | a0\n 17553: a1 = 0xffffffffffffffff\n 17556: a2 = 0xffffffffffffffff\n 17559: a0 = t0\n 17561: ecalli 0 // 'call'\n 17562: fallthrough\n      : @618 (gas: 1)\n 17563: jump @628 if a0 != 0\n      : @619 (gas: 15)\n 17567: u64 [s1 + 184] = 0\n 17571: u64 [s1 + 176] = 0\n 17575: u64 [s1 + 168] = 0\n 17579: u64 [s1 + 160] = 0\n 17583: a0 = u64 [s1 + 0x98]\n 17587: u64 [s1 + 0xc0] = a0\n 17591: a0 = u64 [s1 + 0x58]\n 17594: u64 [s1 + 0xc8] = a0\n 17598: a0 = u64 [s1 + 0x60]\n 17601: u64 [s1 + 0xd0] = a0\n 17605: a0 = s1 + 0xc0\n 17609: a1 = s1 + 0xa0\n 17613: a2 = u64 [s1 + 0x68]\n 17616: u64 [s1 + 0xd8] = a2\n 17620: ra = 592, jump @535\n      : @620 [@dyn 296] (gas: 16)\n 17626: a0 = u64 [s1 + 0x28]\n 17629: a1 = u64 [s1 + 0x78]\n 17632: u64 [a0 + 0x18] = a1\n 17635: a1 = u64 [s1 + 0x80]\n 17639: u64 [a0 + 0x10] = a1\n 17642: a1 = u64 [s1 + 0x88]\n 17646: u64 [a0 + 0x8] = a1\n 17649: a1 = u64 [s1 + 0x90]\n 17653: u64 [a0] = a1\n 17655: sp = s0 + 0xfffffffffffffb20\n 17659: a0 = sp + 0x400\n 17663: ra = u64 [a0 + 0xd8]\n 17667: s0 = u64 [a0 + 0xd0]\n 17671: s1 = u64 [a0 + 0xc8]\n 17675: sp = sp + 0x4e0\n 17679: ret\n      : @621 (gas: 3)\n 17681: a0 = s1 + 0x260\n 17685: a1 = 0x40\n 17688: ra = 594, jump @7\n      : @622 [@dyn 297] (gas: 13)\n 17694: a1 = s1 + 0x200\n 17698: a0 = u64 [a1 + 0x78]\n 17701: u64 [s1 + 0x90] = a0\n 17705: a0 = u64 [a1 + 0x70]\n 17708: u64 [s1 + 0x88] = a0\n 17712: a0 = u64 [a1 + 0x68]\n 17715: u64 [s1 + 0x80] = a0\n 17719: a0 = u64 [a1 + 0x60]\n 17722: u64 [s1 + 0x98] = a0\n 17726: ra = 0x254\n 17730: ecalli 12 // 'return_data_size'\n 17732: t0 = 0x256\n 17736: jump @662\n      : @623 [@dyn 298] (gas: 1)\n 17739: t0 = 598, jump @662\n      : @624 [@dyn 299] (gas: 1)\n 17745: jump @638 if a1 != 0\n      : @625 (gas: 2)\n 17749: a1 = a0 >> 0x20\n 17752: jump @638 if a1 != 0\n      : @626 (gas: 6)\n 17756: a1 = a0\n 17758: u64 [s1 + 0x88] = a0\n 17762: i32 a0 = a0 + 0\n 17764: u64 [s1 + 0x90] = a0\n 17768: a0 = u64 [s1 + 0x98]\n 17772: ra = 600, jump @16\n      : @627 [@dyn 300] (gas: 8)\n 17778: a1 = u64 [s1 + 0x88]\n 17782: u32 [s1 + 0x440] = a1\n 17786: i32 a0 = a0 + 0\n 17788: i32 a1 = s1 + 0x440\n 17792: a2 = 0\n 17794: ecalli 11 // 'return_data_copy'\n 17796: a0 = i32 [s1 + 0x440]\n 17800: jump @635\n      : @628 (gas: 3)\n 17802: a0 = s1 + 0xe0\n 17806: a1 = 0x40\n 17809: ra = 602, jump @7\n      : @629 [@dyn 301] (gas: 12)\n 17815: a0 = u64 [s1 + 0xf8]\n 17819: u64 [s1 + 0x90] = a0\n 17823: a0 = u64 [s1 + 0xf0]\n 17827: u64 [s1 + 0x88] = a0\n 17831: a0 = u64 [s1 + 0xe8]\n 17835: u64 [s1 + 0x80] = a0\n 17839: a0 = u64 [s1 + 0xe0]\n 17843: u64 [s1 + 0x98] = a0\n 17847: ra = 0x25c\n 17851: ecalli 12 // 'return_data_size'\n 17853: t0 = 0x25e\n 17857: jump @662\n      : @630 [@dyn 302] (gas: 1)\n 17860: t0 = 606, jump @662\n      : @631 [@dyn 303] (gas: 1)\n 17866: jump @638 if a1 != 0\n      : @632 (gas: 2)\n 17869: a1 = a0 >> 0x20\n 17872: jump @638 if a1 != 0\n      : @633 (gas: 6)\n 17875: a1 = a0\n 17877: u64 [s1 + 0x88] = a0\n 17881: i32 a0 = a0 + 0\n 17883: u64 [s1 + 0x90] = a0\n 17887: a0 = u64 [s1 + 0x98]\n 17891: ra = 608, jump @16\n      : @634 [@dyn 304] (gas: 8)\n 17897: a1 = u64 [s1 + 0x88]\n 17901: u32 [s1 + 0x4c0] = a1\n 17905: i32 a0 = a0 + 0\n 17907: i32 a1 = s1 + 0x4c0\n 17911: a2 = 0\n 17913: ecalli 11 // 'return_data_copy'\n 17915: a0 = i32 [s1 + 0x4c0]\n 17919: fallthrough\n      : @635 (gas: 2)\n 17920: a1 = u64 [s1 + 0x90]\n 17924: jump @638 if a0 <u a1\n      : @636 (gas: 2)\n 17927: ecalli 12 // 'return_data_size'\n 17929: fallthrough\n      : @637 (gas: 3)\n 17930: a1 = a0\n 17932: a0 = a0 >> 0x20\n 17935: jump @641 if a0 == 0\n      : @638 (gas: 1)\n 17938: trap\n      : @639 (gas: 4)\n 17939: a0 = 0x1\n 17942: a1 = u64 [s1 + 0x18]\n 17945: ecalli 13 // 'seal_return'\n 17947: fallthrough\n      : @640 (gas: 5)\n 17948: a0 = 0x1\n 17951: a1 = u64 [s1 + 0x18]\n 17954: a2 = 0\n 17956: ecalli 13 // 'seal_return'\n 17958: fallthrough\n      : @641 (gas: 3)\n 17959: a0 = u64 [s1 + 0x98]\n 17963: u64 [s1 + 0x90] = a1\n 17967: ra = 610, jump @16\n      : @642 [@dyn 305] (gas: 7)\n 17973: i32 a1 = a0 + 0\n 17975: a2 = i32 [s1 + 0x90]\n 17979: a0 = 0x1\n 17982: ecalli 13 // 'seal_return'\n 17984: a0 = 0\n 17986: ra = 0x264\n 17990: jump @22\n      : @643 [export #0: 'call'] (gas: 2)\n 17993: a0 = 0\n 17995: ra = 612, jump @22\n      : @644 [@dyn 306] [export #1: 'deploy'] (gas: 2)\n 18001: a0 = 0x1\n 18004: ra = 614, jump @22\n      : @645 [@dyn 307] (gas: 14)\n 18010: a3 = s1 + 0x100\n 18014: a0 = u64 [a3 + 0x68]\n 18017: a2 = u64 [a3 + 0x60]\n 18020: a2 = a2 | a0\n 18023: a0 = 0x100000000\n 18033: u64 [a3 + 0x60] = a0\n 18036: a0 = 0xfffffffc\n 18046: a1 = u64 [a3 + 0x78]\n 18049: a0 = a1 <u a0\n 18052: a1 = u64 [a3 + 0x70]\n 18055: a0 = 0 if a1 != 0\n 18057: u64 [a3 + 0x68] = a2\n 18060: a0 = 0 if a2 != 0\n 18062: jump [t0]\n      : @646 (gas: 13)\n 18064: a4 = s1 + 0x100\n 18068: a1 = u64 [a4 + 0x70]\n 18071: a2 = u64 [a4 + 0x60]\n 18074: a1 = a1 | a2\n 18077: a3 = u64 [a4 + 0x68]\n 18080: a2 = u64 [a4 + 0x78]\n 18083: a2 = a2 | a3\n 18086: a2 = a2 | a1\n 18089: a2 = a2 >> 0x20\n 18092: a1 = a1 | a3\n 18095: a1 = a1 << 0x20\n 18098: a1 = a1 | a2\n 18101: jump [t0]\n      : @647 (gas: 7)\n 18103: a1 = u64 [a2 + 0x78]\n 18106: a0 = a1 <u a0\n 18109: a1 = u64 [a2 + 0x70]\n 18112: a0 = 0 if a1 != 0\n 18114: a1 = u64 [a2 + 0x68]\n 18117: a0 = 0 if a1 != 0\n 18119: jump [t0]\n      : @648 (gas: 9)\n 18121: a1 = a1 <u 0x20\n 18124: a1 = a1 ^ 0x1\n 18127: a1 = a0 if a3 != 0\n 18130: a0 = a3 >u 0\n 18132: a2 = a3 >u 0\n 18134: a2 = a0 if a3 == 0\n 18137: a0 = a3 | a3\n 18140: a2 = a1 if a0 == 0\n 18143: jump [t0]\n      : @649 (gas: 11)\n 18145: a0 = reverse a0\n 18147: a3 = a0 << 0x20\n 18150: a1 = reverse a1\n 18152: a1 = a1 >> 0x20\n 18155: a3 = a3 | a1\n 18158: a0 = a0 >> 0x20\n 18161: a1 = reverse a2\n 18163: a2 = a1 << 0x20\n 18166: a0 = a0 | a2\n 18169: a1 = a1 >> 0x20\n 18172: jump [t0]\n      : @650 (gas: 12)\n 18174: a5 = s1 + 0x100\n 18178: a1 = u64 [a5 + 0x78]\n 18181: a0 = u64 [a5 + 0x68]\n 18184: a3 = u64 [a5 + 0x60]\n 18187: a3 = a3 | a0\n 18190: a4 = 0x100000000\n 18200: a0 = 0xfffffffc\n 18210: a0 = a1 <u a0\n 18213: a2 = u64 [a5 + 0x70]\n 18216: a0 = 0 if a2 != 0\n 18218: a0 = 0 if a3 != 0\n 18220: jump [t0]\n      : @651 (gas: 9)\n 18222: a0 = u64 [s1 + 0xa0]\n 18226: a1 = u64 [s1 + 0x80]\n 18230: u64 [a0 + 0x8] = a1\n 18233: a1 = u64 [s1 + 0x90]\n 18237: u64 [a0] = a1\n 18239: a1 = u64 [s1 + 0x88]\n 18243: u32 [a0 + 0x10] = a1\n 18246: a0 = s1 + 0x10f8\n 18250: jump [t0]\n      : @652 (gas: 11)\n 18252: a3 = u64 [s1 + 0x178]\n 18256: a0 = u64 [a3 + 0x18]\n 18259: a1 = u64 [a3 + 0x10]\n 18262: a2 = u64 [a3 + 0x8]\n 18265: a3 = u64 [a3]\n 18267: a0 = reverse a0\n 18269: a1 = reverse a1\n 18271: a2 = reverse a2\n 18273: a3 = reverse a3\n 18275: a4 = s1 + 0x10f8\n 18279: jump [t0]\n      : @653 (gas: 8)\n 18281: a3 = a3 | a2\n 18284: a2 = a0 | a1\n 18287: a2 = a2 | a3\n 18290: a2 = a2 >> 0x20\n 18293: a1 = a1 | a3\n 18296: a1 = a1 << 0x20\n 18299: a1 = a1 | a2\n 18302: jump [t0]\n      : @654 (gas: 9)\n 18304: a3 = s1 + 0x100\n 18308: a2 = u64 [a3 + 0x78]\n 18311: a0 = 0xffffffbc\n 18321: a0 = a2 <u a0\n 18324: a1 = u64 [a3 + 0x70]\n 18327: a0 = 0 if a1 != 0\n 18329: a1 = u64 [a3 + 0x68]\n 18332: a0 = 0 if a1 != 0\n 18334: jump [t0]\n      : @655 (gas: 11)\n 18336: a0 = reverse a0\n 18338: a3 = a0 >> 0x20\n 18341: a1 = reverse a1\n 18343: a4 = a1 << 0x20\n 18346: a3 = a3 | a4\n 18349: a0 = a0 << 0x20\n 18352: a2 = reverse a2\n 18354: a2 = a2 >> 0x20\n 18357: a0 = a0 | a2\n 18360: a1 = a1 >> 0x20\n 18363: jump [t0]\n      : @656 (gas: 10)\n 18365: a0 = u64 [sp + 0x10]\n 18368: a1 = u64 [sp + 0x18]\n 18371: a2 = 0x100000000\n 18381: a2 = a2 ^ a0\n 18384: a2 = a2 | a1\n 18387: a3 = a0 >> 0x20\n 18390: a3 = a3 <u 0x1\n 18393: a3 = 0 if a1 != 0\n 18395: a3 = 0 if a2 == 0\n 18397: jump [t0]\n      : @657 (gas: 13)\n 18399: a5 = s1 + 0x100\n 18403: u64 [a5 + 0x70] = a2\n 18406: u64 [a5 + 0x68] = a3\n 18409: a0 = a2 | a3\n 18412: u64 [a5 + 0x78] = a1\n 18415: a1 = a1 | a4\n 18418: a1 = a1 | a0\n 18421: a1 = a1 >> 0x20\n 18424: u64 [a5 + 0x60] = a4\n 18427: a0 = a0 | a4\n 18430: a0 = a0 << 0x20\n 18433: a0 = a0 | a1\n 18436: jump [t0]\n      : @658 (gas: 10)\n 18438: a4 = s1 + 0x100\n 18442: a3 = u64 [a4 + 0x68]\n 18445: a2 = u64 [a4 + 0x70]\n 18448: a1 = u64 [a4 + 0x78]\n 18451: a0 = u64 [a4 + 0x60]\n 18454: a0 = a0 + 0xffffffffffffffdc\n 18457: a0 = a1 <u a0\n 18460: a0 = 0 if a2 != 0\n 18462: a0 = 0 if a3 != 0\n 18464: jump [t0]\n      : @659 (gas: 9)\n 18466: a0 = u64 [a3 + 0x18]\n 18469: a1 = u64 [a3 + 0x10]\n 18472: a2 = u64 [a3 + 0x8]\n 18475: a3 = u64 [a3]\n 18477: a0 = reverse a0\n 18479: a1 = reverse a1\n 18481: a2 = reverse a2\n 18483: a3 = reverse a3\n 18485: jump [t0]\n      : @660 (gas: 12)\n 18487: a2 = u64 [sp]\n 18489: a3 = u64 [sp + 0x8]\n 18492: u64 [s1] = a2\n 18494: u64 [s1 + 0x8] = a3\n 18497: u64 [s1 + 0x10] = a0\n 18500: u64 [s1 + 0x18] = a1\n 18503: sp = s0 + 0xffffffffffffffc0\n 18506: ra = u64 [sp + 0x38]\n 18509: s0 = u64 [sp + 0x30]\n 18512: s1 = u64 [sp + 0x28]\n 18515: sp = sp + 0x40\n 18518: jump [t0]\n      : @661 (gas: 5)\n 18520: a0 = u64 [s1 + 0x178]\n 18524: i32 a0 = a0 + 0x24\n 18527: a2 = s1 + 0x7ff\n 18531: a2 = a2 + 0xf9\n 18535: jump [t0]\n      : @662 (gas: 12)\n 18537: a1 = u64 [s1 + 0x90]\n 18541: a2 = u64 [s1 + 0x80]\n 18545: a1 = a1 | a2\n 18548: a3 = u64 [s1 + 0x88]\n 18552: a2 = u64 [s1 + 0x98]\n 18556: a2 = a2 | a3\n 18559: a2 = a2 | a1\n 18562: a2 = a2 >> 0x20\n 18565: a1 = a1 | a3\n 18568: a1 = a1 << 0x20\n 18571: a1 = a1 | a2\n 18574: jump [t0]\n      : @663 (gas: 9)\n 18576: a1 = a1 | a4\n 18579: a3 = a3 >> 0x20\n 18582: a4 = u64 [s1 + 0xa0]\n 18586: u32 [a4 + 0x10] = a3\n 18589: u64 [a4 + 0x8] = a1\n 18592: u64 [a4] = a2\n 18594: a1 = 0x10f8\n 18598: a2 = s1 + a1\n 18601: jump [t0]\n      : @664 (gas: 8)\n 18603: a1 = sp + 0xffffffffffffffe0\n 18606: a1 = a1 & 0xffffffffffffffe0\n 18609: u64 [s1 + 0x178] = a1\n 18613: sp = a1\n 18615: i32 a0 = a0 + 0\n 18617: i32 a2 = a1 + 0\n 18619: a1 = 0x40\n 18622: jump [t0]\n      : @665 (gas: 4)\n 18624: a0 = 0x10f8\n 18628: a3 = s1 + a0\n 18631: a4 = a3 + 0x500\n 18635: jump [t0]\n      : @666 (gas: 7)\n 18637: a1 = a0 | a5\n 18640: a1 = a1 | a2\n 18643: a1 = a1 >> 0x20\n 18646: a2 = a2 | a5\n 18649: a2 = a2 << 0x20\n 18652: a1 = a1 | a2\n 18655: jump [t0]\n      : @667 (gas: 7)\n 18657: a1 = a0 | a3\n 18660: a1 = a1 | a2\n 18663: a1 = a1 >> 0x20\n 18666: a2 = a2 | a3\n 18669: a2 = a2 << 0x20\n 18672: a1 = a1 | a2\n 18675: jump [t0]\n      : @668 (gas: 5)\n 18677: a0 = u64 [s1 + 0x178]\n 18681: i32 a0 = a0 + 0x4\n 18684: a2 = s1 + 0x7ff\n 18688: a2 = a2 + 0xf9\n 18692: jump [t0]\n      : @669 (gas: 2)\n 18694: a3 = a2 & 0x40\n 18697: jump @673 if a3 != 0\n      : @670 (gas: 1)\n 18700: jump @672 if a2 == 0\n      : @671 (gas: 6)\n 18703: i32 a3 = 0x40 - a2\n 18706: a3 = a1 << a3\n 18709: a1 = a1 >> a2\n 18712: a0 = a0 >> a2\n 18715: a0 = a0 | a3\n 18718: ret\n      : @672 (gas: 1)\n 18720: ret\n      : @673 (gas: 4)\n 18722: a0 = a2 + 0xffffffffffffffc0\n 18725: a0 = a1 >> a0\n 18728: a1 = 0\n 18730: ret\n      : @674 (gas: 2)\n 18732: a3 = a2 & 0x40\n 18735: jump @678 if a3 != 0\n      : @675 (gas: 1)\n 18738: jump @677 if a2 == 0\n      : @676 (gas: 6)\n 18741: i32 a3 = 0x40 - a2\n 18744: a3 = a0 >> a3\n 18747: a0 = a0 << a2\n 18750: a1 = a1 << a2\n 18753: a1 = a1 | a3\n 18756: ret\n      : @677 (gas: 1)\n 18758: ret\n      : @678 (gas: 4)\n 18760: a1 = a2 + 0xffffffffffffffc0\n 18763: a1 = a0 << a1\n 18766: a0 = 0\n 18768: ret\n",
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "autoListMinted(address,uint256)": "7d808e68",
              "buy(uint256)": "d96a094a",
              "feeBps()": "24a9d853",
              "feeRecipient()": "46904840",
              "listings(uint256)": "de74e57b",
              "nft()": "47ccca02",
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "setFee(address,uint96)": "0948de59",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "irOptimized": "/// @use-src 0:\"@openzeppelin/contracts/access/Ownable.sol\", 1:\"@openzeppelin/contracts/utils/Context.sol\", 2:\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\", 4:\"contracts/Luanchpad.sol\"\nobject \"AiLaunchpad_1085\" {\n    code {\n        {\n            /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n            let _1 := memoryguard(0xa0)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"AiLaunchpad_1085\")\n            let argSize := sub(codesize(), programSize)\n            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), 96)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n            let value0 := abi_decode_address_fromMemory(_1)\n            let value1 := abi_decode_address_fromMemory(add(_1, 32))\n            let value := mload(add(_1, 64))\n            if iszero(eq(value, and(value, sub(shl(96, 1), 1))))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:1269:1364  \"if (initialOwner == address(0)) {...\"\n            if /** @src 0:1273:1299  \"initialOwner == address(0)\" */ iszero(/** @src 1:735:745  \"msg.sender\" */ caller())\n            /// @src 0:1269:1364  \"if (initialOwner == address(0)) {...\"\n            {\n                /// @src 0:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:1322:1353  \"OwnableInvalidOwner(address(0))\" */ shl(224, 0x1e4fbdf7))\n                /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                mstore(/** @src 0:1322:1353  \"OwnableInvalidOwner(address(0))\" */ 4, /** @src -1:-1:-1 */ 0)\n                /// @src 0:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                revert(/** @src -1:-1:-1 */ 0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 36)\n            }\n            let _2 := sload(/** @src -1:-1:-1 */ 0)\n            /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n            sstore(/** @src -1:-1:-1 */ 0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ or(and(_2, not(sub(shl(160, 1), 1))), /** @src 1:735:745  \"msg.sender\" */ caller()))\n            /// @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n            let _3 := /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ mload(64)\n            /// @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n            log3(/** @src -1:-1:-1 */ 0, 0, /** @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ and(_2, sub(shl(160, 1), 1)), /** @src 1:735:745  \"msg.sender\" */ caller())\n            /// @src 2:1857:1858  \"1\"\n            sstore(0x01, 0x01)\n            /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n            if /** @src 4:755:773  \"nft_ != address(0)\" */ iszero(/** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ and(/** @src 4:755:773  \"nft_ != address(0)\" */ value0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ sub(shl(160, 1), 1)))\n            {\n                mstore(_3, shl(229, 4594637))\n                mstore(add(_3, 4), 32)\n                mstore(add(_3, 36), 5)\n                mstore(add(_3, 68), \"nft=0\")\n                revert(_3, 100)\n            }\n            /// @src 4:793:803  \"nft = nft_\"\n            mstore(128, value0)\n            /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n            sstore(/** @src 4:813:841  \"feeRecipient = feeRecipient_\" */ 0x02, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ or(and(value1, sub(shl(160, 1), 1)), and(shl(160, value), not(sub(shl(160, 1), 1)))))\n            let _4 := mload(64)\n            let _5 := datasize(\"AiLaunchpad_1085_deployed\")\n            codecopy(_4, dataoffset(\"AiLaunchpad_1085_deployed\"), _5)\n            setimmutable(_4, \"758\", mload(/** @src 4:793:803  \"nft = nft_\" */ 128))\n            /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n            return(_4, _5)\n        }\n        function abi_decode_address_fromMemory(offset) -> value\n        {\n            value := mload(offset)\n            if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        }\n    }\n    /// @use-src 0:\"@openzeppelin/contracts/access/Ownable.sol\", 1:\"@openzeppelin/contracts/utils/Context.sol\", 2:\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\", 4:\"contracts/Luanchpad.sol\"\n    object \"AiLaunchpad_1085_deployed\" {\n        code {\n            {\n                /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _1 := 0\n                    switch shr(224, calldataload(0))\n                    case 0x0948de59 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0 := abi_decode_address()\n                        let value := calldataload(36)\n                        if iszero(eq(value, and(value, 0xffffffffffffffffffffffff))) { revert(0, 0) }\n                        /// @src 0:1500:1562  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                        sstore(/** @src 4:956:980  \"feeRecipient = recipient\" */ 0x02, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ or(and(value0, sub(shl(160, 1), 1)), and(shl(160, value), shl(160, 0xffffffffffffffffffffffff))))\n                        return(0, 0)\n                    }\n                    case 0x24a9d853 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _2 := shr(160, sload(/** @src 4:322:342  \"uint96 public feeBps\" */ 2))\n                        /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                        let memPos := mload(64)\n                        mstore(memPos, _2)\n                        return(memPos, 32)\n                    }\n                    case 0x46904840 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_1 := and(sload(/** @src 4:289:316  \"address public feeRecipient\" */ 2), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ sub(shl(160, 1), 1))\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, value_1)\n                        return(memPos_1, 32)\n                    }\n                    case 0x47ccca02 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, and(/** @src 4:254:282  \"address public immutable nft\" */ loadimmutable(\"758\"), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ sub(shl(160, 1), 1)))\n                        return(memPos_2, 32)\n                    }\n                    case 0x715018a6 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        /// @src 0:1500:1562  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                        let _3 := sload(0)\n                        sstore(0, and(_3, shl(160, 0xffffffffffffffffffffffff)))\n                        /// @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                        log3(/** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 0, 0, /** @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ and(_3, sub(shl(160, 1), 1)), 0)\n                        return(0, 0)\n                    }\n                    case 0x7d808e68 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_1 := abi_decode_address()\n                        if iszero(/** @src 4:2183:2200  \"msg.sender == nft\" */ eq(/** @src 4:2183:2193  \"msg.sender\" */ caller(), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ and(/** @src 4:2197:2200  \"nft\" */ loadimmutable(\"758\"), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ sub(shl(160, 1), 1))))\n                        {\n                            let memPtr := mload(64)\n                            mstore(memPtr, shl(229, 4594637))\n                            mstore(add(memPtr, 4), 32)\n                            mstore(add(memPtr, 36), 8)\n                            mstore(add(memPtr, 68), \"only nft\")\n                            revert(memPtr, 100)\n                        }\n                        /// @src 4:2223:2257  \"listingId = _list(seller, tokenId)\"\n                        let var_listingId := /** @src 4:2235:2257  \"_list(seller, tokenId)\" */ fun_list(value0_1, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ calldataload(36))\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, var_listingId)\n                        return(memPos_3, 32)\n                    }\n                    case 0x8da5cb5b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let cleaned := and(sload(0), sub(shl(160, 1), 1))\n                        let memPos_4 := mload(64)\n                        mstore(memPos_4, cleaned)\n                        return(memPos_4, 32)\n                    }\n                    case 0xd96a094a {\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_2 := calldataload(4)\n                        /// @src 2:2698:2784  \"if (_status == ENTERED) {...\"\n                        if /** @src 2:2702:2720  \"_status == ENTERED\" */ eq(/** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ sload(1), /** @src 2:1899:1900  \"2\" */ 0x02)\n                        /// @src 2:2698:2784  \"if (_status == ENTERED) {...\"\n                        {\n                            /// @src 2:2743:2773  \"ReentrancyGuardReentrantCall()\"\n                            mstore(/** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 0, /** @src 2:2743:2773  \"ReentrancyGuardReentrantCall()\" */ shl(224, 0x3ee5aeb5))\n                            revert(/** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 0, 4)\n                        }\n                        /// @src 2:1899:1900  \"2\"\n                        sstore(/** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 1, /** @src 2:1899:1900  \"2\" */ 0x02)\n                        /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                        mstore(0, value_2)\n                        mstore(32, /** @src 4:1112:1120  \"listings\" */ 0x03)\n                        /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                        let dataSlot := keccak256(0, 64)\n                        let memPtr_1 := mload(64)\n                        finalize_allocation_7054(memPtr_1)\n                        let cleaned_1 := and(sload(dataSlot), sub(shl(160, 1), 1))\n                        mstore(memPtr_1, cleaned_1)\n                        if /** @src 4:1149:1177  \"listing.seller != address(0)\" */ iszero(/** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ cleaned_1)\n                        {\n                            let memPtr_2 := mload(64)\n                            mstore(memPtr_2, shl(229, 4594637))\n                            mstore(add(memPtr_2, 4), 32)\n                            mstore(add(memPtr_2, 36), 15)\n                            mstore(add(memPtr_2, 68), \"unknown listing\")\n                            revert(memPtr_2, 100)\n                        }\n                        let _4 := and(/** @src 4:1236:1239  \"nft\" */ loadimmutable(\"758\"), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ sub(shl(160, 1), 1))\n                        /// @src 4:1295:1319  \"token.isBuyable(tokenId)\"\n                        let _5 := /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ mload(64)\n                        /// @src 4:1295:1319  \"token.isBuyable(tokenId)\"\n                        mstore(_5, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ shl(227, 0x1ce718f9))\n                        mstore(/** @src 4:1295:1319  \"token.isBuyable(tokenId)\" */ add(_5, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 4), value_2)\n                        /// @src 4:1295:1319  \"token.isBuyable(tokenId)\"\n                        let _6 := staticcall(gas(), _4, _5, 36, _5, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 32)\n                        /// @src 4:1295:1319  \"token.isBuyable(tokenId)\"\n                        if iszero(_6)\n                        {\n                            /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                            let pos := mload(64)\n                            returndatacopy(pos, 0, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        /// @src 4:1295:1319  \"token.isBuyable(tokenId)\"\n                        let expr := /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 0\n                        /// @src 4:1295:1319  \"token.isBuyable(tokenId)\"\n                        if _6\n                        {\n                            let _7 := /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 32\n                            /// @src 4:1295:1319  \"token.isBuyable(tokenId)\"\n                            if gt(/** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 32, /** @src 4:1295:1319  \"token.isBuyable(tokenId)\" */ returndatasize()) { _7 := returndatasize() }\n                            finalize_allocation(_5, _7)\n                            /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                            if slt(sub(/** @src 4:1295:1319  \"token.isBuyable(tokenId)\" */ add(_5, _7), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ _5), 32) { revert(0, 0) }\n                            let value_3 := mload(_5)\n                            if iszero(eq(value_3, iszero(iszero(value_3)))) { revert(0, 0) }\n                            /// @src 4:1295:1319  \"token.isBuyable(tokenId)\"\n                            expr := value_3\n                        }\n                        /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                        if iszero(expr)\n                        {\n                            let memPtr_3 := mload(64)\n                            mstore(memPtr_3, shl(229, 4594637))\n                            mstore(add(memPtr_3, 4), 32)\n                            mstore(add(memPtr_3, /** @src 4:1295:1319  \"token.isBuyable(tokenId)\" */ 36), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 11)\n                            mstore(add(memPtr_3, 68), \"not buyable\")\n                            revert(memPtr_3, 100)\n                        }\n                        /// @src 4:1362:1384  \"token.priceOf(tokenId)\"\n                        let _8 := /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ mload(64)\n                        /// @src 4:1362:1384  \"token.priceOf(tokenId)\"\n                        mstore(_8, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ shl(224, 0xb9186d7d))\n                        mstore(/** @src 4:1362:1384  \"token.priceOf(tokenId)\" */ add(_8, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 4), value_2)\n                        /// @src 4:1362:1384  \"token.priceOf(tokenId)\"\n                        let _9 := staticcall(gas(), _4, _8, /** @src 4:1295:1319  \"token.isBuyable(tokenId)\" */ 36, /** @src 4:1362:1384  \"token.priceOf(tokenId)\" */ _8, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 32)\n                        /// @src 4:1362:1384  \"token.priceOf(tokenId)\"\n                        if iszero(_9)\n                        {\n                            /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                            let pos_1 := mload(64)\n                            returndatacopy(pos_1, 0, returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        /// @src 4:1362:1384  \"token.priceOf(tokenId)\"\n                        let expr_1 := /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 0\n                        /// @src 4:1362:1384  \"token.priceOf(tokenId)\"\n                        if _9\n                        {\n                            let _10 := /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 32\n                            /// @src 4:1362:1384  \"token.priceOf(tokenId)\"\n                            if gt(/** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 32, /** @src 4:1362:1384  \"token.priceOf(tokenId)\" */ returndatasize()) { _10 := returndatasize() }\n                            finalize_allocation(_8, _10)\n                            let value0_2 := /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 0\n                            if slt(sub(/** @src 4:1362:1384  \"token.priceOf(tokenId)\" */ add(_8, _10), _8), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 32) { revert(0, 0) }\n                            value0_2 := mload(/** @src 4:1362:1384  \"token.priceOf(tokenId)\" */ _8)\n                            expr_1 := value0_2\n                        }\n                        /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                        if iszero(/** @src 4:1402:1420  \"msg.value == price\" */ eq(/** @src 4:1402:1411  \"msg.value\" */ callvalue(), /** @src 4:1402:1420  \"msg.value == price\" */ expr_1))\n                        /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                        {\n                            let memPtr_4 := mload(64)\n                            mstore(memPtr_4, shl(229, 4594637))\n                            mstore(add(memPtr_4, 4), 32)\n                            mstore(add(memPtr_4, /** @src 4:1295:1319  \"token.isBuyable(tokenId)\" */ 36), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 9)\n                            mstore(add(memPtr_4, 68), \"bad value\")\n                            revert(memPtr_4, 100)\n                        }\n                        let _11 := sload(/** @src 2:1899:1900  \"2\" */ 0x02)\n                        /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                        let _12 := shr(160, _11)\n                        let product := mul(expr_1, _12)\n                        if iszero(or(iszero(expr_1), eq(_12, div(product, expr_1))))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(0, /** @src 4:1295:1319  \"token.isBuyable(tokenId)\" */ 36)\n                        }\n                        /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                        let r := div(product, /** @src 4:1478:1484  \"10_000\" */ 0x2710)\n                        /// @src 4:1498:1535  \"fee > 0 && feeRecipient != address(0)\"\n                        let expr_2 := /** @src 4:1498:1505  \"fee > 0\" */ iszero(iszero(r))\n                        /// @src 4:1498:1535  \"fee > 0 && feeRecipient != address(0)\"\n                        if expr_2\n                        {\n                            expr_2 := /** @src 4:1509:1535  \"feeRecipient != address(0)\" */ iszero(iszero(/** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ and(_11, sub(shl(160, 1), 1))))\n                        }\n                        /// @src 4:1494:1670  \"if (fee > 0 && feeRecipient != address(0)) {...\"\n                        if expr_2\n                        {\n                            /// @src 4:1568:1610  \"payable(feeRecipient).call{value: fee}(\\\"\\\")\"\n                            let expr_component := call(gas(), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ and(_11, sub(shl(160, 1), 1)), /** @src 4:1568:1610  \"payable(feeRecipient).call{value: fee}(\\\"\\\")\" */ r, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 0, 0, 0, 0)\n                            /// @src 4:1568:1610  \"payable(feeRecipient).call{value: fee}(\\\"\\\")\"\n                            pop(extract_returndata())\n                            /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                            if iszero(expr_component)\n                            {\n                                let memPtr_5 := mload(64)\n                                mstore(memPtr_5, shl(229, 4594637))\n                                mstore(add(memPtr_5, 4), 32)\n                                mstore(add(memPtr_5, /** @src 4:1295:1319  \"token.isBuyable(tokenId)\" */ 36), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 17)\n                                mstore(add(memPtr_5, 68), \"fee transfer fail\")\n                                revert(memPtr_5, 100)\n                            }\n                        }\n                        let diff := sub(expr_1, r)\n                        if gt(diff, expr_1)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(0, /** @src 4:1295:1319  \"token.isBuyable(tokenId)\" */ 36)\n                        }\n                        /// @src 4:1746:1801  \"payable(listing.seller).call{value: sellerProceeds}(\\\"\\\")\"\n                        let expr_component_1 := call(gas(), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ and(mload(/** @src 4:1754:1768  \"listing.seller\" */ memPtr_1), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ sub(shl(160, 1), 1)), /** @src 4:1746:1801  \"payable(listing.seller).call{value: sellerProceeds}(\\\"\\\")\" */ diff, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 0, 0, 0, 0)\n                        /// @src 4:1746:1801  \"payable(listing.seller).call{value: sellerProceeds}(\\\"\\\")\"\n                        pop(extract_returndata())\n                        /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                        if iszero(expr_component_1)\n                        {\n                            let memPtr_6 := mload(64)\n                            mstore(memPtr_6, shl(229, 4594637))\n                            mstore(add(memPtr_6, 4), 32)\n                            mstore(add(memPtr_6, /** @src 4:1295:1319  \"token.isBuyable(tokenId)\" */ 36), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 20)\n                            mstore(add(memPtr_6, 68), \"seller transfer fail\")\n                            revert(memPtr_6, 100)\n                        }\n                        /// @src 4:1900:1932  \"token.transferTo(buyer, tokenId)\"\n                        if iszero(extcodesize(_4))\n                        {\n                            /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                            revert(0, 0)\n                        }\n                        /// @src 4:1900:1932  \"token.transferTo(buyer, tokenId)\"\n                        let _13 := /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ mload(64)\n                        /// @src 4:1900:1932  \"token.transferTo(buyer, tokenId)\"\n                        mstore(_13, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ shl(228, 0x02ccb1b3))\n                        mstore(/** @src 4:1900:1932  \"token.transferTo(buyer, tokenId)\" */ add(_13, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 4), /** @src 4:1879:1889  \"msg.sender\" */ caller())\n                        /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                        mstore(add(/** @src 4:1900:1932  \"token.transferTo(buyer, tokenId)\" */ _13, /** @src 4:1295:1319  \"token.isBuyable(tokenId)\" */ 36), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ value_2)\n                        /// @src 4:1900:1932  \"token.transferTo(buyer, tokenId)\"\n                        let _14 := call(gas(), _4, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 0, /** @src 4:1900:1932  \"token.transferTo(buyer, tokenId)\" */ _13, 68, _13, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 0)\n                        /// @src 4:1900:1932  \"token.transferTo(buyer, tokenId)\"\n                        if iszero(_14)\n                        {\n                            /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                            let pos_2 := mload(64)\n                            returndatacopy(pos_2, 0, returndatasize())\n                            revert(pos_2, returndatasize())\n                        }\n                        /// @src 4:1900:1932  \"token.transferTo(buyer, tokenId)\"\n                        if _14\n                        {\n                            finalize_allocation(_13, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 0)\n                            _1 := 0\n                        }\n                        mstore(_1, value_2)\n                        mstore(32, /** @src 4:1112:1120  \"listings\" */ 0x03)\n                        /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                        sstore(keccak256(_1, 64), _1)\n                        /// @src 4:2750:2784  \"AiTextNFT(nft).disableBuy(tokenId)\"\n                        if iszero(extcodesize(_4))\n                        {\n                            /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                            revert(_1, _1)\n                        }\n                        /// @src 4:2750:2784  \"AiTextNFT(nft).disableBuy(tokenId)\"\n                        let _15 := /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ mload(64)\n                        /// @src 4:2750:2784  \"AiTextNFT(nft).disableBuy(tokenId)\"\n                        mstore(_15, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ shl(227, 0x0b54b491))\n                        mstore(/** @src 4:2750:2784  \"AiTextNFT(nft).disableBuy(tokenId)\" */ add(_15, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 4), value_2)\n                        /// @src 4:2750:2784  \"AiTextNFT(nft).disableBuy(tokenId)\"\n                        let _16 := call(gas(), _4, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ _1, /** @src 4:2750:2784  \"AiTextNFT(nft).disableBuy(tokenId)\" */ _15, /** @src 4:1295:1319  \"token.isBuyable(tokenId)\" */ 36, /** @src 4:2750:2784  \"AiTextNFT(nft).disableBuy(tokenId)\" */ _15, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ _1)\n                        /// @src 4:2750:2784  \"AiTextNFT(nft).disableBuy(tokenId)\"\n                        if iszero(_16)\n                        {\n                            /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                            let pos_3 := mload(64)\n                            returndatacopy(pos_3, _1, returndatasize())\n                            revert(pos_3, returndatasize())\n                        }\n                        /// @src 4:2750:2784  \"AiTextNFT(nft).disableBuy(tokenId)\"\n                        if _16\n                        {\n                            finalize_allocation(_15, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ _1)\n                            if _1 { revert(_1, _1) }\n                        }\n                        /// @src 4:1973:2006  \"Bought(listingId, tokenId, buyer)\"\n                        let _17 := /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ mload(64)\n                        mstore(_17, /** @src 4:1879:1889  \"msg.sender\" */ caller())\n                        /// @src 4:1973:2006  \"Bought(listingId, tokenId, buyer)\"\n                        log3(_17, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 32, /** @src 4:1973:2006  \"Bought(listingId, tokenId, buyer)\" */ 0xa2a8034590a15fe810e9813d736096c0a03b3236cecb34b5b9f687ed67a6a624, value_2, value_2)\n                        /// @src 4:2017:2038  \"_list(buyer, tokenId)\"\n                        pop(fun_list(/** @src 4:1879:1889  \"msg.sender\" */ caller(), /** @src 4:2017:2038  \"_list(buyer, tokenId)\" */ value_2))\n                        /// @src 2:1899:1900  \"2\"\n                        sstore(/** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 1, 1)\n                        return(_1, _1)\n                    }\n                    case 0xde74e57b {\n                        if callvalue() { revert(_1, _1) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_1, _1) }\n                        mstore(_1, calldataload(4))\n                        mstore(32, /** @src 4:417:460  \"mapping(uint256 => Listing) public listings\" */ 3)\n                        /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                        let cleaned_2 := and(sload(keccak256(_1, 64)), sub(shl(160, 1), 1))\n                        let memPos_5 := mload(64)\n                        mstore(memPos_5, cleaned_2)\n                        return(memPos_5, 32)\n                    }\n                    case 0xf2fde38b {\n                        if callvalue() { revert(_1, _1) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_1, _1) }\n                        let value0_3 := abi_decode_address()\n                        /// @src 0:1500:1562  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                        let _18 := and(/** @src 0:2627:2649  \"newOwner == address(0)\" */ value0_3, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ sub(shl(160, 1), 1))\n                        /// @src 0:2623:2714  \"if (newOwner == address(0)) {...\"\n                        if /** @src 0:2627:2649  \"newOwner == address(0)\" */ iszero(/** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ _18)\n                        /// @src 0:2623:2714  \"if (newOwner == address(0)) {...\"\n                        {\n                            /// @src 0:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                            mstore(/** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ _1, /** @src 0:2672:2703  \"OwnableInvalidOwner(address(0))\" */ shl(224, 0x1e4fbdf7))\n                            /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                            mstore(4, _1)\n                            /// @src 0:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                            revert(/** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ _1, 36)\n                        }\n                        let _19 := sload(/** @src 0:3004:3010  \"_owner\" */ _1)\n                        /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                        sstore(/** @src 0:3004:3010  \"_owner\" */ _1, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ or(and(_19, shl(160, 0xffffffffffffffffffffffff)), _18))\n                        /// @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                        log3(/** @src 0:3004:3010  \"_owner\" */ _1, _1, /** @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ and(_19, sub(shl(160, 1), 1)), /** @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ _18)\n                        /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                        return(_1, _1)\n                    }\n                }\n                if iszero(calldatasize()) { stop() }\n                revert(0, 0)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function finalize_allocation_7054(memPtr)\n            {\n                let newFreePtr := add(memPtr, 32)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 { data := 96 }\n                default {\n                    let _1 := returndatasize()\n                    if gt(_1, 0xffffffffffffffff)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 0x24)\n                    }\n                    let memPtr := mload(64)\n                    finalize_allocation(memPtr, add(and(add(_1, 31), not(31)), 0x20))\n                    mstore(memPtr, _1)\n                    data := memPtr\n                    returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ returndatasize())\n                }\n            }\n            /// @ast-id 84 @src 0:1796:1958  \"function _checkOwner() internal view virtual {...\"\n            function fun_checkOwner()\n            {\n                /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                let cleaned := and(sload(/** @src 0:1710:1716  \"_owner\" */ 0x00), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ sub(shl(160, 1), 1))\n                /// @src 0:1851:1952  \"if (owner() != _msgSender()) {...\"\n                if /** @src 0:1855:1878  \"owner() != _msgSender()\" */ iszero(eq(/** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ cleaned, /** @src 1:735:745  \"msg.sender\" */ caller()))\n                /// @src 0:1851:1952  \"if (owner() != _msgSender()) {...\"\n                {\n                    /// @src 0:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                    mstore(/** @src 0:1710:1716  \"_owner\" */ 0x00, /** @src 0:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\" */ shl(224, 0x118cdaa7))\n                    /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                    mstore(/** @src 0:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\" */ 4, /** @src 1:735:745  \"msg.sender\" */ caller())\n                    /// @src 0:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                    revert(/** @src 0:1710:1716  \"_owner\" */ 0x00, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 36)\n                }\n            }\n            /// @ast-id 1066 @src 4:2305:2657  \"function _list(address seller, uint256 tokenId) internal returns (uint256 listingId) {...\"\n            function fun_list(var_seller, var_tokenId) -> var_listingId\n            {\n                /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                let memPtr := /** @src -1:-1:-1 */ 0\n                /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                let memPtr_1 := mload(64)\n                finalize_allocation_7054(memPtr_1)\n                mstore(memPtr_1, and(var_seller, sub(shl(160, 1), 1)))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ var_tokenId)\n                mstore(32, /** @src 4:2400:2408  \"listings\" */ 0x03)\n                /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                let dataSlot := keccak256(/** @src -1:-1:-1 */ 0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 64)\n                sstore(dataSlot, or(and(sload(dataSlot), shl(160, 0xffffffffffffffffffffffff)), and(mload(memPtr_1), sub(shl(160, 1), 1))))\n                let _1 := and(/** @src 4:2484:2487  \"nft\" */ loadimmutable(\"758\"), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ sub(shl(160, 1), 1))\n                /// @src 4:2514:2536  \"token.priceOf(tokenId)\"\n                let _2 := /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ mload(64)\n                /// @src 4:2514:2536  \"token.priceOf(tokenId)\"\n                mstore(_2, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ shl(224, 0xb9186d7d))\n                mstore(/** @src 4:2514:2536  \"token.priceOf(tokenId)\" */ add(_2, 4), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ var_tokenId)\n                /// @src 4:2514:2536  \"token.priceOf(tokenId)\"\n                let _3 := staticcall(gas(), _1, _2, 36, _2, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 32)\n                /// @src 4:2514:2536  \"token.priceOf(tokenId)\"\n                if iszero(_3)\n                {\n                    /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                    let pos := mload(64)\n                    returndatacopy(pos, /** @src -1:-1:-1 */ 0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ returndatasize())\n                    revert(pos, returndatasize())\n                }\n                /// @src 4:2514:2536  \"token.priceOf(tokenId)\"\n                let expr := /** @src -1:-1:-1 */ 0\n                /// @src 4:2514:2536  \"token.priceOf(tokenId)\"\n                if _3\n                {\n                    let _4 := /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 32\n                    /// @src 4:2514:2536  \"token.priceOf(tokenId)\"\n                    if gt(/** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 32, /** @src 4:2514:2536  \"token.priceOf(tokenId)\" */ returndatasize()) { _4 := returndatasize() }\n                    finalize_allocation(_2, _4)\n                    let value0 := /** @src -1:-1:-1 */ 0\n                    /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                    if slt(sub(/** @src 4:2514:2536  \"token.priceOf(tokenId)\" */ add(_2, _4), _2), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 32)\n                    {\n                        revert(/** @src -1:-1:-1 */ 0, 0)\n                    }\n                    /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                    value0 := mload(/** @src 4:2514:2536  \"token.priceOf(tokenId)\" */ _2)\n                    expr := value0\n                }\n                /// @src 4:2546:2565  \"listingId = tokenId\"\n                var_listingId := var_tokenId\n                /// @src 4:2581:2614  \"Listed(listingId, tokenId, price)\"\n                let _5 := /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ mload(64)\n                mstore(_5, expr)\n                /// @src 4:2581:2614  \"Listed(listingId, tokenId, price)\"\n                log3(_5, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ 32, /** @src 4:2581:2614  \"Listed(listingId, tokenId, price)\" */ 0xd2c77e2f0af9ca6f36551d7f00daf85693a1be71f1e5957bde2acb99264ed801, var_tokenId, var_tokenId)\n                /// @src 4:2625:2650  \"token.disableBuy(tokenId)\"\n                if iszero(extcodesize(_1))\n                {\n                    /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 4:2625:2650  \"token.disableBuy(tokenId)\"\n                let _6 := /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ mload(64)\n                /// @src 4:2625:2650  \"token.disableBuy(tokenId)\"\n                mstore(_6, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ shl(227, 0x0b54b491))\n                mstore(/** @src 4:2625:2650  \"token.disableBuy(tokenId)\" */ add(_6, /** @src 4:2514:2536  \"token.priceOf(tokenId)\" */ 4), /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ var_tokenId)\n                /// @src 4:2625:2650  \"token.disableBuy(tokenId)\"\n                let _7 := call(gas(), _1, /** @src -1:-1:-1 */ 0, /** @src 4:2625:2650  \"token.disableBuy(tokenId)\" */ _6, /** @src 4:2514:2536  \"token.priceOf(tokenId)\" */ 36, /** @src 4:2625:2650  \"token.disableBuy(tokenId)\" */ _6, /** @src -1:-1:-1 */ 0)\n                /// @src 4:2625:2650  \"token.disableBuy(tokenId)\"\n                if iszero(_7)\n                {\n                    /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                    let pos_1 := mload(64)\n                    returndatacopy(pos_1, /** @src -1:-1:-1 */ 0, /** @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\" */ returndatasize())\n                    revert(pos_1, returndatasize())\n                }\n                /// @src 4:2625:2650  \"token.disableBuy(tokenId)\"\n                if _7\n                {\n                    finalize_allocation(_6, /** @src -1:-1:-1 */ 0)\n                    /// @src 4:199:2793  \"contract AiLaunchpad is Ownable, ReentrancyGuard {...\"\n                    memPtr := /** @src -1:-1:-1 */ 0\n                }\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212201f789c4f63e1035d58eaecbf19501c1c168cca5efc6ea114a4b40153e8557a1a64736f6c634300081c0033\"\n    }\n}\n",
          "hash": "8f4857155fd516382ea3dfa05069bd216a796e1bf9974c08f70b978d01ba63e0",
          "factoryDependencies": {}
        }
      }
    }
  }
}